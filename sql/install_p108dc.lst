SQL> 
SQL> WHENEVER OSERROR CONTINUE
SQL> 
SQL> SET ECHO OFF

eComex Release: 3.0.108

Client's info
==============
  User.......: R108
  Schema.....: R108
  OS user....: oracle
  Process....: 5579
  Machine....: genesis.ecomex.local
  Terminal...: pts/0
  Program....: sqlplus@genesis.ecomex.local (TNS V1-V3)
  Module.....: 01@ install.sql
  Logon time.: 08/10/2020 09:39:00

Server's info
==============
  Username...: oracle
  Process....: 5581
  Terminal...: UNKNOWN
  Program....: oracle@genesis.ecomex.local

Database's info
===============
  Name.......: genesis
  Domain.....: ecomex.local
  Date/time..: 08/10/2020 09:39:03


Invalid objects before patch appliance
======================================

no rows selected

SQL> 
SQL> @@script_ecomex_092.sql
SQL> REM +========================================================================+
SQL> REM  Objetivo.....: Criar os objetos padrões do eComex.			 |
SQL> REM | Onde executar: No banco de dados do eComex.				  |
SQL> REM +========================================================================+
SQL> -- Create table
SQL> 
SQL> -- Alter table add column
SQL> 
SQL> -- Comments on table
SQL> 
SQL> -- Comments on column
SQL> 
SQL> -- Alter table drop check constraint
SQL> 
SQL> -- Alter table drop constraint foreign key
SQL> 
SQL> -- Alter table drop constraint unique key
SQL> 
SQL> -- Alter table drop constraint primary key
SQL> 
SQL> -- Inserts
SQL> 
SQL> BEGIN
  2  
  3    INSERT INTO exp_identificadores_due
  4    (
  5  	 identificador_id
  6    , codigo
  7    , descricao
  8    , tag
  9    , tipo
 10    , valor
 11    , origem
 12    , creation_date
 13    , created_by
 14    , last_update_date
 15    , last_updated_by
 16    , tamanho
 17    , corta_tamanho
 18    ) VALUES (
 19  	   exp_identificadores_due_sq1.NEXTVAL
 20  	 , 'EX0020_NF'
 21  	 , 'ItemDU-E/descriçãoComercial'
 22  	 , 'commercialDescription '
 23  	 , 'P'
 24  	 , 'vc_retorno := NULL;'
 25  	 , 'NA'
 26  	 , SYSDATE
 27  	 , 0
 28  	 , SYSDATE
 29  	 , 0
 30  	 , 600
 31  	 , 'N'
 32    );
 33  COMMIT;
 34  END;
 35  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    vn_evento_id NUMBER := cmx_fnc_gera_Evento('Automatizacao de datas DUE', SYSDATE, 0);
  3  
  4    PROCEDURE p( pc_tipo	 VARCHAR2
  5  		  , pc_codigo	 VARCHAR2
  6  		  , pc_Descricao VARCHAR2
  7  		  , pc_auxiliar1 VARCHAR2
  8  		  , pc_auxiliar2 VARCHAR2
  9  		  , pc_auxiliar3 VARCHAR2
 10  		  )
 11    IS
 12  
 13  	 CURSOR cur_tab
 14  	     IS
 15  	 SELECT tabela_id
 16  	   FROM cmx_tabelas ct
 17  	  WHERE ct.tipo= pc_tipo
 18  	    AND ct.codigo = pc_codigo;
 19  
 20  	 vn_tabela_id NUMBER;
 21  
 22    BEGIN
 23  	 OPEN cur_tab;
 24  	 FETCH cur_tab INTO vn_tabela_id;
 25  	 CLOSE cur_tab;
 26  
 27  	 IF vn_tabela_id IS NOT NULL THEN
 28  	   UPDATE cmx_tabelas
 29  	      SET descricao = pc_descricao
 30  		, auxiliar1 = pc_auxiliar1
 31  		, auxiliar2 = pc_auxiliar2
 32  		, auxiliar3 = pc_auxiliar3
 33  		, last_updated_by = 0
 34  		, last_update_date = SYSDATE
 35  	   WHERE tabela_id = vn_tabela_id;
 36  
 37  	   cmx_prc_gera_log_erros(vn_evento_id, 'Tabela ' || pc_tipo || ' - ' || pc_codigo || ' atualizada.','*');
 38  
 39  	 ELSE
 40  	   vn_tabela_id := cmx_fnc_proxima_sequencia('cmx_tabelas_sq1');
 41  
 42  	   INSERT INTO cmx_tabelas
 43  	  (
 44  	    tabela_id
 45  	  , tipo
 46  	  , codigo
 47  	  , descricao
 48  	  , auxiliar1
 49  	  , auxiliar2
 50  	  , auxiliar3
 51  	  , creation_date
 52  	  , created_by
 53  	  , last_update_date
 54  	  , last_updated_by
 55  	  ) VALUES (
 56  		     vn_tabela_id
 57  		   , pc_tipo
 58  		   , pc_codigo
 59  		   , pc_descricao
 60  		   , pc_auxiliar1
 61  		   , pc_auxiliar2
 62  		   , pc_auxiliar3
 63  		   , SYSDATE
 64  		   , 0
 65  		   , SYSDATE
 66  		   , 0
 67  		   );
 68  	   cmx_prc_gera_log_erros(vn_evento_id, 'Tabela ' || pc_tipo || ' - ' || pc_codigo || ' inserida.','*');
 69  	 END IF;
 70  
 71  
 72    END;
 73  
 74  BEGIN
 75  
 76  
 77    p('203','DUE_AN_FIS_CONC','DATA DA CONCLUSÃO DA ANÁLISE FISCAL DA DUE','N','N','F');
 78    p('203','DUE_AP_DESP','DATA DA DUE APRESENTADA PARA DESPACHO','N','N','F');
 79    p('203','DUE_AVERBADA','DATA DE AVERBAÇÃO DA DUE','N','N','F');
 80    p('203','DUE_CANC_ADUANA','DATA DO CANCELAMENTO DA DUE PELA ADUANA','N','N','F');
 81    p('203','DUE_CANC_A_PED_EXP','DATA DO CANCELAMENTO DA DUE PELA ADUANA A PEDIDO DO EXPORTADOR','N','N','F');
 82    p('203','DUE_CANCELADA','DATA DE CANCELAMENTO DA DUE','N','N','F');
 83    p('203','DUE_CANC_PRAZO_EXP','DATA DO CANCELAMENTO DA DUE POR EXPIRAÇÃO DE PRAZO','N','N','F');
 84    p('203','DUE_DES','DATA DE DESEMBARAÇO DA DUE','N','N','F');
 85    p('203','DUE_EM_AN_FISC','DATA DE SITUAÇÃO DE ANÁLISE FISCAL DA DUE','N','N','F');
 86    p('203','DUE_EMB_ANT_AUT','DATA DE EMBARQUE ANTECIPADO AUTORIZADO DA DUE','N','N','F');
 87    p('203','DUE_EMB_ANT_PEND','DATA DE EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO DA DUE','N','N','F');
 88    p('203','DUE_INTERROMPIDA','DATA DA INTERRUPÇÃO DA DUE','N','N','F');
 89    p('203','DUE_LIB_CANAL_VERDE','DATA DE LIBERAÇÃO DA DUE SEM CONFERÊNCIA ADUANEIRA CANAL VERDE','N','N','F');
 90    p('203','DUE_REG','DATA DE REGISTRO DA DUE','N','N','F');
 91    p('203','DUE_SEL_CONF','DATA DA SITUAÇÃO DA DUE DE SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO','N','N','F');
 92  
 93    p('288','10','REGISTRADA','REGISTRADA%','DUE_REG','');
 94    p('288','11','DECLARAÇÃO APRESENTADA PARA DESPACHO','DECLARAÇÃO APRESENTADA PARA DESPACHO%','DUE_AP_DESP','');
 95    p('288','20','LIBERADA SEM CONFERÊNCIA ADUANEIRA CANAL VERDE','LIBERADA SEM CONFERÊNCIA ADUANEIRA CANAL VERDE%','DUE_LIB_CANAL_VERDE','');
 96    p('288','21','SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO','SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO%','DUE_SEL_CONF','');
 97    p('288','25','EMBARQUE ANTECIPADO AUTORIZADO','EMBARQUE ANTECIPADO AUTORIZADO%','DUE_EMB_ANT_AUT','');
 98    p('288','26','EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO','EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO%','DUE_EMB_ANT_PEND','');
 99    p('288','30','EM ANÁLISE FISCAL','EM ANÁLISE FISCAL%','DUE_EM_AN_FISC','');
100    p('288','35','CONCLUÍDA ANÁLISE FISCAL','CONCLUÍDA ANÁLISE FISCAL%','DUE_AN_FIS_CONC','');
101    p('288','40','DESEMBARAÇADA','DESEMBARAÇADA%','DUE_DES','');
102    p('288','70','AVERBADA','AVERBADA%','DUE_AVERBADA','');
103    p('288','80','CANCELADA PELO EXPORTADOR','CANCELADA PELO EXPORTADOR%','DUE_CANCELADA','');
104    p('288','81','CANCELADA POR EXPIRAÇÃO DE PRAZO','CANCELADA POR EXPIRAÇÃO DE PRAZO%','DUE_CANC_PRAZO_EXP','');
105    p('288','82','CANCELADA PELA ADUANA','CANCELADA PELA ADUANA%','DUE_CANC_ADUANA','');
106    p('288','83','CANCELADA PELA ADUANA A PEDIDO DO EXPORTADOR','CANCELADA PELA ADUANA A PEDIDO DO EXPORTADOR%','DUE_CANC_A_PED_EXP','');
107    p('288','86','INTERROMPIDA','INTERROMPIDA%','DUE_INTERROMPIDA','');
108  
109    Dbms_Output.put_line('Verifique evento ' || vn_evento_id);
110    COMMIT;
111  
112  END;
113  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_REG')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_REG')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE REGISTRO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE REGISTRO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DA INTERRUPÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA INTERRUPÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DO CANCELAMENTO DA DUE  PELA ADUANA A PEDIDO DO EXPORTADOR', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE	PELA ADUANA A PEDIDO DO EXPORTADOR'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DO CANCELAMENTO DA DUE  PELA ADUANA', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE	PELA ADUANA'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DO CANCELAMENTO DA DUE POR EXPIRAÇÃO DE PRAZO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE POR EXPIRAÇÃO DE PRAZO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE CANCELAMENTO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE CANCELAMENTO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE AVERBAÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE AVERBAÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_DES')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_DES')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE DESEMBARAÇO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE DESEMBARAÇO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DA CONCLUSÃO DA ANÁLISE FISCAL DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA CONCLUSÃO DA ANÁLISE FISCAL DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE SITUAÇÃO DE ANÁLISE FISCAL DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE SITUAÇÃO DE ANÁLISE FISCAL DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE EMBARQUE ANTECIPADO AUTORIZADO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE EMBARQUE ANTECIPADO AUTORIZADO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DA SITUAÇÃO DA DUE DE SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA SITUAÇÃO DA DUE DE SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DE LIBERAÇÃO DA DUE SEM CONFERÊNCIA ADUANEIRA CANAL VERDE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE LIBERAÇÃO DA DUE SEM CONFERÊNCIA ADUANEIRA CANAL VERDE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','PT-BR');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','PT-BR')
 24  				      , 'DATA DA DUE APRESENTADA PARA DESPACHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA DUE APRESENTADA PARA DESPACHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE AVERBAÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE AVERBAÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE CANCELAMENTO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE CANCELAMENTO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DO CANCELAMENTO DA DUE  PELA ADUANA A PEDIDO DO EXPORTADOR', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE	PELA ADUANA A PEDIDO DO EXPORTADOR'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_DES')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_DES')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE DESEMBARAÇO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE DESEMBARAÇO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_REG')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_REG')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE REGISTRO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE REGISTRO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE LIBERAÇÃO DA DUE SEM CONFERÊNCIA ADUANEIRA CANAL VERDE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE LIBERAÇÃO DA DUE SEM CONFERÊNCIA ADUANEIRA CANAL VERDE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DA INTERRUPÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA INTERRUPÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE EMBARQUE ANTECIPADO AUTORIZADO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE EMBARQUE ANTECIPADO AUTORIZADO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DA SITUAÇÃO DA DUE DE SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA SITUAÇÃO DA DUE DE SELECIONADA PARA CONFERÊNCIA CANAL LARANJA OU VERMELHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE SITUAÇÃO DE ANÁLISE FISCAL DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE SITUAÇÃO DE ANÁLISE FISCAL DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DO CANCELAMENTO DA DUE  PELA ADUANA', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE	PELA ADUANA'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DA DUE APRESENTADA PARA DESPACHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA DUE APRESENTADA PARA DESPACHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DO CANCELAMENTO DA DUE POR EXPIRAÇÃO DE PRAZO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DO CANCELAMENTO DA DUE POR EXPIRAÇÃO DE PRAZO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DA CONCLUSÃO DA ANÁLISE FISCAL DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DA CONCLUSÃO DA ANÁLISE FISCAL DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','EN-US');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
 23  				 , cmx_pkg_tabelas.tabela_id('905','EN-US')
 24  				      , 'DATA DE EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO DA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='DATA DE EMBARQUE ANTECIPADO PENDENTE DE AUTORIZAÇÃO DA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_DES')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_DES')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE LIBERACIÓN ADUANAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LIBERACIÓN ADUANAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE CONCLUSIÓN DEL ANÁLISIS FISCAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CONCLUSIÓN DEL ANÁLISIS FISCAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE SITUACIÓN DE ANÁLISIS FISCAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE SITUACIÓN DE ANÁLISIS FISCAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE EMBARQUE ANTICIPADO PENDIENTE DE AUTORIZACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE EMBARQUE ANTICIPADO PENDIENTE DE AUTORIZACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE EMBARQUE ANTICIPADO AUTORIZADO DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE EMBARQUE ANTICIPADO AUTORIZADO DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE INTERRUPCIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE INTERRUPCIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_REG')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_REG')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE OFICIALIZACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE OFICIALIZACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE LA DUE PRESENTADA PARA DESPACHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LA DUE PRESENTADA PARA DESPACHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR EXPIRACIÓN DE PLAZO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR EXPIRACIÓN DE PLAZO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE LIBERACIÓN DE LA DUE SIN CHEQUEO ADUANERO CANAL VERDE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LIBERACIÓN DE LA DUE SIN CHEQUEO ADUANERO CANAL VERDE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE SITUACIÓN DE LA DUE DE SELECCIONADA PARA CHEQUEO CANAL NARANJO O ROJO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE SITUACIÓN DE LA DUE DE SELECCIONADA PARA CHEQUEO CANAL NARANJO O ROJO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA BAJO SOLICITUD DEL EXPORTADOR', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA BAJO SOLICITUD DEL EXPORTADOR'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ESA');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ESA')
 24  				      , 'FECHA DE ENDOSO DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE ENDOSO DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_A_PED_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA BAJO SOLICITUD DEL EXPORTADOR', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA BAJO SOLICITUD DEL EXPORTADOR'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_DES')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_DES')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE LIBERACIÓN ADUANAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LIBERACIÓN ADUANAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_PEND')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE EMBARQUE ANTICIPADO PENDIENTE DE AUTORIZACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE EMBARQUE ANTICIPADO PENDIENTE DE AUTORIZACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_LIB_CANAL_VERDE')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE LIBERACIÓN DE LA DUE SIN CHEQUEO ADUANERO CANAL VERDE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LIBERACIÓN DE LA DUE SIN CHEQUEO ADUANERO CANAL VERDE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_SEL_CONF')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE SITUACIÓN DE LA DUE DE SELECCIONADA PARA CHEQUEO CANAL NARANJO O ROJO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE SITUACIÓN DE LA DUE DE SELECCIONADA PARA CHEQUEO CANAL NARANJO O ROJO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_REG')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_REG')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE OFICIALIZACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE OFICIALIZACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EM_AN_FISC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE SITUACIÓN DE ANÁLISIS FISCAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE SITUACIÓN DE ANÁLISIS FISCAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANCELADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_INTERROMPIDA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE INTERRUPCIÓN DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE INTERRUPCIÓN DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AP_DESP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE LA DUE PRESENTADA PARA DESPACHO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE LA DUE PRESENTADA PARA DESPACHO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_ADUANA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR LA ADUANA'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AVERBADA')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE ENDOSO DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE ENDOSO DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_EMB_ANT_AUT')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE EMBARQUE ANTICIPADO AUTORIZADO DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE EMBARQUE ANTICIPADO AUTORIZADO DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_AN_FIS_CONC')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE CONCLUSIÓN DEL ANÁLISIS FISCAL DE LA DUE', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CONCLUSIÓN DEL ANÁLISIS FISCAL DE LA DUE'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> DECLARE
  2    CURSOR cur_verifica IS
  3  	 SELECT tabelas_descr_id
  4  	   FROM cmx_tabelas_descr
  5  	   WHERE tabela_id  = cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
  6  	     AND idioma_id  = cmx_pkg_tabelas.tabela_id('905','ES');
  7  
  8    vb_achou BOOLEAN := FALSE;
  9    vn_tab_id NUMBER;
 10  BEGIN
 11    OPEN cur_verifica;
 12    FETCH cur_verifica INTO vn_tab_id;
 13    vb_achou := cur_verifica%FOUND;
 14    CLOSE cur_verifica;
 15  
 16    IF (NOT vb_achou) THEN
 17  	 INSERT INTO cmx_tabelas_descr (tabelas_descr_id
 18  				 , tabela_id
 19  				 , idioma_id
 20  				      , descricao, creation_date, created_by, last_update_date, last_updated_by)
 21  				VALUES (cmx_fnc_proxima_sequencia('cmx_tabelas_descr_sq1')
 22  				 , cmx_pkg_tabelas.tabela_id('203','DUE_CANC_PRAZO_EXP')
 23  				 , cmx_pkg_tabelas.tabela_id('905','ES')
 24  				      , 'FECHA DE CANCELACIÓN DE LA DUE POR EXPIRACIÓN DE PLAZO', SYSDATE, 0, SYSDATE, 0 );
 25    ELSE
 26  	 UPDATE cmx_tabelas_descr
 27  	   SET descricao ='FECHA DE CANCELACIÓN DE LA DUE POR EXPIRACIÓN DE PLAZO'
 28  	 WHERE tabelas_descr_id = vn_tab_id;
 29  
 30    END IF;
 31    COMMIT;
 32  
 33  END;
 34  /
DECLARE
*
ERROR at line 1:
ORA-01400: cannot insert NULL into ("R108"."CMX_TABELAS_DESCR"."IDIOMA_ID")
ORA-06512: at line 17


SQL> 
SQL> -- Pre updates
SQL> 
SQL> -- Alter table modify column
SQL> 
SQL> -- Alter table add constraint primary key
SQL> 
SQL> -- Alter table add constraint unique key
SQL> 
SQL> -- Alter table add constraint foreign key
SQL> 
SQL> -- Alter table add check constraint
SQL> 
SQL> -- Post updates
SQL> 
SQL> -- Alter table drop column
SQL> 
SQL> -- Package specifications
SQL> 
SQL> -- Functions
SQL> 
SQL> -- Views
SQL> 
SQL> -- Procedures
SQL> 
SQL> -- Triggers
SQL> 
SQL> -- Packages bodies
SQL> SET SCAN OFF
SQL> @@exp_pkb_due.sql
SQL> PROMPT CREATE OR REPLACE PACKAGE BODY exp_pkg_due
CREATE OR REPLACE PACKAGE BODY exp_pkg_due
SQL> CREATE OR REPLACE PACKAGE BODY exp_pkg_due
  2  AS
  3  
  4    TYPE xml_table IS TABLE OF VARCHAR2(32000) INDEX BY PLS_INTEGER;
  5    vt_xml xml_table;
  6    vt_xml_b64 xml_table;
  7    gc_ret_b64 CLOB;
  8  
  9    PROCEDURE prc_atual_compl( pn_due_id	  NUMBER
 10  				, pc_complemento  VARCHAR2
 11  				, pc_valor	  VARCHAR2
 12  				, pn_usuario_id   NUMBER
 13  				, pd_dt_registro  DATE	   DEFAULT NULL
 14  				, pd_dt_averbacao DATE	   DEFAULT NULL
 15  				, pc_chave_acesso VARCHAR2 DEFAULT NULL
 16  				)
 17    AS
 18  
 19  	 CURSOR cur_tipo_sd
 20  	     IS
 21  	 SELECT tp_solicitacao_despacho_id
 22  	      , cmx_pkg_tabelas.auxiliar(tp_solicitacao_despacho_id, 4)
 23  	   FROM exp_identificadores;
 24  
 25  	 CURSOR cur_fat
 26  	     IS
 27  	 SELECT edf.fatura_id, ef.embarque_id
 28  	   FROM exp_due_faturas edf
 29  	      , exp_faturas	ef
 30  	  WHERE edf.fatura_id = ef.fatura_id
 31  	    AND edf.due_id = pn_due_id;
 32  
 33  	 CURSOR cur_tabelas(pc_tipo VARCHAR2, pc_codigo VARCHAR2) IS
 34  	   SELECT tabela_id, auxiliar3, auxiliar4
 35  	     FROM cmx_tabelas
 36  	    WHERE tipo	 = pc_tipo
 37  	      AND codigo = pc_codigo;
 38  
 39  	 CURSOR cur_due_nf_lin
 40  	     IS
 41  	 SELECT DISTINCT det.fatura_item_detalhe_id
 42  	      , det.fatura_item_id
 43  	   FROM exp_fatura_item_detalhes det
 44  	      , exp_fatura_item_det_nf	 nf
 45  	      , exp_due_ship_item	 due
 46  	  WHERE det.fatura_item_detalhe_id = nf.fatura_item_detalhe_id
 47  	    AND nf.due_ship_item_id = due.due_ship_item_id
 48  	    AND due.due_id	    = pn_due_id;
 49  
 50  	 CURSOR cur_due_snf_lin
 51  	     IS
 52  	 SELECT DISTINCT det.fatura_item_detalhe_id
 53  	      , det.fatura_item_id
 54  	   FROM exp_fatura_item_detalhes det
 55  	      , exp_fatura_itens	 item
 56  	      , exp_due_faturas 	 due
 57  	  WHERE det.fatura_item_id = item.fatura_item_id
 58  	    AND item.fatura_id	   = due.fatura_id
 59  	    AND due.due_id	   = pn_due_id;
 60  
 61  	 vn_complemento_id   NUMBER;
 62  	 vn_tp_solic_id      NUMBER;
 63  	 vc_aplicacao	     VARCHAR2(150);
 64  
 65  	 vn_dt_sd_id	     NUMBER := NULL;
 66  	 vn_dt_averbacao_id  NUMBER := NULL;
 67  	 vn_chave_id	     NUMBER := NULL;
 68  	 vn_dt_averbacao_id2 NUMBER := NULL;
 69  
 70  	 vc_apl_tp_solic     VARCHAR2(150);
 71  	 vc_apl_dt_sd	     VARCHAR2(150);
 72  	 vc_apl_dt_averb     VARCHAR2(150);
 73  	 vc_apl_chave	     VARCHAR2(150);
 74  	 vc_apl_dt_averb2    VARCHAR2(150);
 75  	 vn_qtde_reg	     NUMBER := 0;
 76  
 77  	 vc_dummy	     VARCHAR2(150);
 78  
 79  	 PROCEDURE p_prc_atualizar( pc_tipo	     VARCHAR2
 80  				  , pn_reg_id	     NUMBER
 81  				  , pn_tipo_id	     NUMBER
 82  				  , pn_tabela_id     NUMBER
 83  				  , pc_tbl_codigo    VARCHAR2
 84  				  , pc_tbl_descricao VARCHAR2
 85  				  , pb_complemento   BOOLEAN DEFAULT TRUE
 86  				  , pd_data	     DATE DEFAULT NULL
 87  				  ) IS
 88  
 89  	   vc_tabela	   VARCHAR2(150);
 90  	   vc_sql	   VARCHAR2(32000);
 91  	   vc_campo_tbl_id VARCHAR2(150);
 92  	   vc_compo_id	   VARCHAR2(150);
 93  
 94  	   vn_id	   NUMBER;
 95  	 BEGIN
 96  
 97  	   IF(pc_tipo = 'E') THEN
 98  
 99  	     IF(pb_complemento) THEN
100  	       vc_tabela       := 'exp_embarque_complementos';
101  	       vc_campo_tbl_id := 'embarque_complemento_id';
102  	       vc_compo_id     := 'embarque_id';
103  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_embarque_complementos_sq1');
104  	     ELSE
105  	       vc_tabela       := 'exp_embarque_datas';
106  	       vc_campo_tbl_id := 'embarque_data_id';
107  	       vc_compo_id     := 'embarque_id';
108  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_embarque_datas_sq1');
109  	     END IF;
110  
111  	   ELSIF(pc_tipo = 'F') THEN
112  
113  	     IF(pb_complemento) THEN
114  	       vc_tabela       := 'exp_fatura_complementos';
115  	       vc_campo_tbl_id := 'fatura_complemento_id';
116  	       vc_compo_id     := 'fatura_id';
117  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_complementos_sq1');
118  	     ELSE
119  	       vc_tabela       := 'exp_fatura_datas';
120  	       vc_campo_tbl_id := 'fatura_data_id';
121  	       vc_compo_id     := 'fatura_id';
122  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_datas_sq1');
123  	     END IF;
124  
125  	   ELSIF(pc_tipo = 'L') THEN
126  
127  	     IF(pb_complemento) THEN
128  	       vc_tabela       := 'exp_fatura_item_complementos';
129  	       vc_campo_tbl_id := 'fatura_item_complemento_id';
130  	       vc_compo_id     := 'fatura_item_id';
131  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_item_compl_sq1');
132  	     ELSE
133  	       vc_tabela       := 'exp_fatura_item_datas';
134  	       vc_campo_tbl_id := 'fatura_item_data_id';
135  	       vc_compo_id     := 'fatura_item_id';
136  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_item_datas_sq1');
137  	     END IF;
138  
139  	   ELSIF(pc_tipo = 'D') THEN
140  
141  	     IF(pb_complemento) THEN
142  	       vc_tabela       := 'exp_fatura_item_detalhe_compl';
143  	       vc_campo_tbl_id := 'fatura_item_detalhe_compl_id';
144  	       vc_compo_id     := 'fatura_item_detalhe_id';
145  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_item_det_compl_sq1');
146  	     ELSE
147  	       vc_tabela       := 'exp_fatura_item_detalhe_datas';
148  	       vc_campo_tbl_id := 'fatura_item_detalhe_data_id';
149  	       vc_compo_id     := 'fatura_item_detalhe_id';
150  	       vn_id	       := cmx_fnc_proxima_sequencia('exp_fatura_item_det_datas_sq1');
151  	     END IF;
152  
153  	   END IF;
154  
155  	   IF(pb_complemento) THEN
156  	     vc_sql	  := ' DECLARE '					      ||
157  			     ' vn_id	     NUMBER := :1; '			      ||
158  			     ' vn_reg_id     NUMBER := :2; '			      ||
159  			     ' vn_tipo_id    NUMBER := :3; '			      ||
160  			     ' vn_tabela_id  NUMBER := :4; '			      ||
161  			     ' vc_tbl_codigo VARCHAR2(150) := :5; '		      ||
162  			     ' vc_tbl_descricao VARCHAR2(4000) := :6; ' 	      ||
163  			     ' BEGIN '						      ||
164  			     '	 INSERT INTO '||vc_tabela||' '			      ||
165  			     '	 ( '||vc_campo_tbl_id||' '			      ||
166  			     '	 , '||vc_compo_id||' '				      ||
167  			     '	 , tipo_id '					      ||
168  			     '	 , tabela_id '					      ||
169  			     '	 , tabela_codigo '				      ||
170  			     '	 , tabela_descricao '				      ||
171  			     '	 , creation_date '				      ||
172  			     '	 , created_by ' 				      ||
173  			     '	 , last_update_date '				      ||
174  			     '	 , last_updated_by '				      ||
175  			     '	 ) VALUES ( vn_id '				      ||
176  			     '		 , vn_reg_id '				      ||
177  			     '		 , vn_tipo_id ' 			      ||
178  			     '		 , vn_tabela_id '			      ||
179  			     '		 , vc_tbl_codigo '			      ||
180  			     '		 , vc_tbl_descricao '			      ||
181  			     '		 , SYSDATE '				      ||
182  			     '		 , '||Nvl(pn_usuario_id,0)||' ' 	      ||
183  			     '		 , SYSDATE '				      ||
184  			     '		 , '||Nvl(pn_usuario_id,0)||' ' 	      ||
185  			     '		 ); '					      ||
186  			     ' EXCEPTION '					      ||
187  			     ' WHEN Dup_Val_On_Index THEN '			      ||
188  			     '	 UPDATE '||vc_tabela||' '			      ||
189  			     '	     SET tabela_descricao = vc_tbl_descricao '	      ||
190  			     '	       , tabela_codigo	  = vc_tbl_codigo '	      ||
191  			     '	       , tabela_id    = vn_tabela_id '		      ||
192  			     '	       , last_update_date = SYSDATE '		      ||
193  			     '	       , last_updated_by  = '||Nvl(pn_usuario_id,0)||' ' ||
194  			     '	   WHERE '||vc_compo_id||'   = vn_reg_id '	      ||
195  			     '	     AND tipo_id       = vn_tipo_id; '		      ||
196  			     ' END;';
197  
198  	      BEGIN
199  	       EXECUTE IMMEDIATE vc_sql USING vn_id
200  					    , pn_reg_id
201  					    , pn_tipo_id
202  					    , pn_tabela_id
203  					    , pc_tbl_codigo
204  					    , pc_tbl_descricao;
205  	     EXCEPTION
206  	       WHEN OTHERS THEN
207  		 NULL;
208  	     END;
209  	   ELSE
210  	     vc_sql	  := ' DECLARE '					      ||
211  			     ' vn_id	     NUMBER := :1; '			      ||
212  			     ' vn_reg_id     NUMBER := :2; '			      ||
213  			     ' vn_tipo_id    NUMBER := :3; '			      ||
214  			     ' vd_data	     DATE := :4; '			      ||
215  			     ' vc_tbl_descricao VARCHAR2(4000) := :5; ' 	      ||
216  
217  			     ' BEGIN '						      ||
218  			     '	  INSERT INTO '||vc_tabela||' ' 		      ||
219  			     '	  ( '||vc_campo_tbl_id||' '			      ||
220  			     '	  , '||vc_compo_id||' ' 			      ||
221  			     '	  , tipo_id '					      ||
222  			     '	  , data '					      ||
223  			     '	  , descricao ' 				      ||
224  			     '	  , creation_date '				      ||
225  			     '	  , created_by '				      ||
226  			     '	  , last_update_date '				      ||
227  			     '	  , last_updated_by '				      ||
228  			     '	  ) VALUES ( vn_id '				      ||
229  			     '		  , vn_reg_id ' 			      ||
230  			     '		  , vn_tipo_id '			      ||
231  			     '		  , vd_data '				      ||
232  			     '		  , vc_tbl_descricao '			      ||
233  			     '		  , SYSDATE '				      ||
234  			     '		  , '||Nvl(pn_usuario_id,0)||' '	      ||
235  			     '		  , SYSDATE '				      ||
236  			     '		  , '||Nvl(pn_usuario_id,0)||' '	      ||
237  			     '		  ); '					      ||
238  			     '	EXCEPTION '					      ||
239  			     '	  WHEN Dup_Val_On_Index THEN '			      ||
240  			     '	    UPDATE '||vc_tabela||' '			      ||
241  			     '		SET data	     = vd_data '	      ||
242  			     '		  , last_update_date = SYSDATE '	      ||
243  			     '		  , last_updated_by  = '||Nvl(pn_usuario_id,0)||' '||
244  			     '		  , descricao	     = vc_tbl_descricao '     ||
245  			     '	      WHERE '||vc_compo_id||' = vn_reg_id '	      ||
246  			     '		AND tipo_id	= vn_tipo_id; ' 	      ||
247  			     '	END;';
248  
249  	     BEGIN
250  	       EXECUTE IMMEDIATE vc_sql USING vn_id
251  					    , pn_reg_id
252  					    , pn_tipo_id
253  					    , pd_data
254  					    , pc_tbl_descricao;
255  	     EXCEPTION
256  	       WHEN OTHERS THEN
257  		 NULL;
258  	     END;
259  
260  	   END IF;
261  	 END p_prc_atualizar;
262  
263    BEGIN
264  	 vn_complemento_id := cmx_pkg_tabelas.tabela_id('201',pc_complemento);
265  	 vc_aplicacao	   := cmx_pkg_tabelas.auxiliar(vn_complemento_id, 4);
266  
267  	 --SD
268  	 OPEN  cur_tipo_sd;
269  	 FETCH cur_tipo_sd INTO vn_tp_solic_id, vc_apl_tp_solic;
270  	 CLOSE cur_tipo_sd;
271  
272  	 --SD DT
273  	 OPEN  cur_tabelas('203', 'SD');
274  	 FETCH cur_tabelas INTO vn_dt_sd_id, vc_apl_dt_sd, vc_dummy;
275  	 CLOSE cur_tabelas;
276  
277  	 --AVERBAÇÃO
278  	 OPEN  cur_tabelas('203', 'AVERBACAO');
279  	 FETCH cur_tabelas INTO vn_dt_averbacao_id, vc_apl_dt_averb, vc_dummy;
280  	 CLOSE cur_tabelas;
281  
282  	 --DATA_AVERBAÇÃO
283  	 OPEN  cur_tabelas('203', 'DATA_AVERBACAO');
284  	 FETCH cur_tabelas INTO vn_dt_averbacao_id2, vc_apl_dt_averb2, vc_dummy;
285  	 CLOSE cur_tabelas;
286  
287  	 --CHAVE ACESSO
288  	 OPEN  cur_tabelas('201', 'DUE_CHAVE_ACESSO');
289  	 FETCH cur_tabelas INTO vn_chave_id, vc_dummy, vc_apl_chave;
290  	 CLOSE cur_tabelas;
291  
292  	 IF vn_complemento_id IS NOT NULL THEN
293  
294  	   IF(	vc_aplicacao	IN ('E', 'F') OR vc_apl_tp_solic IN ('E', 'F')
295  	     OR vc_apl_dt_averb IN ('E', 'F') OR vc_apl_chave	 IN ('E', 'F')
296  	     OR vc_apl_dt_averb2 IN ('E', 'F')
297  	     ) THEN
298  
299  	     FOR x IN cur_fat LOOP
300  
301  	       IF(vc_aplicacao = 'E' AND x.embarque_id IS NOT NULL) THEN
302  		 p_prc_atualizar ('E', x.embarque_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
303  	       ELSIF(vc_aplicacao = 'F') THEN
304  		 p_prc_atualizar ('F', x.fatura_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
305  	       END IF;
306  
307  	       IF(pc_complemento = 'SD') THEN
308  		 --TIPO SOLICITAÇÃO DE DESPACHO
309  		 IF(vn_tp_solic_id IS NOT NULL) THEN
310  		   IF(vc_apl_tp_solic = 'E' AND x.embarque_id IS NOT NULL) THEN
311  		     p_prc_atualizar ('E', x.embarque_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
312  		   ELSIF(vc_apl_tp_solic = 'F') THEN
313  		     p_prc_atualizar ('F', x.fatura_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
314  		   END IF;
315  		 END IF;
316  
317  		 --CHAVE_ACESSO
318  		 IF(vn_chave_id IS NOT NULL) THEN
319  		   IF(vc_apl_chave = 'E' AND x.embarque_id IS NOT NULL) THEN
320  		     p_prc_atualizar ('E', x.embarque_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
321  		   ELSIF(vc_apl_chave = 'F') THEN
322  		     p_prc_atualizar ('F', x.fatura_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
323  		   END IF;
324  		 END IF;
325  
326  		 --ATUALIZAR DATA DE REGISTRO
327  		 IF(vn_dt_sd_id IS NOT NULL) THEN
328  		   IF(vc_apl_dt_sd = 'E' AND x.embarque_id IS NOT NULL) THEN
329  		     p_prc_atualizar ('E', x.embarque_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
330  		   ELSIF(vc_apl_dt_sd = 'F') THEN
331  		     p_prc_atualizar ('F', x.fatura_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
332  		   END IF;
333  		 END IF;
334  
335  		 --ATUALIZAR DATA DE AVERBACÃO
336  		 IF(vn_dt_averbacao_id IS NOT NULL) THEN
337  		   IF(vc_apl_dt_averb = 'E' AND x.embarque_id IS NOT NULL) THEN
338  		     p_prc_atualizar ('E', x.embarque_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
339  		   ELSIF(vc_apl_dt_averb = 'F') THEN
340  		     p_prc_atualizar ('F', x.fatura_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
341  		   END IF;
342  		 END IF;
343  	       END IF;
344  
345  	       --ATUALIZAR DATA DE AVERBACÃO2
346  		 IF(vn_dt_averbacao_id2 IS NOT NULL) THEN
347  		   IF(vc_apl_dt_averb2 = 'E' AND x.embarque_id IS NOT NULL) THEN
348  		     p_prc_atualizar ('E', x.embarque_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
349  		   ELSIF(vc_apl_dt_averb2 = 'F') THEN
350  		     p_prc_atualizar ('F', x.fatura_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE2', FALSE, pd_dt_averbacao);
351  		   END IF;
352  		 END IF;
353  
354  	     END LOOP;
355  	   END IF;
356  
357  	   IF(	vc_aplicacao	IN ('L', 'D') OR vc_apl_tp_solic IN ('L', 'D')
358  	     OR vc_apl_dt_averb IN ('L', 'D') OR vc_apl_chave	 IN ('L', 'D')
359  	     OR vc_apl_dt_averb2 IN ('L', 'D')
360  	     ) THEN
361  
362  	     --DUE COM NOTA FISCAL
363  	     FOR x IN cur_due_nf_lin LOOP
364  	       IF(vc_aplicacao = 'L' AND x.fatura_item_id IS NOT NULL) THEN
365  		 p_prc_atualizar ('L', x.fatura_item_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
366  	       ELSIF(vc_aplicacao = 'D') THEN
367  		 p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
368  	       END IF;
369  
370  	       IF(pc_complemento = 'SD') THEN
371  		 --TIPO SOLICITAÇÃO DE DESPACHO
372  		 IF(vn_tp_solic_id IS NOT NULL) THEN
373  		   IF(vc_apl_tp_solic = 'L' AND x.fatura_item_id IS NOT NULL) THEN
374  		     p_prc_atualizar ('L', x.fatura_item_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
375  		   ELSIF(vc_apl_tp_solic = 'D') THEN
376  		     p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
377  		   END IF;
378  		 END IF;
379  
380  		 --CHAVE_ACESSO
381  		 IF(vn_chave_id IS NOT NULL) THEN
382  		   IF(vc_apl_chave = 'L' AND x.fatura_item_id IS NOT NULL) THEN
383  		     p_prc_atualizar ('L', x.fatura_item_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
384  		   ELSIF(vc_apl_chave = 'D') THEN
385  		     p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
386  		   END IF;
387  		 END IF;
388  
389  		 --ATUALIZAR DATA DE REGISTRO
390  		 IF(vn_dt_sd_id IS NOT NULL) THEN
391  		   IF(vc_apl_dt_sd = 'L' AND x.fatura_item_id IS NOT NULL) THEN
392  		     p_prc_atualizar ('L', x.fatura_item_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
393  		   ELSIF(vc_apl_dt_sd = 'D') THEN
394  		     p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
395  		   END IF;
396  		 END IF;
397  
398  		 --ATUALIZAR DATA DE AVERBACÃO
399  		 IF(vn_dt_averbacao_id IS NOT NULL) THEN
400  		   IF(vc_apl_dt_averb = 'L' AND x.fatura_item_id IS NOT NULL) THEN
401  		     p_prc_atualizar ('L', x.fatura_item_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
402  		   ELSIF(vc_apl_dt_averb = 'D') THEN
403  		     p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
404  		   END IF;
405  		 END IF;
406  
407  		 --ATUALIZAR DATA DE AVERBACÃO2
408  		 IF(vn_dt_averbacao_id2 IS NOT NULL) THEN
409  		   IF(vc_apl_dt_averb2 = 'L' AND x.fatura_item_id IS NOT NULL) THEN
410  		     p_prc_atualizar ('L', x.fatura_item_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
411  		   ELSIF(vc_apl_dt_averb2 = 'D') THEN
412  		     p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
413  		   END IF;
414  		 END IF;
415  
416  	       END IF;
417  
418  	       vn_qtde_reg := vn_qtde_reg + 1;
419  	     END LOOP;
420  
421  	     IF(vn_qtde_reg = 0) THEN
422  
423  	       --DUE SEM NOTA FISCAL
424  	       FOR x IN cur_due_nf_lin LOOP
425  		 IF(vc_aplicacao = 'L' AND x.fatura_item_id IS NOT NULL) THEN
426  		   p_prc_atualizar ('L', x.fatura_item_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
427  		 ELSIF(vc_aplicacao = 'D') THEN
428  		   p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_complemento_id, NULL, NULL, pc_valor, TRUE, NULL);
429  		 END IF;
430  
431  		 IF(pc_complemento = 'SD') THEN
432  		   --TIPO SOLICITAÇÃO DE DESPACHO
433  		   IF(vn_tp_solic_id IS NOT NULL) THEN
434  		     IF(vc_apl_tp_solic = 'L' AND x.fatura_item_id IS NOT NULL) THEN
435  		       p_prc_atualizar ('L', x.fatura_item_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
436  		     ELSIF(vc_apl_tp_solic = 'D') THEN
437  		       p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_tp_solic_id, cmx_pkg_tabelas.tabela_id('231', 'DUE'), 'DUE', 'DUE', TRUE, NULL);
438  		     END IF;
439  		   END IF;
440  
441  		   --CHAVE_ACESSO
442  		   IF(vn_chave_id IS NOT NULL) THEN
443  		     IF(vc_apl_chave = 'L' AND x.fatura_item_id IS NOT NULL) THEN
444  		       p_prc_atualizar ('L', x.fatura_item_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
445  		     ELSIF(vc_apl_chave = 'D') THEN
446  		       p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_chave_id, NULL, NULL, pc_chave_acesso, TRUE, NULL);
447  		     END IF;
448  		   END IF;
449  
450  		   --ATUALIZAR DATA DE REGISTRO
451  		   IF(vn_dt_sd_id IS NOT NULL) THEN
452  		     IF(vc_apl_dt_sd = 'L' AND x.fatura_item_id IS NOT NULL) THEN
453  		       p_prc_atualizar ('L', x.fatura_item_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
454  		     ELSIF(vc_apl_dt_sd = 'D') THEN
455  		       p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_sd_id, NULL, NULL, 'DUE', FALSE, pd_dt_registro);
456  		     END IF;
457  		   END IF;
458  
459  		   --ATUALIZAR DATA DE AVERBACÃO
460  		   IF(vn_dt_averbacao_id IS NOT NULL) THEN
461  		     IF(vc_apl_dt_averb = 'L' AND x.fatura_item_id IS NOT NULL) THEN
462  		       p_prc_atualizar ('L', x.fatura_item_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
463  		     ELSIF(vc_apl_dt_averb = 'D') THEN
464  		       p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_averbacao_id, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
465  		     END IF;
466  		   END IF;
467  
468  		   --ATUALIZAR DATA DE AVERBACÃO2
469  		   IF(vn_dt_averbacao_id2 IS NOT NULL) THEN
470  		     IF(vc_apl_dt_averb2 = 'L' AND x.fatura_item_id IS NOT NULL) THEN
471  		       p_prc_atualizar ('L', x.fatura_item_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
472  		     ELSIF(vc_apl_dt_averb2 = 'D') THEN
473  		       p_prc_atualizar ('D', x.fatura_item_detalhe_id, vn_dt_averbacao_id2, NULL, NULL, 'DUE', FALSE, pd_dt_averbacao);
474  		     END IF;
475  		   END IF;
476  		 END IF;
477  
478  		 vn_qtde_reg := vn_qtde_reg + 1;
479  	       END LOOP;
480  	     END IF;
481  	   END IF;
482  
483  	 ELSE
484  	   Raise_Application_Error(-20000, 'Complemento não cadastrado.');
485  	 END IF;
486    END prc_atual_compl;
487  
488    FUNCTION fnc_xml_due( pn_due_id			NUMBER) RETURN XMLTYPE
489    AS
490  
491    CURSOR cur_xml_nonf(vc_justificativa VARCHAR2)
492  	   IS
493    SELECT XMLElement("Declaration"
494  				      , XMLAttributes('urn:wco:datamodel:WCO:GoodsDeclaration:1 GoodsDeclaration_1p0_DUE.xsd'  AS "xsi:schemaLocation"
495  						     , 'urn:wco:datamodel:WCO:GoodsDeclaration_DS:1'			       AS "xmlns:ds"
496  						     , 'urn:wco:datamodel:WCO:GoodsDeclaration:1'			       AS "xmlns"
497  						     , 'http://www.w3.org/2001/XMLSchema-instance'			       AS "xmlns:xsi"
498  						     )
499  			, XMLElement("DeclarationNoNF"
500  				    , XMLElement("ID", NULL)
501  				    , XMLELement("DeclarationOffice"
502  						, XMLElement("ID", ed.doffice_identification)
503  						, XMLElement("Warehouse"
504  							    , XMLElement("ID", Decode(ed.whs_type, '19', ed.declarant_identification, ed.whs_identification))
505  							    , XMLElement("TypeCode", ed.whs_type)
506  							    , XMLForest( To_Char(whs_latitude , 'FM9999990D000000', 'NLS_NUMERIC_CHARACTERS=.,')  AS "LatitudeMeasure"
507  								       , To_Char(whs_longitude, 'FM9999990D000000', 'NLS_NUMERIC_CHARACTERS=.,')  AS "LongitudeMeasure"
508  								       , XMLForest(	     whs_addr_line  AS "Line"
509  
510  										   ) AS "Address"
511  								       ) AS "Warehouse"
512  							    )
513  						)
514  				    , fnc_due_adi(ed.due_id)
515  				    , XMLElement("CurrencyExchange"
516  						, XMLForest(
517  							     ed.currencytype AS "CurrencyTypeCode"
518  							   )
519  						)
520  				    , XMLElement("Declarant"
521  						, XMLElement("ID", ed.declarant_identification)
522  						, Decode( vc_justificativa
523  							, 'S'
524  							, Decode ( ed.declarant_name
525  								 , NULL
526  								 , NULL
527  								 , XMLElement("Contact"
528  									     , XMLElement("Name", ed.declarant_name)
529  									     , XMLForest(
530  											   XMLForest( ed.declarant_email AS "ID"
531  												   , Decode(ed.declarant_email, NULL, NULL, 'EM')  AS "TypeCode"
532  												   ) AS "Communication"
533  											 )
534  									     , XMLForest(
535  											   XMLForest( ed.declarant_tel	 AS "ID"
536  												   , Decode(ed.declarant_tel, NULL, NULL, 'TE')  AS "TypeCode"
537  												   ) AS "Communication"
538  											 )
539  									     )
540  								 )
541  						       , NULL
542  						       )
543  						)
544  				    , XMLElement("ExitOffice"
545  						, XMLElement("ID", ed.exitoffice_identification)
546  						, XMLElement( "Warehouse"
547  							    , XMLElement("ID", exitoffice_whs_identification)
548  							    , XMLElement("TypeCode", exitoffice_whs_type)
549  							    )
550  						)
551  				    --, fnc_due_exporter(ed.due_id)
552  				    , fnc_due_goodsshipment(ed.due_id, 'N')
553  				    --, XMLElement("Importer"
554  				    --		  , XMLElement("Name", ed.importer_name)
555  				    --		  , XMLElement("Address"
556  				    --			      , XMLElement("CountryCode", ed.importer_addr_country)
557  				    --			      , XMLElement("Line", ed.importer_addr_line)
558  				    --			      )
559  				    --		  )
560  				    , XMLForest(
561  						XMLForest(ed.ucr AS "TraderAssignedReferenceID") AS "UCR"
562  					       )
563  			)
564  			) xmlnonf
565  	 FROM exp_due ed
566  	WHERE ed.due_id = pn_due_id;
567  
568    CURSOR cur_xml(vc_justificativa VARCHAR2)
569  	   IS
570    SELECT XMLElement("Declaration"
571  				      , XMLAttributes('urn:wco:datamodel:WCO:GoodsDeclaration:1 GoodsDeclaration_1p0_DUE.xsd' AS "xsi:schemaLocation"
572  						     , 'urn:wco:datamodel:WCO:GoodsDeclaration_DS:1'			       AS "xmlns:ds"
573  						     , 'urn:wco:datamodel:WCO:GoodsDeclaration:1'			       AS "xmlns"
574  						     , 'http://www.w3.org/2001/XMLSchema-instance'			       AS "xmlns:xsi"
575  						     )
576  			, XMLElement("DeclarationNFe"
577  				    , XMLElement("ID", NULL)
578  				    , XMLELement("DeclarationOffice"
579  						, XMLElement("ID", ed.doffice_identification)
580  						, XMLElement("Warehouse"
581  							    , XMLElement("ID", Decode(ed.whs_type, '19', ed.declarant_identification, ed.whs_identification))
582  							    , XMLElement("TypeCode", ed.whs_type)
583  							    , XMLForest( To_Char(whs_latitude , 'FM9999990D000000', 'NLS_NUMERIC_CHARACTERS=.,') AS "LatitudeMeasure"
584  								       , To_Char(whs_longitude, 'FM9999990D000000', 'NLS_NUMERIC_CHARACTERS=.,') AS "LongitudeMeasure"
585  								       , XMLForest(	     whs_addr_line  AS "Line"
586  
587  										   ) AS "Address"
588  								       ) AS "Warehouse"
589  							    )
590  						)
591  				    , fnc_due_adi(ed.due_id)
592  				    , XMLElement("CurrencyExchange"
593  						, XMLForest(
594  							     ed.currencytype AS "CurrencyTypeCode"
595  							   )
596  						)
597  				    , XMLElement("Declarant"
598  						, XMLElement("ID", ed.declarant_identification)
599  						, Decode( vc_justificativa
600  							, 'S'
601  							, Decode ( ed.declarant_name
602  								 , NULL
603  								 , NULL
604  								 , XMLElement("Contact"
605  									     , XMLElement("Name", ed.declarant_name)
606  									     , XMLForest( XMLForest( ed.declarant_email AS "ID"
607  												   , Decode(ed.declarant_email, NULL, NULL, 'EM')  AS "TypeCode"
608  												   ) AS "Communication"
609  										       )
610  									     , XMLForest( XMLForest( ed.declarant_tel	AS "ID"
611  												   , Decode(REPLACE(ed.declarant_tel, ' ', ''), NULL, NULL, 'TE')  AS "TypeCode"
612  												   ) AS "Communication"
613  										       )
614  									     )
615  								 )
616  						       , NULL
617  						       )
618  						)
619  				    , XMLElement("ExitOffice"
620  						, XMLElement("ID", ed.exitoffice_identification)
621  						, XMLElement( "Warehouse"
622  							    , XMLElement("ID", exitoffice_whs_identification)
623  							    , XMLElement("TypeCode", exitoffice_whs_type)
624  							    )
625  						)
626  				    --, fnc_due_exporter(ed.due_id)
627  				    , fnc_due_goodsshipment(ed.due_id, 'S')
628  				    --, XMLElement("Importer"
629  				    --		  , XMLElement("Name", ed.importer_name)
630  				    --		  , XMLElement("Address"
631  				    --			      , XMLElement("CountryCode", ed.importer_addr_country)
632  				    --			      , XMLElement("Line", ed.importer_addr_line)
633  				    --			      )
634  				    --		  )
635  				    , XMLForest(
636  						XMLForest(ed.ucr AS "TraderAssignedReferenceID") AS "UCR"
637  					       )
638  			)
639  			) xmlnf
640  	 FROM exp_due ed
641  	WHERE ed.due_id = pn_due_id;
642  
643    CURSOR cur_nf
644  	   IS
645    SELECT ed.com_nf
646  	 FROM exp_due ed
647  	WHERE ed.due_id    = pn_due_id;
648  
649    CURSOR cur_avd
650  	   IS
651    SELECT due_gsi_add_info_id
652  	 FROM exp_due_gs_item_add_info info
653  	    , exp_due_ship_item        item
654  	WHERE info.due_ship_item_id = item.due_ship_item_id
655  	  AND info.statementtypecode = 'AVD'
656  	  AND info.statementdescription IS NOT NULL
657  	  AND item.due_id = pn_due_id;
658  
659    vx_xml		    XMLTYPE;
660    vn_fatura_nf_id	    NUMBER;
661    vb_found 	    BOOLEAN;
662    vc_com_nf	    VARCHAR2(100);
663    vn_add_info_id	    NUMBER;
664    vb_achou 	    BOOLEAN;
665    vc_justificativa     VARCHAR2(1) := 'N';
666  
667    BEGIN
668  	 OPEN  cur_nf;
669  	 FETCH cur_nf INTO vc_com_nf;
670  	 vb_found := cur_nf%FOUND;
671  	 CLOSE cur_nf;
672  
673  	 vb_achou := FALSE;
674  	 OPEN  cur_avd;
675  	 FETCH cur_avd INTO vn_add_info_id;
676  	 vb_achou := cur_avd%FOUND;
677  	 CLOSE cur_avd;
678  
679  	 IF(vb_achou) THEN
680  	   vc_justificativa := 'S';
681  	 END IF;
682  
683  	 IF vc_com_nf = 'S' THEN
684  
685  	   OPEN cur_xml(vc_justificativa);
686  	   FETCH cur_xml INTO vx_xml;
687  	   CLOSE cur_xml;
688  	 ELSE
689  	   OPEN  cur_xml_nonf(vc_justificativa);
690  	   FETCH cur_xml_nonf INTO vx_xml;
691  	   CLOSE cur_xml_nonf;
692  	 END IF;
693  
694  	 UPDATE exp_due SET xml       = vx_xml
695  			  , xml_envio = (vx_xml).getclobval()
696  		      where due_id = pn_due_id;
697  
698  	 RETURN      vx_xml;
699    END fnc_xml_due;
700  
701    FUNCTION fnc_due_adi( pn_due_id NUMBER) RETURN XMLTYPE
702    AS
703  	 CURSOR cur_due_adi
704  	     IS
705  	 SELECT XMLAGG(
706  		       XMLForest(
707  				 XMLForest(
708  					     edai.statementcode 	   AS "StatementCode"
709  					   , edai.statementdescription	   AS "StatementDescription"
710  					   , edai.limitdatetime 	   AS "LimitDateTime"
711  					   , edai.statementtypecode	   AS "StatementTypeCode"
712  					   ) AS "AdditionalInformation"
713  			       )
714  		     )
715  	   FROM exp_due_add_info edai
716  	 WHERE edai.due_id = pn_due_id;
717  
718  	 vx_due_adi	      XMLTYPE;
719  
720    BEGIN
721  	 OPEN cur_due_adi;
722  	 FETCH cur_due_adi INTO vx_due_adi;
723  	 CLOSE cur_due_adi;
724  
725  	 RETURN vx_due_adi;
726    END fnc_due_adi;
727  
728    FUNCTION fnc_due_exporter( pn_due_id		   NUMBER) RETURN XMLTYPE
729    AS
730  	 CURSOR cur_exporter
731  	     IS
732  	 SELECT XMLAGG(
733  		       XMLForest(
734  			     XMLForest(
735  					ede.name	   AS "Name"
736  				      , ede.identification AS "ID"
737  				      , XMLForest(
738  						   ede.countrycode AS "CountryCode"
739  						 , Decode(ede.countrycode, NULL, NULL, ede.countrycode || '-' ) || ede.countrysubdivisioncode AS "CountrySubDivisionCode"
740  						 , ede.addr_line AS "Line"
741  						 ) AS "Address"
742  				      ) AS "Exporter"
743  			     )
744  		      )
745  	   FROM exp_due_exporter ede
746  	  WHERE ede.due_id = pn_due_id;
747  
748  	 vx_due_exporter      XMLTYPE;
749  
750    BEGIN
751  	 OPEN cur_exporter;
752  	 FETCH cur_exporter INTO vx_due_exporter;
753  	 CLOSE cur_exporter;
754  
755  	 RETURN vx_due_exporter;
756  
757    END fnc_due_exporter;
758  
759    FUNCTION fnc_due_gs_adi( pn_due_ship_id NUMBER) RETURN XMLTYPE
760    AS
761  
762  	 CURSOR cur_due_gs_adi
763  	     IS
764  	 SELECT XMLAGG(
765  		       XMLForest(
766  				 XMLForest(
767  					     edai.statementcode 	   AS "StatementCode"
768  					   , edai.statementtypecode	   AS "StatementTypeCode"
769  					   , edai.statementdescription	   AS "StatementDescription"
770  					   , edai.limitdatetime 	   AS "LimitDateTime"
771  					   ) AS "AdditionalInformation"
772  			       )
773  		     )
774  	   FROM exp_due_gs_add_info edai
775  	 WHERE edai.due_ship_id = pn_due_ship_id;
776  
777  	 vx_due_gs_adi		 XMLTYPE;
778  
779    BEGIN
780  	 OPEN cur_due_gs_adi;
781  	 FETCH cur_due_gs_adi INTO vx_due_gs_adi;
782  	 CLOSE cur_due_gs_adi;
783  
784  	 RETURN vx_due_gs_adi;
785    END fnc_due_gs_adi;
786  
787    FUNCTION fnc_due_gs_ref( pn_due_ship_id		   NUMBER) RETURN XMLTYPE
788    AS
789  
790    CURSOR cur_ref
791  	   IS
792    SELECT XMLAGG( XMLElement( "ReferencedInvoice"
793  				, XMLForest( edri.identification AS  "ID"
794  					   , edri.typecode	 AS  "TypeCode"
795  					   --, XMLForest(edri.issuedatetime AS "DateTime") AS  "IssueDateTime"
796  					   --, edri.sequencenumeric AS "SequenceNumeric"
797  					   , XMLForest( edri.ivc_sbmttr_identif AS "ID"
798  						      --, XMLForest( edri.ivc_sbmttr_addr_ctrysuddiv AS "CountrySubDivisionCode"
799  						      --	   )AS "Address"
800  						      ) AS "Submitter"
801  					   )
802  				)
803  		    )
804    FROM  exp_due_si_ref_ivc  edri
805    WHERE edri.due_ship_id = pn_due_ship_id
806    ORDER BY To_Number(edri.sequencenumeric);
807  
808    vx_ref XMLTYPE;
809  
810    BEGIN
811  	 OPEN cur_ref;
812  	 FETCH cur_ref INTO vx_ref;
813  	 CLOSE cur_ref;
814  
815  	 RETURN vx_ref;
816    END fnc_due_gs_ref;
817  
818    FUNCTION fnc_due_goodsshipment( pn_due_id	   NUMBER, pc_nf VARCHAR2) RETURN XMLTYPE
819    AS
820  
821    CURSOR cur_gs_s
822  	   IS
823    SELECT XMLAGG(
824  		     XMLElement( "GoodsShipment"
825  			       , fnc_due_gs_item(eds.due_ship_id,'S')
826  			       , XMLElement( "Invoice"
827  					   , XMLForest( eds.ivc_identification AS "ID"
828  						      , eds.ivc_type	       AS "TypeCode"
829  -- 						, eds.ivc_issue 	 AS "IssueDateTime"
830  						      , XMLForest(
831  								   eds.ivc_sbmttr_identif AS "ID"
832  -- 							   , XMLForest( eds.ivc_sbmttr_addr_ctrysuddiv AS "CountrySubDivisionCode"
833  -- 								      )AS "Address"
834  								 ) AS "Submitter"
835  						      )
836  						      --, fnc_due_gs_adi(eds.due_ship_id)
837  						      , fnc_due_gs_ref(eds.due_ship_id)
838  					   )
839  			       , XMLElement("TradeTerms"
840  					   , XMLElement("ConditionCode", eds.ivc_tradeterms_condition)
841  					   )
842  			       )
843  		    ORDER BY To_Number(eds.due_ship_id) )
844  	 FROM exp_due_ship eds
845  	WHERE eds.due_id	    = pn_due_id
846  	ORDER BY eds.due_ship_id;
847  
848    CURSOR cur_gs_n
849  	   IS
850    SELECT XMLAGG(
851  		     XMLElement( "GoodsShipment"
852  			       , fnc_due_exporter(pn_due_id)
853  			       , fnc_due_gs_item(eds.due_ship_id,'N')
854  			       , XMLElement("Importer"
855  					   , XMLElement("Name", edf.importer_name)
856  					   , XMLElement("Address"
857  						       , XMLElement("CountryCode", edf.importer_addr_country)
858  						       , XMLElement("Line", edf.importer_addr_line)
859  						       )
860  					   )
861  			       , XMLElement( "Invoice"
862  					   , XMLElement( "TypeCode", eds.ivc_type	   )
863  					   --		--, eds.ivc_identification AS "ID"
864  					   --		--, eds.ivc_issue	   AS "IssueDateTime"
865  					   --		--, XMLForest(
866  					   --		--	       eds.ivc_sbmttr_identif AS "ID"
867  					   --		--	     , XMLForest( eds.ivc_sbmttr_addr_ctrysuddiv AS "CountrySubDivisionCode"
868  					   --		--			)AS "Address"
869  					   --		--	     ) AS "Submitter"
870  					   --		--
871  					   --		)
872  						      , fnc_due_gs_adi(eds.due_ship_id)
873  						      --, fnc_due_gs_ref(eds.due_ship_id)
874  
875  					  )
876  			       , XMLElement("TradeTerms"
877  					   , XMLElement("ConditionCode", eds.ivc_tradeterms_condition)
878  					   )
879  			       )
880  		    ORDER BY To_Number(eds.due_ship_id) )
881  	 FROM exp_due_ship eds
882  	    , exp_due	   ed
883  	    , exp_due_faturas edf
884  	WHERE eds.due_id	    = ed.due_id
885  	  AND eds.fatura_id	    = edf.fatura_id
886  	  AND edf.due_id	    = ed.due_id
887  	  AND ed.due_id 	    = pn_due_id
888  	ORDER BY eds.due_ship_id;
889  
890    vx_gs XMLTYPE;
891  
892    BEGIN
893  	 IF pc_nf = 'S' THEN
894  	   OPEN cur_gs_s;
895  	   FETCH cur_gs_s INTO vx_gs;
896  	   CLOSE cur_gs_s;
897  	 ELSE
898  	   OPEN cur_gs_n;
899  	   FETCH cur_gs_n INTO vx_gs;
900  	   CLOSE cur_gs_n;
901  	 END IF;
902  	 RETURN vx_gs;
903    END fnc_due_goodsshipment;
904  
905    FUNCTION fnc_due_gs_item( pn_due_ship_id NUMBER, pc_nf VARCHAR2) RETURN XMLTYPE
906    AS
907  
908    CURSOR cur_gsi_s
909  	   IS
910    SELECT XMLAGG(
911  		      XMLElement( "GovernmentAgencyGoodsItem"
912  				, XMLForest( To_Char(edsi.customsvalue, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,') AS "CustomsValueAmount"
913  					   , Decode(Nvl(edsi.financedvalue,0), 0, NULL, To_Char(edsi.financedvalue, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')) AS "FinancedValueAmount"
914  					   , edsi.sequence AS "SequenceNumeric"
915  					   )
916  				, fnc_due_gs_item_dest(edsi.due_ship_item_id)
917  				, fnc_due_gs_item_adoc( edsi.due_ship_item_id )
918  				, fnc_due_gs_item_adi(edsi.due_ship_item_id)
919  				, XMLElement("Commodity"
920  					    , XMLForest(
921  					      fnc_normalizar_texto_xml(edsi.cmmdty_description)    AS "Description"
922  					    , To_Char(edsi.cmmdty_value, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,') AS "ValueAmount"
923  					    --, edsi.cmmdty_commercial_descr  AS "CommercialDescription"
924  					    ,
925  							 XMLForest(
926  								   null       AS "ID"
927  								  , Decode(null, NULL, NULL,'HS') AS "IdentificationTypeCode"
928  								  )		 AS "Classification"
929  						       )
930  					    , XMLElement( "InvoiceLine"
931  							, XMLForest(edsi.cmmdty_line_sequence AS "SequenceNumeric")
932  							, fnc_due_gs_item_ref( edsi.due_ship_item_id )
933  							)
934  					    --, fnc_due_gs_item_prod( edsi.due_ship_item_id )
935  					    , fnc_due_gs_item_char( edsi.due_ship_item_id )
936  					    , fnc_due_gs_item_crit( edsi.due_ship_item_id )
937  					   )
938  				, XMLElement( "GoodsMeasure"
939  					    , XMLElement( "NetNetWeightMeasure", To_Char(edsi.cmmdty_gs_netweight,'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
940  					    --, XMLElement( "TariffQuantity"	 , edsi.cmmdty_gs_tariff)
941  					    )
942  				, fnc_due_gs_item_enq( edsi.due_ship_item_id )
943  				, fnc_due_gs_item_pdoc( edsi.due_ship_item_id )
944  				, fnc_due_gs_item_adj( edsi.due_ship_item_id )
945  				)
946  		    ORDER BY To_Number(edsi.sequence) )
947    FROM exp_due_ship_item edsi
948    WHERE edsi.due_ship_id  = pn_due_ship_id
949    ORDER BY To_Number(edsi.sequence);
950  
951    CURSOR cur_gsi_n
952  	   IS
953    SELECT XMLAGG(
954  		      XMLElement( "GovernmentAgencyGoodsItem"
955  				, XMLForest( To_Char(edsi.customsvalue, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,') AS "CustomsValueAmount"
956  					   , Decode(Nvl(edsi.financedvalue,0), 0, NULL, To_Char(edsi.financedvalue, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')) AS "FinancedValueAmount"
957  					   , edsi.sequence AS "SequenceNumeric"
958  					   )
959  				, fnc_due_gs_item_dest(edsi.due_ship_item_id)
960  				, fnc_due_gs_item_adoc( edsi.due_ship_item_id )
961  				, fnc_due_gs_item_adi(edsi.due_ship_item_id)
962  				, XMLElement("Commodity"
963  					    , XMLForest(
964  					      fnc_normalizar_texto_xml(edsi.cmmdty_description)       AS "Description"
965  					    , To_Char(edsi.cmmdty_value, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,') AS "ValueAmount"
966  					    , edsi.cmmdty_commercial_descr  AS "CommercialDescription"
967  					    ,		 XMLForest(
968  								   edsi.ncm	  AS "ID"
969  								  , Decode(edsi.ncm, NULL, NULL,'HS') AS "IdentificationTypeCode"
970  								  )		 AS "Classification"
971  						       )
972  					    --, XMLElement( "InvoiceLine"
973  					    --		  , XMLForest(edsi.cmmdty_line_sequence AS "SequenceNumeric")
974  					    --		  , fnc_due_gs_item_ref( edsi.due_ship_item_id )
975  					    --		  )
976  					    , XMLElement( "GoodsMeasure"
977  							, XMLElement("TypeCode", edsi.cmmdty_gs_cod_est)
978  							, XMLElement("TariffQuantity", To_Char(edsi.cmmdty_gs_tariff_est, 'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
979  							)
980  					    , XMLElement( "GoodsMeasure"
981  							, XMLElement("UnitDescription", edsi.cmmdty_gs_umed_com)
982  							, XMLElement("TypeCode", edsi.cmmdty_gs_cod_com)
983  							, XMLElement("TariffQuantity", To_Char(edsi.cmmdty_gs_tariff, 'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
984  							)
985  					    , fnc_due_gs_item_prod( edsi.due_ship_item_id )
986  					    , fnc_due_gs_item_char( edsi.due_ship_item_id )
987  					    , fnc_due_gs_item_crit( edsi.due_ship_item_id )
988  					   )
989  				, XMLElement( "GoodsMeasure"
990  					    , XMLElement( "NetNetWeightMeasure", To_Char(edsi.cmmdty_gs_netweight,'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
991  					    --, XMLElement( "TariffQuantity"	 , edsi.cmmdty_gs_tariff)
992  					    )
993  				, fnc_due_gs_item_enq( edsi.due_ship_item_id )
994  				, fnc_due_gs_item_pdoc( edsi.due_ship_item_id )
995  				, fnc_due_gs_item_adj( edsi.due_ship_item_id )
996  				)
997  		    ORDER BY To_Number(edsi.sequence) )
998    FROM exp_due_ship_item edsi
999    WHERE edsi.due_ship_id  = pn_due_ship_id
1000  	ORDER BY To_Number(edsi.sequence);
1001  
1002  	vx_due_gsi XMLTYPE;
1003  
1004  	BEGIN
1005  	  IF pc_nf = 'S' THEN
1006  	    OPEN cur_gsi_s;
1007  	    FETCH cur_gsi_s INTO vx_due_gsi;
1008  	    CLOSE cur_gsi_S;
1009  	  ELSE
1010  	    OPEN cur_gsi_n;
1011  	    FETCH cur_gsi_n INTO vx_due_gsi;
1012  	    CLOSE cur_gsi_n;
1013  	  END IF;
1014  
1015  	  RETURN vx_due_gsi;
1016  	END fnc_due_gs_item;
1017  
1018  	FUNCTION fnc_due_gs_item_adi( pn_due_ship_item_id   NUMBER) RETURN XMLTYPE
1019  	AS
1020  
1021  	  CURSOR cur_due_gsi_adi
1022  	      IS
1023  	  SELECT XMLAGG(
1024  			XMLForest(
1025  				  XMLForest(
1026  					      edai.statementcode	    AS "StatementCode"
1027  					    , edai.statementdescription     AS "StatementDescription"
1028  					    , edai.limitdatetime	    AS "LimitDateTime"
1029  					    , edai.statementtypecode	    AS "StatementTypeCode"
1030  					    ) AS "AdditionalInformation"
1031  				)
1032  		      ORDER BY Decode(edai.statementtypecode, 'AVD', 0, 1)
1033  		      )
1034  	    FROM exp_due_gs_item_add_info edai
1035  	  WHERE edai.due_ship_item_id = pn_due_ship_item_id;
1036  
1037  	  vx_due_gsi_adi	   XMLTYPE;
1038  
1039  	BEGIN
1040  	  OPEN cur_due_gsi_adi;
1041  	  FETCH cur_due_gsi_adi INTO vx_due_gsi_adi;
1042  	  CLOSE cur_due_gsi_adi;
1043  
1044  	  RETURN vx_due_gsi_adi;
1045  	END fnc_due_gs_item_adi;
1046  
1047  	FUNCTION fnc_due_gi_adoc_ainfo( pn_due_si_adoc_id  NUMBER) RETURN XMLTYPE
1048  	AS
1049  
1050  	  CURSOR cur_due_gsi_adi
1051  	      IS
1052  	  SELECT XMLAGG(
1053  			XMLForest(
1054  				  edai.statementtypecode	AS "StatementTypeCode"
1055  				, edai.statementdescription	AS "StatementDescription"
1056  				--, edai.limitdatetime		  AS "LimitDateTime"
1057  				, edai.statementcode		AS "StatementCode"
1058  				)
1059  		      ORDER BY Decode(edai.statementtypecode, 'AVD', 0, 1)
1060  		      )
1061  	    FROM exp_due_si_adoc_add_info edai
1062  	  WHERE edai.due_si_adoc_id = pn_due_si_adoc_id;
1063  
1064  	  vx_due_gsi_adi	   XMLTYPE;
1065  
1066  	BEGIN
1067  	  OPEN cur_due_gsi_adi;
1068  	  FETCH cur_due_gsi_adi INTO vx_due_gsi_adi;
1069  	  CLOSE cur_due_gsi_adi;
1070  
1071  	  RETURN vx_due_gsi_adi;
1072  	END fnc_due_gi_adoc_ainfo;
1073  
1074  	FUNCTION fnc_due_gi_adoc_inv(pn_due_si_adoc_id	NUMBER) RETURN XMLTYPE
1075  	AS
1076  
1077  	  CURSOR cur_due_gsi_adi
1078  	      IS
1079  	  SELECT XMLAGG(
1080  			XMLForest( edai.identification				AS "ID"
1081  				 , To_Char(edai.issuedatetime, 'YYYY-MM-DD')	AS "IssueDateTime"
1082  				 , edai.typecode				AS "TypeCode"
1083  				 , To_Char(edai.customsvalueamount, 'FM999999999999990D00', 'NLS_NUMERIC_CHARACTERS=.,')       AS "CustomsValueAmount"
1084  				 , To_Char(edai.quantityquantity, 'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')      AS "QuantityQuantity"
1085  				 )
1086  		      )
1087  	    FROM exp_due_si_adoc_inv edai
1088  	  WHERE edai.due_si_adoc_id = pn_due_si_adoc_id;
1089  
1090  	  vx_due_gsi_adi	   XMLTYPE;
1091  
1092  	BEGIN
1093  	  OPEN cur_due_gsi_adi;
1094  	  FETCH cur_due_gsi_adi INTO vx_due_gsi_adi;
1095  	  CLOSE cur_due_gsi_adi;
1096  
1097  	  RETURN vx_due_gsi_adi;
1098  	END fnc_due_gi_adoc_inv;
1099  
1100  	--
1101  	FUNCTION fnc_due_gi_adoc_pdoc(pn_due_si_adoc_id  NUMBER) RETURN XMLTYPE
1102  	AS
1103  
1104  	  CURSOR cur_due_gsi_adi
1105  	      IS
1106  	  SELECT XMLAGG(
1107  			XMLForest(
1108  				   To_Char(edap.amountamount, 'FM999999999999990D00', 'NLS_NUMERIC_CHARACTERS=.,') AS "AmountAmount"
1109  				 , edap.categorycode AS "CategoryCode"
1110  				 , edap.identification AS "ID"
1111  				 , To_Char(edap.quantityquantity, 'FM999999999999990D00', 'NLS_NUMERIC_CHARACTERS=.,') AS "QuantityQuantity"
1112  				 , edap.itemid AS "ItemID"
1113  				 )
1114  		      )
1115  	    FROM exp_due_si_adoc_pdoc edap
1116  	  WHERE edap.due_si_adoc_id = pn_due_si_adoc_id;
1117  
1118  	  vx_due_gsi_adi	   XMLTYPE;
1119  
1120  	BEGIN
1121  	  OPEN cur_due_gsi_adi;
1122  	  FETCH cur_due_gsi_adi INTO vx_due_gsi_adi;
1123  	  CLOSE cur_due_gsi_adi;
1124  
1125  	  RETURN vx_due_gsi_adi;
1126  	END fnc_due_gi_adoc_pdoc;
1127  	--
1128  
1129  	FUNCTION fnc_due_gs_item_dest( pn_due_ship_item_id   NUMBER) RETURN XMLTYPE
1130  	AS
1131  	  CURSOR cur_dest
1132  	      IS
1133  	  SELECT xmlagg( XMLElement( "Destination"
1134  				   , XMLElement("CountryCode", edsid.countrycode)
1135  				   , XMLElement("GoodsMeasure"
1136  					       , XMLElement("TariffQuantity", To_Char(edsid.gm_tariffquantity, 'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
1137  					       )
1138  				   )
1139  		       )
1140  	    FROM exp_due_si_dest edsid
1141  	   WHERE edsid.due_ship_item_id = pn_due_ship_item_id;
1142  
1143  	   vx_dest XMLTYPE;
1144  	BEGIN
1145  	  OPEN cur_dest;
1146  	  FETCH cur_dest INTO vx_dest;
1147  	  CLOSE cur_dest;
1148  
1149  	  RETURN vx_dest;
1150  	END fnc_due_gs_item_dest;
1151  
1152  	FUNCTION fnc_due_gs_item_ref( pn_due_ship_item_id   NUMBER) RETURN XMLTYPE
1153  	AS
1154  
1155  	CURSOR cur_refi
1156  	    IS
1157  	SELECT XMLAGG(
1158  		      XMLELement("ReferencedInvoiceLine"
1159  				, XMLForest( edri.sequencenumeric	      AS "SequenceNumeric"
1160  					   --, edri.invoiceidentificationid AS "InvoiceIdentificationID"
1161  					   , nf.identification		      AS "InvoiceIdentificationID"
1162  					   , XMLForest( Decode(edri.gm_tariffquantity
1163  							      , NULL
1164  							      , NULL
1165  							      , To_Char(edri.gm_tariffquantity,'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')
1166  							      ) AS "TariffQuantity") AS "GoodsMeasure"
1167  					   )
1168  				)
1169  		     )
1170  	  FROM exp_due_si_ref_ivcl edri
1171  	     , exp_due_si_ref_ivc  nf
1172  	 WHERE edri.due_si_ref_ivc_id = nf.due_si_ref_ivc_id
1173  	   AND edri.due_ship_item_id = pn_due_ship_item_id;
1174  
1175  	vx_refi XMLTYPE;
1176  
1177  	BEGIN
1178  	  OPEN cur_refi;
1179  	  FETCH cur_refi INTO vx_refi;
1180  	  CLOSE cur_refi;
1181  
1182  	  RETURN vx_refi;
1183  	END fnc_due_gs_item_ref;
1184  
1185  	FUNCTION fnc_due_gs_item_prod( pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1186  	AS
1187  
1188  	CURSOR cur_prod
1189  	    IS
1190  	SELECT XMLAGG(
1191  		      XMLElement( "Product"
1192  				, XMLForest( edp.identification     AS "ID"
1193  					   , edp.identifiertypecode AS "IdentifierTypeCode"
1194  					   )
1195  				)
1196  		     )
1197  	  FROM exp_due_si_prod edp
1198  	 WHERE edp.due_ship_item_id = pn_due_ship_item_id;
1199  
1200  	vx_prod XMLTYPE;
1201  
1202  	BEGIN
1203  	  OPEN	cur_prod;
1204  	  FETCH cur_prod INTO vx_prod;
1205  	  CLOSE cur_prod;
1206  
1207  	  RETURN vx_prod;
1208  	END fnc_due_gs_item_prod;
1209  
1210  	FUNCTION fnc_due_gs_item_char( pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1211  	AS
1212  
1213  	CURSOR cur_char
1214  	    IS
1215  	SELECT XMLAGG(
1216  		      XMLElement( "ProductCharacteristics"
1217  				,  XMLForest( edc.typecode     AS "TypeCode"
1218  					    , edc.description  AS "Description"
1219  					    )
1220  				)
1221  		     )
1222  	  FROM exp_due_si_char edc
1223  	 WHERE edc.due_ship_item_id = pn_due_ship_item_id;
1224  
1225  
1226  	vx_char XMLTYPE;
1227  
1228  	BEGIN
1229  
1230  	  OPEN cur_char;
1231  	  FETCH cur_char INTO vx_char;
1232  	  CLOSE cur_char;
1233  
1234  	  RETURN vx_char;
1235  	END fnc_due_gs_item_char;
1236  
1237  	FUNCTION fnc_due_gs_item_crit( pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1238  	AS
1239  
1240  	CURSOR cur_crit
1241  	    IS
1242  	SELECT XMLAGG(
1243  		      XMLElement( "ProductCriteriaConformance"
1244  				,  Decode( nullif(edc.quantityquantity,0)
1245  					 , NULL
1246  					 , NULL
1247  					 , XMLElement("QuantityQuantity"  , To_Char(edc.quantityquantity, 'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,'))
1248  					 )
1249  				,  XMLElement("TypeCode"   , edc.typecode    )
1250  				,  XMLElement("Description", edc.description )
1251  				)
1252  		     )
1253  	  FROM exp_due_si_crit edc
1254  	 WHERE edc.due_ship_item_id = pn_due_ship_item_id;
1255  
1256  
1257  	vx_crit XMLTYPE;
1258  
1259  	BEGIN
1260  
1261  	  OPEN	cur_crit;
1262  	  FETCH cur_crit INTO vx_crit;
1263  	  CLOSE cur_crit;
1264  
1265  	  RETURN vx_crit;
1266  
1267  	END fnc_due_gs_item_crit;
1268  
1269  	FUNCTION fnc_due_gs_item_enq( pn_due_ship_item_id   NUMBER) RETURN XMLTYPE
1270  	AS
1271  
1272  	CURSOR cur_enq
1273  	    IS
1274  	SELECT XMLAGG(
1275  		      XMLElement( "GovernmentProcedure"
1276  				, XMLForest( ede.enquadramento	   AS "CurrentCode")
1277  				)
1278  		     )
1279  	  FROM exp_due_si_enq ede
1280  	 WHERE ede.due_ship_item_id = pn_due_ship_item_id;
1281  
1282  	vx_enq XMLTYPE;
1283  
1284  	BEGIN
1285  	  OPEN	cur_enq;
1286  	  FETCH cur_enq INTO vx_enq;
1287  	  CLOSE cur_enq;
1288  
1289  	  RETURN vx_enq;
1290  	END fnc_due_gs_item_enq;
1291  
1292  	FUNCTION fnc_due_gs_item_adoc( pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1293  	AS
1294  
1295  	CURSOR cur_adoc
1296  	    IS
1297  	SELECT XMLAGG(
1298  		       XMLForest(
1299  				    XMLForest(
1300  					       eda.category				      AS "CategoryCode"
1301  					     , eda.identification			      AS "ID"
1302  					     , eda.drawbackhsclassification		      AS "DrawbackHsClassification"
1303  					     , eda.drawbackrecipientid			      AS "DrawbackRecipientId"
1304  					     , Decode( eda.vlrwithoutexcoveramount
1305  						     , 0
1306  						     , NULL
1307  						     , To_Char(eda.vlrwithoutexcoveramount, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')
1308  						     )					      AS "ValueWithoutExchangeCoverAmount"
1309  					     , Decode( eda.vlrwithexcoveramount
1310  						     , 0
1311  						     , NULL
1312  						     , To_Char(eda.vlrwithexcoveramount, 'FM99999999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,')
1313  						     )					      AS "ValueWithExchangeCoverAmount"
1314  					     , eda.itemid				      AS "ItemID"
1315  					     , To_Char(eda.quantity,'FM999999999999990D00000', 'NLS_NUMERIC_CHARACTERS=.,') AS "QuantityQuantity"
1316  					     , fnc_due_gi_adoc_ainfo(due_si_adoc_id)  AS "AdditionalInformation"
1317  					     , fnc_due_gi_adoc_pdoc(due_si_adoc_id)   AS "PreviousDocument"
1318  					     , fnc_due_gi_adoc_inv(due_si_adoc_id)    AS "Invoice"
1319  					     ) AS "AdditionalDocument"
1320  				   )
1321  
1322  		     )
1323  	  FROM exp_due_si_adoc eda
1324  	 WHERE eda.due_ship_item_id = pn_due_ship_item_id;
1325  
1326  	vx_adoc XMLTYPE;
1327  
1328  	BEGIN
1329  	  OPEN	cur_adoc;
1330  	  FETCH cur_adoc INTO vx_adoc;
1331  	  CLOSE cur_adoc;
1332  
1333  	  RETURN vx_adoc;
1334  	END fnc_due_gs_item_adoc;
1335  
1336  	FUNCTION fnc_due_gs_item_pdoc( pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1337  	AS
1338  
1339  	CURSOR cur_pdoc
1340  	    IS
1341  	SELECT XMLAGG(
1342  		      XMLElement( "PreviousDocument"
1343  				,  XMLForest( edp.identification     AS "ID"
1344  					    , edp.typecode AS "TypeCode"
1345  					    )
1346  				)
1347  		     )
1348  	  FROM exp_due_si_pdoc edp
1349  	 WHERE edp.due_ship_item_id = pn_due_ship_item_id;
1350  
1351  	vx_pdoc XMLTYPE;
1352  
1353  	BEGIN
1354  	  OPEN	cur_pdoc;
1355  	  FETCH cur_pdoc INTO vx_pdoc;
1356  	  CLOSE cur_pdoc;
1357  
1358  	  RETURN vx_pdoc;
1359  	END fnc_due_gs_item_pdoc;
1360  
1361  	FUNCTION fnc_due_gs_item_adj(pn_due_ship_item_id  NUMBER) RETURN XMLTYPE
1362  	IS
1363  
1364  	CURSOR cur_adj
1365  	    IS
1366  	SELECT XMLAGG ( XMLElement( "ValuationAdjustment"
1367  				  , XMLForest ( eds.additioncode AS "AdditionCode"
1368  					      , To_Char(eds.percentage,'FM999999999999990D00', 'NLS_NUMERIC_CHARACTERS=.,') AS "PercentageNumeric"
1369  					      )
1370  				  )
1371  		      )
1372  	  FROM exp_due_ship_item_adj eds
1373  	 WHERE due_ship_item_id = pn_due_ship_item_id;
1374  
1375  	  vx_adj XMLTYPE;
1376  	BEGIN
1377  	  --EX0073 e EX0074
1378  	  OPEN	cur_adj;
1379  	  FETCH cur_adj INTO vx_adj;
1380  	  CLOSE cur_adj;
1381  
1382  	  RETURN vx_adj;
1383  	END fnc_due_gs_item_adj;
1384  
1385  	FUNCTION fnc_ret_val( pn_fatura_id		   NUMBER
1386  			    , pn_fatura_item_id 	   NUMBER
1387  			    , pn_fatura_item_detalhe_id    NUMBER
1388  			    , pn_embarque_id		   NUMBER
1389  			    , pn_fatura_nf_id		   NUMBER
1390  			    , pc_nivel			   VARCHAR2
1391  			    , pc_tipo			   VARCHAR2
1392  			    , pc_origem 		   VARCHAR2
1393  			    , pc_valor			   VARCHAR2
1394  			    , pc_mascara		   VARCHAR2
1395  			    , pn_due_id 		   NUMBER
1396  			    , pn_fatura_det_nf_id	   NUMBER
1397  			    , pn_tamanho		   NUMBER
1398  			    , pc_corta_tamanho		   VARCHAR2
1399  			    , pc_identificador		   VARCHAR2
1400  			    ) RETURN VARCHAR2
1401  	AS
1402  
1403  	CURSOR cur_fat
1404  	    IS
1405  	SELECT DISTINCT ef.fatura_numero || '/' || ef.fatura_ano
1406  	  FROM exp_faturas ef
1407  	WHERE ef.fatura_id = pn_fatura_id;
1408  
1409  	CURSOR cur_item
1410  	   IS
1411  	SELECT DISTINCT SubStr(efi.codigo  || ' - ' || efi.descricao,1,4000) item_descricao
1412  	  FROM exp_vw_fatura_itens efi
1413  	 WHERE efi.fatura_item_id = pn_fatura_item_id;
1414  
1415  
1416  	  vc_retorno VARCHAR2(4000);
1417  	  vc_sql     VARCHAR2(32000);
1418  	  vc_fatura  VARCHAR2(4000);
1419  	  vc_item    VARCHAR2(4000);
1420  	BEGIN
1421  
1422  	IF ( pc_tipo = 'F' ) THEN
1423  	  RETURN pc_valor;    -- VALOR FIXO
1424  	END IF;
1425  
1426  	vc_sql :=
1427  '
1428  DECLARE
1429  	vn_fatura_id		     NUMBER := :1;
1430  	vn_fatura_item_id	     NUMBER := :2;
1431  	vn_fatura_item_detalhe_id    NUMBER := :3;
1432  	vn_embarque_id		     NUMBER := :4;
1433  	vn_fatura_nf_id 	     NUMBER := :5;
1434  	vn_due_id		     NUMBER := :6;
1435  	vn_fatura_det_nf_id	     NUMBER := :7;
1436  	vc_retorno		     VARCHAR2(4000);
1437  BEGIN
1438  ';
1439  
1440  	  IF (pc_tipo = 'T') THEN
1441  
1442  	    vc_sql := vc_sql || '  SELECT ';
1443  
1444  	    IF (pc_mascara IS NOT NULL) THEN
1445  	      vc_sql := vc_sql || ' TO_CHAR( ' || pc_valor || ',''' || pc_mascara || ''')';
1446  	    ELSE
1447  	      vc_sql := vc_sql || pc_valor ;
1448  	    END IF;
1449  
1450  	    vc_sql := vc_sql ||  ' INTO vc_retorno FROM ';
1451  
1452  	    IF ( pc_nivel = 'F') THEN
1453  	      vc_sql := vc_sql || ' exp_faturas ef WHERE fatura_id = vn_fatura_id;';
1454  	    ELSIF ( pc_nivel = 'L' ) THEN
1455  	      vc_sql := vc_sql || ' exp_fatura_itens efi WHERE fatura_item_id = vn_fatura_item_id;';
1456  	    ELSIF ( pc_nivel = 'D' ) THEN
1457  	      vc_sql := vc_sql || ' exp_fatura_item_detalhes efid WHERE fatura_item_detalhe_id = vn_fatura_item_detalhe_id;';
1458  	    ELSIF ( pc_nivel = 'E' ) THEN
1459  	      vc_sql := vc_sql || ' exp_embarques ee WHERE embarque_id = vn_embarque_id;';
1460  	    ELSIF ( pc_nivel = 'N' ) THEN
1461  	      vc_sql := vc_sql || ' exp_fatura_nf efn WHERE fatura_nf_id = vn_fatura_nf_id;';
1462  	    ELSIF ( pc_nivel = 'DNF' ) THEN
1463  	      vc_sql := vc_sql || ' exp_fatura_item_det_nf efn WHERE fatura_det_nf_id = vn_fatura_det_nf_id;';
1464  	    END IF;
1465  
1466  	  ELSIF ( pc_tipo = 'P' ) THEN
1467  	    vc_sql := vc_sql || pc_valor;
1468  	  ELSIF ( pc_tipo = 'I') THEN
1469  	    IF ( pc_origem = 'DP' )  THEN
1470  	      IF (pc_mascara IS NOT NULL) THEN
1471  		vc_sql := vc_sql || ' vc_retorno := to_char(exp_pkg_informacoes.fnc_data_prevista(cmx_pkg_tabelas.tabela_id(''203'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id)' || ',''' || pc_mascara || '''); ';
1472  	      ELSE
1473  		vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_data_prevista(cmx_pkg_tabelas.tabela_id(''203'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1474  	      END IF;
1475  	    ELSIF ( pc_origem = 'DR') THEN
1476  	      IF (pc_mascara IS NOT NULL) THEN
1477  		vc_sql := vc_sql || ' vc_retorno := to_char(exp_pkg_informacoes.fnc_data_realizada(cmx_pkg_tabelas.tabela_id(''203'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id)' || ',''' || pc_mascara || '''); ';
1478  	      ELSE
1479  		vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_data_realizada(cmx_pkg_tabelas.tabela_id(''203'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1480  	      END IF;
1481  	    ELSIF ( pc_origem = 'VA') THEN
1482  	      IF (pc_mascara IS NOT NULL) THEN
1483  		vc_sql := vc_sql || ' vc_retorno := to_char(exp_pkg_informacoes.fnc_valor(cmx_pkg_tabelas.tabela_id(''202'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id)' || ',''' || pc_mascara || '''); ';
1484  	      ELSE
1485  		vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_valor(cmx_pkg_tabelas.tabela_id(''202'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1486  	      END IF;
1487  	    ELSIF ( pc_origem = 'CC' ) THEN
1488  	      vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_complemento_codigo(cmx_pkg_tabelas.tabela_id(''201'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1489  	    ELSIF ( pc_origem = 'CD' ) THEN
1490  	      vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_complemento_descricao(cmx_pkg_tabelas.tabela_id(''201'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1491  	    ELSIF ( pc_origem = 'EC' ) THEN
1492  	      vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_entidade_codigo(cmx_pkg_tabelas.tabela_id(''918'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1493  	    ELSIF ( pc_origem = 'ED' ) THEN
1494  	      vc_sql := vc_sql || ' vc_retorno := exp_pkg_informacoes.fnc_entidade_descricao(cmx_pkg_tabelas.tabela_id(''918'',''' || pc_valor || '''), vn_embarque_id, vn_fatura_id, vn_fatura_item_id, vn_fatura_item_detalhe_id);';
1495  	    END IF;
1496  
1497  	  ELSE
1498  	    RETURN pc_valor; -- se não for de nenhum tipo definido retorna o proprio valor;
1499  	  END IF;
1500  
1501  	  vc_sql := vc_sql ||
1502  '
1503  
1504  	:8 := vc_retorno;
1505  	END;
1506  ';
1507  
1508  	  EXECUTE IMMEDIATE vc_sql USING pn_fatura_id
1509  				       , pn_fatura_item_id
1510  				       , pn_fatura_item_detalhe_id
1511  				       , pn_embarque_id
1512  				       , pn_fatura_nf_id
1513  				       , pn_due_id
1514  				       , pn_fatura_det_nf_id
1515  				       , OUT vc_retorno;
1516  
1517  
1518  
1519  	  IF pn_tamanho IS NOT NULL THEN
1520  	    IF Length(vc_retorno) > pn_tamanho THEN
1521  	      IF (Nvl(pc_corta_tamanho,'N') = 'S') THEN
1522  		vc_retorno := SubStr(vc_retorno, 1, pn_tamanho);
1523  	      ELSE
1524  		OPEN cur_fat;
1525  		FETCH cur_fat INTO vc_fatura;
1526  		CLOSE cur_fat;
1527  
1528  		IF pn_fatura_item_id IS NOT NULL THEN
1529  		  OPEN cur_item;
1530  		  FETCH cur_item INTO vc_item;
1531  		  CLOSE cur_item;
1532  		END IF;
1533  
1534  		Raise_Application_Error(-20000, cmx_fnc_texto_traduzido('Identificador @@01@@ excede o tamanho configurado @@02@@. Valor atual: @@03@@. Fatura [@@04@@], item [@@05@@].', 'EXP_PKG_DUE','FNC_RET_VAL_01',null,pc_identificador, pn_tamanho, vc_retorno, vc_fatura, vc_item));
1535  	      END IF;
1536  	    END IF;
1537  	  END IF;
1538  
1539  	  RETURN vc_retorno;
1540  	EXCEPTION
1541  	  WHEN NO_DATA_FOUND THEN
1542  	    RETURN NULL;
1543  	END fnc_ret_val;
1544  
1545  	FUNCTION fnc_ind_due( pc_codigo 		VARCHAR2
1546  			    , pc_nivel			VARCHAR2
1547  			    , pn_fatura_id		NUMBER
1548  			    , pn_fatura_nf_id		NUMBER DEFAULT NULL
1549  			    , pn_fatura_item_id 	NUMBER DEFAULT NULL
1550  			    , pn_fatura_item_detalhe_id NUMBER DEFAULT NULL
1551  			    , pn_due_id 		NUMBER DEFAULT NULL
1552  			    , pn_fatura_det_nf_id	NUMBER DEFAULT NULL
1553  			    ) RETURN VARCHAR2
1554  	AS
1555  
1556  	  CURSOR cur_ind_due
1557  	      IS
1558  	  SELECT identificador_id
1559  	       , codigo
1560  	       , descricao
1561  	       , tag
1562  	       , tipo
1563  	       , cmx_pkg_tabelas.codigo(tabela_id) valor_tab
1564  	       , auxiliar
1565  	       , valor
1566  	       , mascara
1567  	       , origem
1568  	       , tamanho
1569  	       , corta_tamanho
1570  	    FROM exp_identificadores_due
1571  	   WHERE codigo = pc_codigo;
1572  
1573  	  vr_ind_due cur_ind_due%ROWTYPE;
1574  	  vb_found BOOLEAN;
1575  
1576  	BEGIN
1577  
1578  	  OPEN cur_ind_due;
1579  	  FETCH cur_ind_due INTO vr_ind_due;
1580  	  vb_found := cur_ind_due%FOUND;
1581  	  CLOSE cur_ind_due;
1582  
1583  	  --cmx_prc_teste_Execucao('pc_codigo ' || pc_codigo,19800908);
1584  
1585  	  IF (vb_found) THEN
1586  	    IF (vr_ind_due.tipo = 'I') THEN
1587  	      RETURN fnc_ret_val( pn_fatura_id
1588  				, pn_fatura_item_id
1589  				, pn_fatura_item_detalhe_id
1590  				, NULL --pn_embarque_id
1591  				, pn_fatura_nf_id
1592  				, pc_nivel
1593  				, vr_ind_due.tipo
1594  				, vr_ind_due.origem
1595  				, vr_ind_due.valor
1596  				, vr_ind_due.mascara
1597  				, pn_due_id
1598  				, pn_fatura_det_nf_id
1599  				, vr_ind_due.tamanho
1600  				, vr_ind_due.corta_tamanho
1601  				, vr_ind_due.codigo
1602  				);
1603  	    ELSE
1604  	      RETURN fnc_ret_val( pn_fatura_id
1605  				, pn_fatura_item_id
1606  				, pn_fatura_item_detalhe_id
1607  				, NULL --pn_embarque_id
1608  				, pn_fatura_nf_id
1609  				, pc_nivel
1610  				, vr_ind_due.tipo
1611  				, vr_ind_due.origem
1612  				, vr_ind_due.valor
1613  				, vr_ind_due.mascara
1614  				, pn_due_id
1615  				, pn_fatura_det_nf_id
1616  				, vr_ind_due.tamanho
1617  				, vr_ind_due.corta_tamanho
1618  				, vr_ind_due.codigo
1619  				);
1620  	    END IF;
1621  
1622  	  ELSE
1623  
1624  	    BEGIN
1625  	    INSERT INTO exp_identificadores_due
1626  	    (
1627  	      identificador_id
1628  	    , codigo
1629  	    , descricao
1630  	    , tag
1631  	    , tipo
1632  	    , tabela_id
1633  	    , valor
1634  	    , creation_date
1635  	    , created_by
1636  	    , last_update_date
1637  	    , last_updated_by
1638  	    ) VALUES (
1639  		       cmx_fnc_proxima_sequencia('exp_identificadores_due_sq1')
1640  		     , pc_codigo
1641  		     , pc_codigo || ' - Verificar XSD DUE'
1642  		     , NULL
1643  		     , 'F'
1644  		     , NULL
1645  		     , pc_codigo
1646  		     , SYSDATE
1647  		     , 0
1648  		     , SYSDATE
1649  		     , 0
1650  		     );
1651  	    EXCEPTION
1652  	      WHEN OTHERS THEN
1653  		Raise_Application_Error(-20000,'Identificador ' || pc_codigo || ' não cadastrado.');
1654  	    END;
1655  	  END IF;
1656  
1657  	  RETURN NULL;
1658  	END fnc_ind_due;
1659  
1660  	FUNCTION fnc_criar_due( pn_due_id     NUMBER
1661  			      , pn_evento_id  NUMBER
1662  			      , pn_usuario_id NUMBER
1663  			      ) RETURN NUMBER
1664  	AS
1665  
1666  	  CURSOR cur_dados
1667  	      IS
1668  	  SELECT ef.fatura_id
1669  	       , ef.embarque_id
1670  	       , exp_pkg_due.fnc_ind_due('EX0010' ,'F', ef.fatura_id ) doffice_identification
1671  	       , NVL(exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
1672  		   , exp_pkg_due.fnc_ind_due('EX0037_CNPJ' ,'F', ef.fatura_id )) whs_identification
1673  	       , Decode( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
1674  		       , NULL
1675  		       , '22'
1676  		       , '281'
1677  		       )					       whs_type
1678  	       , exp_pkg_due.fnc_ind_due('EX0063' ,'F', ef.fatura_id ) whs_latitude
1679  	       , exp_pkg_due.fnc_ind_due('EX0064' ,'F', ef.fatura_id ) whs_longitude
1680  	       , exp_pkg_due.fnc_ind_due('EX0062' ,'F', ef.fatura_id ) whs_addr_line
1681  	       , exp_pkg_due.fnc_ind_due('EX0039' ,'F', ef.fatura_id ) currencytype
1682  	       , exp_pkg_due.fnc_ind_due('EX0011' ,'F', ef.fatura_id ) exitoffice_identification
1683  	       , exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id ) exitoffice_whs_identification
1684  	       , Decode( exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )
1685  		       , NULL
1686  		       , '22'
1687  		       , '281'
1688  		       )					       exitoffice_whs_type
1689  	       --, exp_pkg_due.fnc_ind_due('EX0008' ,'F', ef.fatura_id ) importer_name
1690  	       , exp_pkg_due.fnc_ind_due('EX0009' ,'F', ef.fatura_id ) importer_addr_country
1691  	       --, exp_pkg_due.fnc_ind_due('EX0036' ,'F', ef.fatura_id ) importer_addr_line
1692  	       --, exp_pkg_due.fnc_ind_due('EX0002' ,'F', ef.fatura_id ) ucr
1693  	       , exp_pkg_due.fnc_ind_due('EX0040_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao
1694  	       , exp_pkg_due.fnc_ind_due('EX0041_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao_type
1695  	       , exp_pkg_due.fnc_ind_due('EX0040_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial
1696  	       , exp_pkg_due.fnc_ind_due('EX0041_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial_type
1697  	       , exp_pkg_due.fnc_ind_due('EX0040_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte
1698  	       , exp_pkg_due.fnc_ind_due('EX0041_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte_type
1699  	       , exp_pkg_due.fnc_ind_due('EX0042_OBS_GER' ,'F', ef.fatura_id, NULL, NULL, NULL, edf.due_id) observacoes_gerais
1700  	       , exp_pkg_due.fnc_ind_due('EX0041_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais_type
1701  	       , exp_pkg_due.fnc_ind_due('EX0005','F', ef.fatura_id ) exporter_name
1702  	       , exp_pkg_due.fnc_ind_due('EX0004','F', ef.fatura_id ) exporter_identification
1703  	       , exp_pkg_due.fnc_ind_due('EX0006','F', ef.fatura_id ) exporter_countrysubdivision
1704  	       , exp_pkg_due.fnc_ind_due('EX0006_LINE','F', ef.fatura_id ) exporter_country_addr_line
1705  	       , exp_pkg_due.fnc_ind_due('EX0007','F', ef.fatura_id ) exporter_countrycode
1706  	       , ef.empresa_id
1707  	       , ef.fatura_numero
1708  	       , ef.fatura_ano
1709  	    FROM exp_faturas	  ef
1710  	       , exp_due_faturas  edf
1711  	   WHERE ef.fatura_id = edf.fatura_id
1712  	     AND edf.due_id   = pn_due_id
1713  	ORDER BY ef.fatura_numero, ef.fatura_ano;
1714  
1715  	  CURSOR cur_app_info(pn_due_id NUMBER, pc_type_code VARCHAR2)
1716  	      IS
1717  	  SELECT due_add_info_id
1718  	    FROM exp_due_add_info
1719  	   WHERE due_id = pn_due_id
1720  	     AND statementtypecode = pc_type_code;
1721  
1722  	  CURSOR cur_exporter(pc_exporter_ident VARCHAR2)
1723  	      IS
1724  	  SELECT due_exporter_id
1725  	    FROM exp_due_exporter
1726  	   WHERE due_id = pn_due_id
1727  	     AND identification = pc_exporter_ident;
1728  
1729  	  CURSOR cur_fat_com_nf
1730  	      IS
1731  	  SELECT Count(*)
1732  	    FROM exp_due_faturas edf
1733  	       , exp_fatura_nf	 efn
1734  	   WHERE edf.fatura_id = efn.fatura_id
1735  	     AND edf.due_id = pn_due_id;
1736  
1737  	  CURSOR cur_fat_sem_nf
1738  	      IS
1739  	  SELECT Count(*)
1740  	    FROM exp_due_faturas edf
1741  	   WHERE edf.due_id    = pn_due_id
1742  	     AND NOT EXISTS ( SELECT NULL
1743  				FROM exp_fatura_nf efn
1744  			       WHERE edf.fatura_id = efn.fatura_id
1745  			    );
1746  
1747  	  CURSOR cur_det_sem_nf
1748  	      IS
1749  	  SELECT /*+rule*/ Count(*)
1750  	    FROM exp_fatura_itens	  efi
1751  	       , exp_fatura_item_detalhes det
1752  	       , exp_fatura_item_det_nf   efidn
1753  	       , exp_due_faturas	  edf
1754  	   WHERE efi.fatura_item_id	    = det.fatura_item_id
1755  	     AND det.fatura_item_detalhe_id = efidn.fatura_item_detalhe_id(+)
1756  	     AND efi.fatura_id		    = edf.fatura_id
1757  	     AND edf.due_id		    = pn_due_id
1758  	     AND Nvl(det.nf_numero, efidn.numero_nf) IS NULL;
1759  
1760  	  CURSOR cur_det_sem_nf_ato
1761  	      IS
1762  	   SELECT Count(*)
1763  	     FROM exp_fatura_itens	       efi
1764  		, exp_fatura_item_atos	       efia
1765  		, exp_fatura_item_detalhe_atos ato
1766  		, exp_fatura_item_det_nf       efidn
1767  		, exp_due_faturas	       edf
1768  	    WHERE efi.fatura_item_id	     = efia.fatura_item_id
1769  	      AND efia.fatura_item_ato_id    = ato.fatura_item_ato_id
1770  	      AND ato.fatura_item_detalhe_id = efidn.fatura_item_detalhe_id(+)
1771  	      AND ato.fatura_item_detalhe_ato_id  = efidn.fatura_item_detalhe_ato_id(+)
1772  	      AND efi.fatura_id 	     = edf.fatura_id(+)
1773  	      AND edf.due_id		     = pn_due_id
1774  	      AND efidn.numero_nf IS NULL;
1775  
1776  	  --vr_dados cur_dados%ROWTYPE;
1777  	  vb_found	  BOOLEAN;
1778  	  vn_due_id	  NUMBER;
1779  	  vb_erro	  BOOLEAN := FALSE;
1780  	  vc_ucr	  VARCHAR2(35);
1781  	  vn_itens_due	  NUMBER := 0 ;
1782  
1783  	  vb_achou	  BOOLEAN := FALSE;
1784  	  vn_add_info_id  NUMBER;
1785  	  vn_exporter_id  NUMBER;
1786  
1787  	  vn_count_com_nf NUMBER := 0;
1788  	  vn_count_sem_nf NUMBER := 0;
1789  	BEGIN
1790  	  vn_due_id := pn_due_id;
1791  	  vc_ucr    := NULL;
1792  
1793  	  /* Verifica se possui Nota fiscal vinculado aos processos de Notas fiscal do detalhe do item */
1794  	  OPEN	cur_fat_com_nf;
1795  	  FETCH cur_fat_com_nf INTO vn_count_com_nf;
1796  	  CLOSE cur_fat_com_nf;
1797  
1798  	  OPEN	cur_fat_sem_nf;
1799  	  FETCH cur_fat_sem_nf INTO vn_count_sem_nf;
1800  	  CLOSE cur_fat_sem_nf;
1801  
1802  	  IF(vn_count_com_nf > 0 AND vn_count_sem_nf > 0) THEN
1803  	    Raise_Application_Error(-20000, 'Não foi possível gerar a DUE, pois existem faturas com notas fiscais e faturas sem notas fiscais vinculadas.');
1804  	  ELSIF(vn_count_com_nf > 0 AND vn_count_sem_nf = 0) THEN
1805  
1806  	    vn_count_sem_nf := 0;
1807  	    --vn_count_com_nf := 0;
1808  
1809  	    OPEN  cur_det_sem_nf;
1810  	    FETCH cur_det_sem_nf INTO vn_count_sem_nf;
1811  	    CLOSE cur_det_sem_nf;
1812  
1813  	    IF(Nvl(vn_count_sem_nf,0) = 0) THEN
1814  	      OPEN  cur_det_sem_nf_ato;
1815  	      FETCH cur_det_sem_nf_ato INTO vn_count_sem_nf;
1816  	      CLOSE cur_det_sem_nf_ato;
1817  	    END IF;
1818  
1819  	    IF(vn_count_com_nf > 0 AND vn_count_sem_nf > 0) THEN
1820  	      Raise_Application_Error(-20000, 'Existe nota fiscal para as faturas, porém há detalhes sem nota fiscal. Não é possível gerar a DU-E).');
1821  	    END IF;
1822  	  END IF;
1823  
1824  	  DELETE FROM exp_due_ship	WHERE due_id = pn_due_id;
1825  	  DELETE FROM exp_due_exporter	WHERE due_id = vn_due_id;
1826  	  DELETE FROM exp_due_add_info	WHERE due_id = vn_due_id;
1827  
1828  	  FOR vr_dados IN cur_dados
1829  	  LOOP
1830  	    exp_prc_criar_due_hook1(pn_evento_id, vr_dados.fatura_id);
1831  
1832  --      IF vc_ucr IS NULL THEN
1833  --	IF vr_dados.ucr IS NULL THEN
1834  --	  vc_ucr := To_Char(SYSDATE, 'Y') || 'BR' || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_dados.empresa_id),14,'0'),1,8) || SubStr(To_Char(SYSDATE, 'YY'),1,1) || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_dados.empresa_id),14,'0'),9,6) ||  'D' || LPad(vn_due_id,16,'0');
1835  --	ELSE
1836  --	  vc_ucr := To_Char(SYSDATE, 'Y') || 'BR' || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_dados.empresa_id),14,'0'),1,8) || SubStr(To_Char(SYSDATE, 'YY'),1,1) || vr_dados.ucr;
1837  --	END IF;
1838  --      END IF;
1839  
1840  	      UPDATE exp_due
1841  		SET
1842  		    embarque_id 		   = vr_dados.embarque_id
1843  		  , doffice_identification	   = vr_dados.doffice_identification
1844  		  , whs_identification		   = vr_dados.whs_identification
1845  		  , whs_type			   = vr_dados.whs_type
1846  		  , whs_latitude		   = vr_dados.whs_latitude
1847  		  , whs_longitude		   = vr_dados.whs_longitude
1848  		  , whs_addr_line		   = vr_dados.whs_addr_line
1849  		  , currencytype		   = vr_dados.currencytype
1850  		  --, declarant_identification	     = vr_dados.declarant_identification
1851  		  , exitoffice_identification	   = vr_dados.exitoffice_identification
1852  		  , exitoffice_whs_identification  = vr_dados.exitoffice_whs_identification
1853  		  , exitoffice_whs_type 	   = vr_dados.exitoffice_whs_type
1854  		  --, importer_name		     = SubStr(vr_dados.importer_name, 1, 70)
1855  		  , importer_addr_country	   = vr_dados.importer_addr_country
1856  		  --, importer_addr_line	     = vr_dados.importer_addr_line
1857  		  --, ucr			     = vc_ucr
1858  		  , last_update_date		   = SYSDATE
1859  		  , last_updated_by		   = pn_usuario_id
1860  	      WHERE due_id = vn_due_id;
1861  
1862  	      -- prc_atual_compl( vn_due_id
1863  	      --		, 'DUE_RUC'
1864  	      --		, vc_ucr
1865  	      --		, pn_usuario_id
1866  	      --		);
1867  
1868  	      --DELETE exp_due_add_info
1869  	      --WHERE due_id = vn_due_id;
1870  
1871  	      IF vr_dados.forma_exportacao IS NOT NULL THEN
1872  
1873  		vb_achou := FALSE;
1874  		OPEN cur_app_info(pn_due_id, vr_dados.forma_exportacao_type);
1875  		FETCH cur_app_info INTO vn_add_info_id;
1876  		vb_achou := cur_app_info%FOUND;
1877  		CLOSE cur_app_info;
1878  
1879  		IF NOT(vb_achou) THEN
1880  		  INSERT INTO exp_due_add_info
1881  		  (
1882  		    due_id
1883  		  , due_add_info_id
1884  		  , statementcode
1885  		  , statementdescription
1886  		  , limitdatetime
1887  		  , statementtypecode
1888  		  , creation_date
1889  		  , created_by
1890  		  , last_update_date
1891  		  , last_updated_by
1892  		  ) VALUES (
1893  			    vn_due_id
1894  			  , cmx_fnc_proxima_sequencia('exp_due_add_info_sq1')
1895  			  , vr_dados.forma_exportacao
1896  			  , NULL --statementdescription
1897  			  , NULL --limitdatetime
1898  			  , vr_dados.forma_exportacao_type --statementtypecode
1899  			  , SYSDATE --creation_date
1900  			  , pn_usuario_id --created_by
1901  			  , SYSDATE -- last_update_date,
1902  			  , pn_usuario_id --last_updated_by
1903  			  );
1904  		END IF;
1905  	      ELSE
1906  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ sem forma de exportação preenchida.', 'EXP_PKG_DUE','FNC_GERAR_DUE_048',null,vr_dados.fatura_numero || '/' || vr_dados.fatura_ano),'E');
1907  	      END IF;
1908  
1909  	      IF vr_dados.situacao_especial IS NOT NULL THEN
1910  
1911  		vb_achou := FALSE;
1912  		OPEN cur_app_info(pn_due_id, vr_dados.situacao_especial_type);
1913  		FETCH cur_app_info INTO vn_add_info_id;
1914  		vb_achou := cur_app_info%FOUND;
1915  		CLOSE cur_app_info;
1916  
1917  		IF NOT(vb_achou) THEN
1918  		  INSERT INTO exp_due_add_info
1919  		  (
1920  		    due_id
1921  		  , due_add_info_id
1922  		  , statementcode
1923  		  , statementdescription
1924  		  , limitdatetime
1925  		  , statementtypecode
1926  		  , creation_date
1927  		  , created_by
1928  		  , last_update_date
1929  		  , last_updated_by
1930  		  ) VALUES (
1931  			    vn_due_id
1932  			  , cmx_fnc_proxima_sequencia('exp_due_add_info_sq1')
1933  			  , vr_dados.situacao_especial
1934  			  , NULL --statementdescription
1935  			  , NULL --limitdatetime
1936  			  , vr_dados.situacao_especial_type --statementtypecode
1937  			  , SYSDATE --creation_date
1938  			  , pn_usuario_id --created_by
1939  			  , SYSDATE -- last_update_date,
1940  			  , pn_usuario_id --last_updated_by
1941  			  );
1942  		END IF;
1943  	      END IF;
1944  
1945  	      IF vr_dados.caso_esp_transporte IS NOT NULL THEN
1946  
1947  		vb_achou := FALSE;
1948  		OPEN cur_app_info(pn_due_id, vr_dados.caso_esp_transporte_type);
1949  		FETCH cur_app_info INTO vn_add_info_id;
1950  		vb_achou := cur_app_info%FOUND;
1951  		CLOSE cur_app_info;
1952  
1953  		IF NOT(vb_achou) THEN
1954  		  INSERT INTO exp_due_add_info
1955  		  (
1956  		    due_id
1957  		  , due_add_info_id
1958  		  , statementcode
1959  		  , statementdescription
1960  		  , limitdatetime
1961  		  , statementtypecode
1962  		  , creation_date
1963  		  , created_by
1964  		  , last_update_date
1965  		  , last_updated_by
1966  		  ) VALUES (
1967  			    vn_due_id
1968  			  , cmx_fnc_proxima_sequencia('exp_due_add_info_sq1')
1969  			  , vr_dados.caso_esp_transporte
1970  			  , NULL --statementdescription
1971  			  , NULL --limitdatetime
1972  			  , vr_dados.caso_esp_transporte_type --statementtypecode
1973  			  , SYSDATE --creation_date
1974  			  , pn_usuario_id --created_by
1975  			  , SYSDATE -- last_update_date,
1976  			  , pn_usuario_id --last_updated_by
1977  			  );
1978  		END IF;
1979  	      END IF;
1980  
1981  	      IF vr_dados.observacoes_gerais IS NOT NULL THEN
1982  		vb_achou := FALSE;
1983  		OPEN cur_app_info(pn_due_id, vr_dados.observacoes_gerais_type);
1984  		FETCH cur_app_info INTO vn_add_info_id;
1985  		vb_achou := cur_app_info%FOUND;
1986  		CLOSE cur_app_info;
1987  
1988  		IF NOT(vb_achou) THEN
1989  		  INSERT INTO exp_due_add_info
1990  		  (
1991  		    due_id
1992  		  , due_add_info_id
1993  		  , statementcode
1994  		  , statementdescription
1995  		  , limitdatetime
1996  		  , statementtypecode
1997  		  , creation_date
1998  		  , created_by
1999  		  , last_update_date
2000  		  , last_updated_by
2001  		  ) VALUES (
2002  			    vn_due_id
2003  			  , cmx_fnc_proxima_sequencia('exp_due_add_info_sq1')
2004  			  , NULL
2005  			  , SubStr(vr_dados.observacoes_gerais,1, 4000) --statementdescription
2006  			  , NULL --limitdatetime
2007  			  , vr_dados.observacoes_gerais_type --statementtypecode
2008  			  , SYSDATE --creation_date
2009  			  , pn_usuario_id --created_by
2010  			  , SYSDATE -- last_update_date,
2011  			  , pn_usuario_id --last_updated_by
2012  			  );
2013  		END IF;
2014  	      END IF;
2015  
2016  	      IF ( vr_dados.exporter_identification IS NOT NULL ) THEN
2017  		vb_achou := FALSE;
2018  		OPEN  cur_exporter(vr_dados.exporter_identification);
2019  		FETCH cur_exporter INTO vn_exporter_id;
2020  		vb_achou := cur_exporter%FOUND;
2021  		CLOSE cur_exporter;
2022  
2023  		IF NOT(vb_achou) THEN
2024  		  INSERT INTO exp_due_exporter
2025  		  (
2026  		    due_id
2027  		  , due_exporter_id
2028  		  , name
2029  		  , identification
2030  		  , countrycode
2031  		  , countrysubdivisioncode
2032  		  , creation_date
2033  		  , created_by
2034  		  , last_update_date
2035  		  , last_updated_by
2036  		  , addr_line
2037  		  ) VALUES (
2038  			    vn_due_id
2039  			  , cmx_fnc_proxima_sequencia('exp_due_exporter_sq1')
2040  			  , vr_dados.exporter_name
2041  			  , vr_dados.exporter_identification
2042  			  , vr_dados.exporter_countrycode
2043  			  , vr_dados.exporter_countrysubdivision
2044  			  , SYSDATE --creation_date
2045  			  , pn_usuario_id --created_by
2046  			  , SYSDATE -- last_update_date,
2047  			  , pn_usuario_id --last_updated_by
2048  			  , vr_dados.exporter_country_addr_line
2049  			  );
2050  		END IF;
2051  	      END IF;
2052  
2053  	      IF fnc_good_ship(  vn_due_id, vr_dados.fatura_id, pn_evento_id, pn_usuario_id, vn_itens_due ) > 0 THEN
2054  		RETURN NULL;
2055  	      END IF;
2056  	  END LOOP;
2057  
2058  	  RETURN vn_due_id;
2059  	END fnc_criar_due;
2060  
2061  	FUNCTION fnc_good_ship(  pn_due_id     NUMBER
2062  			       , pn_fatura_id  NUMBER
2063  			       , pn_evento_id  NUMBER
2064  			       , pn_usuario_id NUMBER
2065  			       , pn_itens_due  IN OUT NUMBER
2066  			       ) RETURN NUMBER
2067  	AS
2068  	  CURSOR cur_nf
2069  	      IS
2070  	  SELECT enf.chave_nf
2071  	       , enf.numero  numero_nf
2072  	       , enf.serie
2073  	       , enf.data nf_issue
2074  	       , enf.fatura_nf_id
2075  	       , exp_pkg_due.fnc_ind_due('EX0043_NF_ELETR' ,'N', enf.fatura_id, enf.fatura_nf_id ) nfe_id
2076  	       , exp_pkg_due.fnc_ind_due('EX0069_NF_ELETR' ,'N', enf.fatura_id, enf.fatura_nf_id ) nfe_type
2077  	       , exp_pkg_due.fnc_ind_due('EX0043_NF_FORM' ,'N', enf.fatura_id, enf.fatura_nf_id )  nff_id
2078  	       , exp_pkg_due.fnc_ind_due('EX0069_NF_FORM' ,'N', enf.fatura_id, enf.fatura_nf_id )  nff_type
2079  	       , exp_pkg_due.fnc_ind_due('EX0046_NF_FORM' ,'F', enf.fatura_id, enf.fatura_nf_id )  nff_cnpj
2080  	     --  , exp_pkg_due.fnc_ind_due('EX0047_NF_FORM' ,'F', enf.fatura_id, enf.fatura_nf_id )  nff_uf
2081  		 , NULL nff_uf
2082  	     --  , exp_pkg_due.fnc_ind_due('EX0045' ,'N', enf.fatura_id, enf.fatura_nf_id )  nf_issue
2083  	       , exp_pkg_due.fnc_ind_due('EX0016' ,'F', enf.fatura_id ) condition
2084  	    FROM exp_fatura_nf		enf
2085  	       , exp_due_fatura_nf_tmp	edfn
2086  	   WHERE enf.fatura_nf_id =  edfn.fatura_nf_id
2087  	     AND enf.fatura_id	  = pn_fatura_id;
2088  
2089  	  CURSOR cur_sem_nf(pc_motiv VARCHAR2)
2090  	      IS
2091  	  SELECT efi.fatura_id
2092  	       , exp_pkg_due.fnc_ind_due('EX0069_SEM_NF' ,'F', efi.fatura_id  )  semnf_type
2093  	       , exp_pkg_due.fnc_ind_due('EX0067' ,'F', efi.fatura_id ) motivoDispensaNF
2094  	       , exp_pkg_due.fnc_ind_due('EX0068' ,'F', efi.fatura_id ) motivoDispensaNFType
2095  	       , exp_pkg_due.fnc_ind_due('EX0016' ,'F', efi.fatura_id ) condition
2096  	    FROM exp_fatura_itens efi
2097  	       , exp_fatura_item_detalhes efid
2098  	   WHERE efi.fatura_item_id = efid.fatura_item_id
2099  	     AND (efid.nf_numero IS NULL OR pc_motiv IS NOT NULL)
2100  	     AND efi.fatura_id = pn_fatura_id
2101  --       AND exp_pkg_due.fnc_ind_due('EX0067' ,'F', efi.fatura_id ) IS NOT NULL
2102  	  GROUP BY efi.fatura_id;
2103  
2104  	  CURSOR cur_motiv
2105  	      IS
2106  	  SELECT exp_pkg_due.fnc_ind_due('EX0067' ,'F', efi.fatura_id ) motivoDispensaNF
2107  	    FROM exp_faturas efi
2108  	   WHERE exp_pkg_due.fnc_ind_due('EX0067' ,'F', efi.fatura_id ) IS NOT NULL
2109  	     AND efi.fatura_id = pn_fatura_id;
2110  
2111  	CURSOR cur_nf_r( pn_fatura_nf_id NUMBER)
2112  	      IS
2113  	  SELECT DISTINCT --exp_pkg_due.fnc_ind_due('EX0061' ,'D', pn_fatura_id, efn.fatura_nf_id, efid.fatura_item_id, efid.fatura_item_detalhe_id) sequencenumeric
2114  	       --, exp_pkg_due.fnc_ind_due('EX0048' ,'D', pn_fatura_id, efn.fatura_nf_id, efid.fatura_item_id, efid.fatura_item_detalhe_id) Identification
2115  	       --, exp_pkg_due.fnc_ind_due('EX0058' ,'D', pn_fatura_id, efn.fatura_nf_id, efid.fatura_item_id, efid.fatura_item_detalhe_id) issuedatetime
2116  		efnr.chave_nf Identification
2117  	       , efnr.data issuedatetime
2118  	       , SubStr(efnr.chave_nf, 7, 14) ivc_sbmttr_identif
2119  	       --, exp_pkg_due.fnc_ind_due('EX0059' ,'F', pn_fatura_id, efn.fatura_nf_id, efid.fatura_item_id, efid.fatura_item_detalhe_id) ivc_sbmttr_identif
2120  	       --, exp_pkg_due.fnc_ind_due('EX0060' ,'F', pn_fatura_id, efn.fatura_nf_id, efid.fatura_item_id, efid.fatura_item_detalhe_id) ivc_sbmttr_addr_ctrysuddiv
2121  	   --	 , efidn.item sequencenumeric
2122  	       , efnr.fatura_nf_rem_id
2123  	       , efnr.tipo_nfe		      typecode
2124  	    FROM exp_fatura_nf		  efn
2125  	       , exp_fatura_nf_rem	  efnr
2126  	       , exp_fatura_item_detalhes_nfr  efidn
2127  	   WHERE efn.fatura_nf_id      = efnr.fatura_nf_id
2128  	     AND efnr.fatura_nf_rem_id = efidn.fatura_nf_rem_id
2129  	     AND efn.fatura_id	     = pn_fatura_id
2130  	     AND efn.fatura_nf_id    = pn_fatura_nf_id
2131  	  ORDER BY efnr.chave_nf, efnr.data, efnr.fatura_nf_rem_id;
2132  
2133  	  CURSOR cur_ship_nf(pc_nff_id VARCHAR2, pc_nfe_id VARCHAR2)
2134  	      IS
2135  	  SELECT eds.due_ship_id
2136  	    FROM exp_due_ship eds
2137  	   WHERE eds.due_id  = pn_due_id
2138  	     AND eds.ivc_identification = Decode(pc_nfe_id, NULL, pc_nff_id, pc_nfe_id );
2139  
2140  	  CURSOR cur_ship_nnf(pc_motiv VARCHAR2)
2141  	      IS
2142  	  SELECT eds.due_ship_id
2143  	    FROM exp_vw_due_ship eds
2144  	   WHERE due_id     = pn_due_id
2145  	     AND eds.ivc_addit_statement = pc_motiv;
2146  
2147  /*
2148  	  CURSOR cur_tem_nf(pn_fatura_id NUMBER) IS
2149  	    SELECT enf.fatura_id
2150  	      FROM exp_fatura_nf enf
2151  	     WHERE enf.fatura_id = pn_fatura_id;
2152  
2153  	  CURSOR cur_ver_sem_nf(pn_fatura_id NUMBER) IS
2154  	    SELECT NULL
2155  	      FROM exp_vw_fatura_item_det_nf_ato
2156  	     WHERE fatura_id = pn_fatura_id
2157  	       AND numero_nf IS NULL;
2158  */
2159  
2160  	  vn_due_ship_id NUMBER;
2161  	  vc_com_nf	 VARCHAR2(1) := 'N';
2162  	  vn_seq	 NUMBER;
2163  	  vc_motiv	 VARCHAR2(150);
2164  	  vb_found	 BOOLEAN;
2165  	  vb_nf 	 BOOLEAN := FALSE;
2166  	  vn_temp	 NUMBER;
2167  	  vn_qtd_nf_ato  NUMBER;
2168  	BEGIN
2169  
2170  	  OPEN cur_motiv;
2171  	  FETCH cur_motiv INTO vc_motiv;
2172  	  vb_found     := cur_motiv%FOUND;
2173  	  CLOSE cur_motiv;
2174  
2175  	  -- se encotrar motivo para enviar sem nota, então não passa no cursor de nota fiscal.
2176  	  IF NOT vb_found THEN
2177  
2178  	    --pn_itens_due := 0;
2179  	    FOR x IN cur_nf
2180  	    LOOP
2181  
2182  	      vc_com_nf := 'S';
2183  	      vb_found	:= FALSE;
2184  	      --OPEN cur_ship_nf(x.nff_id, x.nfe_id);
2185  	      --FETCH cur_ship_nf INTO vn_due_ship_id;
2186  	      --vb_found  := cur_ship_nf%FOUND;
2187  	      --CLOSE cur_ship_nf;
2188  
2189  	      IF NOT vb_found THEN
2190  
2191  		vn_due_ship_id := cmx_fnc_proxima_sequencia('exp_due_ship_sq1');
2192  
2193  		INSERT INTO exp_due_ship
2194  		(
2195  		  due_id
2196  		, due_ship_id
2197  		, ivc_identification
2198  		, ivc_issue
2199  		, ivc_type
2200  		, ivc_sbmttr_identif
2201  		, ivc_sbmttr_addr_ctrysuddiv
2202  		, ivc_addit_statement
2203  		, ivc_addit_statementtype
2204  		, ivc_tradeterms_condition
2205  		, fatura_nf_id
2206  		, numero_nf
2207  		, serie
2208  		, creation_date
2209  		, created_by
2210  		, last_update_date
2211  		, last_updated_by
2212  		, fatura_id
2213  		) VALUES (
2214  			    pn_due_id
2215  			  , vn_due_ship_id
2216  			  , Decode(x.nfe_id, NULL, x.nff_id, x.nfe_id )
2217  			  , x.nf_issue
2218  			  --, Decode(x.nfe_id, NULL, x.nff_type, x.nff_type )
2219  			  --, Decode(x.nfe_id, NULL, x.nff_cnpj, NULL )
2220  			  --, Decode(x.nfe_id, NULL, x.nff_uf, NULL )
2221  			  , x.nff_type
2222  			  , x.nff_cnpj
2223  			  , x.nff_uf
2224  			  , NULL
2225  			  , NULL
2226  			  , x.condition
2227  			  , x.fatura_nf_id
2228  			  , x.numero_nf
2229  			  , x.serie
2230  			  , SYSDATE
2231  			  , pn_usuario_id
2232  			  , SYSDATE
2233  			  , pn_usuario_id
2234  			  , pn_fatura_id
2235  			  );
2236  	      END IF;
2237  
2238  	      vn_seq := 1;
2239  	      FOR nf_r IN cur_nf_r(x.fatura_nf_id)
2240  	      LOOP
2241  	      --cmx_prc_teste_Execucao('nf_r.identification ' || nf_r.identification,19800908);
2242  		IF (nf_r.identification IS NOT NULL) THEN
2243  		  INSERT INTO exp_due_si_ref_ivc
2244  		  (
2245  		    due_si_ref_ivc_id
2246  		  , due_ship_id
2247  		  , identification
2248  		  , issuedatetime
2249  		  , sequencenumeric
2250  		  , ivc_sbmttr_identif
2251  		  , ivc_sbmttr_addr_ctrysuddiv
2252  		  , typecode
2253  		  , creation_date
2254  		  , created_by
2255  		  , last_update_date
2256  		  , last_updated_by
2257  		  , fatura_nf_id
2258  		  , fatura_nf_rem_id
2259  		  ) VALUES (
2260  			      cmx_fnc_proxima_sequencia('exp_due_si_ref_ivc_sq1')
2261  			    , vn_due_ship_id
2262  			    , nf_r.identification
2263  			    , nf_r.issuedatetime
2264  			    --, nf_r.sequencenumeric
2265  			    , vn_seq
2266  			    , nf_r.ivc_sbmttr_identif
2267  			    , NULL --nf_r.ivc_sbmttr_addr_ctrysuddiv
2268  			    , nf_r.typecode
2269  			    , SYSDATE
2270  			    , pn_usuario_id
2271  			    , SYSDATE
2272  			    , pn_usuario_id
2273  			    , x.fatura_nf_id
2274  			    , nf_r.fatura_nf_rem_id
2275  			    );
2276  		    vn_seq := vn_seq + 1;
2277  
2278  		END IF;
2279  
2280  	      END LOOP;
2281  
2282  	      prc_gs_i_nf(pn_due_id, vn_due_ship_id,  x.fatura_nf_id, pn_usuario_id, pn_evento_id, pn_itens_due, pn_fatura_id);
2283  
2284  	    END LOOP;
2285  
2286  	  END IF;
2287  
2288  	  IF (Nvl(vc_com_nf,'N') = 'N') THEN
2289  	    FOR x IN cur_sem_nf(vc_motiv)
2290  	    LOOP
2291  
2292  	      --IF (vc_com_nf = 'S') THEN
2293  	      --  Raise_Application_Error(-20000, 'Existe nota fiscal para a fatura, porém há detalhes sem nota fiscal. Não é possível gerar a DU-E).');
2294  	      --END IF;
2295  
2296  	      vb_found := FALSE;
2297  	      --OPEN cur_ship_nnf(vc_motiv);
2298  	      --FETCH cur_ship_nnf INTO vn_due_ship_id;
2299  	      --vb_found  := cur_ship_nnf%FOUND;
2300  	      --CLOSE cur_ship_nnf;
2301  
2302  	      IF NOT vb_found THEN
2303  
2304  		vn_due_ship_id := cmx_fnc_proxima_sequencia('exp_due_ship_sq1');
2305  
2306  		INSERT INTO exp_due_ship
2307  		(
2308  		  due_id
2309  		, due_ship_id
2310  		, ivc_identification
2311  		, ivc_issue
2312  		, ivc_type
2313  		, ivc_sbmttr_identif
2314  		, ivc_sbmttr_addr_ctrysuddiv
2315  		, ivc_addit_statement
2316  		, ivc_addit_statementtype
2317  		, ivc_tradeterms_condition
2318  		, creation_date
2319  		, created_by
2320  		, last_update_date
2321  		, last_updated_by
2322  		, fatura_id
2323  		) VALUES (
2324  			  pn_due_id
2325  			, vn_due_ship_id
2326  			, null
2327  			, null
2328  			, x.semnf_type
2329  			, NULL
2330  			, NULL
2331  			, NULL
2332  			, NULL
2333  			, x.condition
2334  			, SYSDATE
2335  			, pn_usuario_id
2336  			, SYSDATE
2337  			, pn_usuario_id
2338  			, pn_fatura_id
2339  			);
2340  
2341  		IF (x.motivoDispensaNF IS NOT NULL) THEN
2342  		  INSERT INTO exp_due_gs_add_info
2343  		  (
2344  		    due_gs_add_info_id
2345  		  , due_ship_id
2346  		  , statementcode
2347  		  , statementdescription
2348  		  , limitdatetime
2349  		  , statementtypecode
2350  		  , creation_date
2351  		  , created_by
2352  		  , last_update_date
2353  		  , last_updated_by
2354  		  ) VALUES (
2355  			    cmx_fnc_proxima_sequencia('exp_due_gs_add_info_sq1')
2356  			  , vn_due_ship_id
2357  			  , x.motivodispensanf
2358  			  , NULL
2359  			  , NULL
2360  			  , x.motivodispensanftype
2361  			  , SYSDATE
2362  			  , pn_usuario_id
2363  			  , SYSDATE
2364  			  , pn_usuario_id
2365  			  );
2366  		END IF;
2367  
2368  	      END IF;
2369  	      prc_gs_i_snf(pn_due_id, vn_due_ship_id, pn_fatura_id, pn_usuario_id, pn_itens_due);
2370  
2371  	    END LOOP;
2372  	  END IF;
2373  
2374  	  UPDATE exp_due
2375  	     SET com_nf = vc_com_nf
2376  	   WHERE due_id = pn_due_id;
2377  
2378  	  RETURN NULL;
2379  	END fnc_good_ship;
2380  
2381  	PROCEDURE prc_gs_i_nf( pn_due_id       NUMBER
2382  			     , pn_due_ship_id  NUMBER
2383  			     , pn_fatura_nf_id NUMBER
2384  			     , pn_usuario_id   NUMBER
2385  			     , pn_evento_id    NUMBER
2386  			     , pn_itens_due    IN OUT NUMBER
2387  			     , pn_fatura_id    NUMBER
2388  			     )
2389  	AS
2390  	  CURSOR cur_i_nf
2391  	      IS
2392  	  SELECT fatura_id
2393  	       , fatura_item_id
2394  	       , numero_nf	  nf_numero
2395  	       , serie_nf	  nf_serie
2396  	       , nf_nr_linha	  nf_nr_linha
2397  	       , exp_pkg_due.fnc_ind_due('EX0019'	,'L', fatura_id, fatura_nf_id, fatura_item_id, fatura_item_detalhe_id)	  descricao
2398  	       , exp_pkg_due.fnc_ind_due('EX0049'	,'L', fatura_id, fatura_nf_id, fatura_item_id)				  pais_destino
2399  	       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_1' ,'L', fatura_id, fatura_nf_id, fatura_item_id, fatura_item_detalhe_id)	  enquadramento_1
2400  	       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_2' ,'L', fatura_id, fatura_nf_id, fatura_item_id, fatura_item_detalhe_id)	  enquadramento_2
2401  	       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_3' ,'L', fatura_id, fatura_nf_id, fatura_item_id, fatura_item_detalhe_id)	  enquadramento_3
2402  	       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_4' ,'L', fatura_id, fatura_nf_id, fatura_item_id, fatura_item_detalhe_id)	  enquadramento_4
2403  	       , exp_pkg_due.fnc_ind_due('EX0027_PRIO_CARGA' ,'L', fatura_id, fatura_nf_id, fatura_item_id)			  prio_carga_type
2404  	       , exp_pkg_due.fnc_ind_due('EX0027_PRAZO_TEMP' ,'L', fatura_id, fatura_nf_id, fatura_item_id)			  prazo_exp_tmp_type
2405  	       , exp_pkg_due.fnc_ind_due('EX0035' ,'L', fatura_id, fatura_nf_id, fatura_item_id)				  prio_carga
2406  	       , exp_pkg_due.fnc_ind_due('EX0028_TEMP' ,'L', fatura_id, fatura_nf_id, fatura_item_id)				  doc_exp_temp
2407  	       , exp_pkg_due.fnc_ind_due('EX0026' ,'L', fatura_id, fatura_nf_id, fatura_item_id)				  prazo_exp_tmp
2408  	       , exp_pkg_due.fnc_ind_due('EX0034' ,'L', fatura_id, NULL, fatura_item_id)					  destaque_ncm
2409  	       , ncm_codigo
2410  	       , ncm
2411  	       , Sum(valor_fob) 	  valor_fob
2412  	       , Sum(valor_vcv_mn)	  valor_vcv_mn
2413  	       , Sum(valor_financiamento) valor_financiamento
2414  	       , Sum(peso_liquido)	  peso_liquido
2415  	       , Sum(qtde_un_est)	  qtde_un_est
2416  	       , Sum(quantidade_nf)	  quantidade_nf
2417  	       , Sum(qtde_comercial)	  qtde_comercial
2418  	       , fatura_item_ato_id
2419  	       , fatura_det_nf_id
2420  	       , fatura_item_detalhe_id
2421  	       , fatura_item_detalhe_ato_id
2422  	       , nf_nr_linha_due
2423  	       , exp_pkg_due.fnc_ind_due('EX0020_NF' ,'L', fatura_id, NULL, fatura_item_id)					     descricao_comercial
2424  	       , exp_pkg_due.fnc_ind_due('EX0071' ,'L', fatura_id, NULL, fatura_item_id)					  descr_un_com
2425  	  FROM (
2426  		  SELECT efi.fatura_id
2427  		       , efi.fatura_item_id
2428  		       , efi.numero_nf
2429  		       , efi.serie_nf
2430  		       , efi.nf_nr_linha
2431  		       , efi.ncm														      ncm_codigo
2432  		       , exp_pkg_due.fnc_ind_due('EX0021' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)					      ncm
2433  		       , exp_pkg_due.fnc_ind_due('EX0030' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)      valor_fob
2434  		       , exp_pkg_due.fnc_ind_due('EX0031' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)      valor_vcv_mn
2435  		       , exp_pkg_due.fnc_ind_due('EX0090' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)      valor_financiamento
2436  		       , exp_pkg_due.fnc_ind_due('EX0025' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)      peso_liquido
2437  		       --, efi.peso_liquido														peso_liquido
2438  		       , exp_pkg_due.fnc_ind_due('EX0050' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)      qtde_un_est
2439  		       , efi.quantidade 													      quantidade_nf
2440  		       , exp_pkg_due.fnc_ind_due('EX0029_COM' ,'D', efi.fatura_id, efi.fatura_nf_id, efi.fatura_item_id, efi.fatura_item_detalhe_id)  qtde_comercial
2441  		       , efi.fatura_item_ato_id
2442  		       , efi.fatura_det_nf_id
2443  		       , efi.fatura_item_detalhe_id
2444  		       , efi.fatura_item_detalhe_ato_id
2445  		       , Nvl(exp_pkg_due.fnc_ind_due( 'EX0051'
2446  						    , 'DNF'
2447  						    , efi.fatura_id
2448  						    , efi.fatura_nf_id
2449  						    , efi.fatura_item_id
2450  						    , efi.fatura_item_detalhe_id
2451  						    , pn_due_id
2452  						    , efi.fatura_det_nf_id
2453  						    )
2454  			    , efi.nf_nr_linha)													      nf_nr_linha_due
2455  		       , efi.fatura_nf_id
2456  		    FROM exp_vw_fatura_item_det_nf_ato	efi
2457  		   WHERE efi.fatura_id	     = pn_fatura_id
2458  		     AND efi.fatura_nf_id    = pn_fatura_nf_id
2459  		 ) tbl
2460  	GROUP BY fatura_id
2461  	       , fatura_item_id
2462  	       , numero_nf
2463  	       , serie_nf
2464  	       , nf_nr_linha
2465  	       , ncm_codigo
2466  	       , ncm
2467  	       , fatura_item_ato_id
2468  	       , fatura_det_nf_id
2469  	       , fatura_item_detalhe_id
2470  	       , fatura_item_detalhe_ato_id
2471  	       , nf_nr_linha_due
2472  	       , fatura_nf_id
2473  	ORDER BY numero_nf, serie_nf, nf_nr_linha;
2474  
2475  /*
2476  	  CURSOR cur_nf_r( pc_nf_numero   VARCHAR2
2477  			 , pc_nf_serie	  VARCHAR2
2478  			 , pn_nf_nr_linha NUMBER
2479  			 , pn_fatura_id   NUMBER
2480  			 )
2481  	      IS
2482  	  SELECT DISTINCT efidn.item sequencenumeric
2483  	       , ediri.sequencenumeric invoiceIdentificationid
2484  	       , efidn.qtde gm_tariffquantity
2485  	       , ediri.due_si_ref_ivc_id
2486  	    FROM exp_fatura_itens	       efi
2487  	       , exp_vw_fatura_item_detalhes   efid
2488  	       , exp_fatura_item_detalhes_nfr  efidn
2489  	       , exp_fatura_nf_rem	       efnr
2490  	       , exp_due_si_ref_ivc	       ediri
2491  	   WHERE efid.fatura_item_id = efi.fatura_item_id
2492  	     AND efid.fatura_item_detalhe_id  = efidn.fatura_item_detalhe_id
2493  	     AND efidn.fatura_nf_rem_id       = efnr.fatura_nf_rem_id
2494  	     AND ediri.fatura_nf_rem_id       = efnr.fatura_nf_rem_id
2495  	     AND efi.fatura_id		      = pn_fatura_id
2496  	     AND Nvl(efid.nf_numero,' ')      = Nvl(pc_nf_numero, ' ')
2497  	     AND Nvl(efid.nf_serie,' ')       = Nvl(pc_nf_serie, ' ')
2498  	     AND Nvl(efid.nf_nr_linha,-1)     = Nvl(pn_nf_nr_linha, -1); */
2499  
2500  	  CURSOR cur_nf_det_rem(pn_fat_det_nf_id NUMBER)
2501  	      IS
2502  	  SELECT DISTINCT efidn.item sequencenumeric
2503  	       , ediri.sequencenumeric invoiceIdentificationid
2504  	       , efidn.qtde gm_tariffquantity
2505  	       , ediri.due_si_ref_ivc_id
2506  	    FROM exp_fatura_item_detalhes_nfr efidn
2507  	       , exp_fatura_nf_rem	      efnr
2508  	       , exp_due_si_ref_ivc	      ediri
2509  	   WHERE efidn.fatura_nf_rem_id = efnr.fatura_nf_rem_id
2510  	     AND efnr.fatura_nf_rem_id	= ediri.fatura_nf_rem_id
2511  	     AND efidn.fatura_det_nf_id = pn_fat_det_nf_id;
2512  
2513  	  CURSOR cur_atrib(pc_ncm VARCHAR2, pc_destaque VARCHAR2)
2514  	      IS
2515  	  SELECT etna.codigo
2516  	    FROM cmx_tab_ncm_atributos	etna
2517  	       , cmx_tab_ncm_atr_compl	etnac
2518  	   WHERE etna.ncm_atributo_id = etnac.ncm_atributo_id
2519  	     AND etnac.tipo   = 'DO'
2520  	     AND etna.ncm     = pc_ncm
2521  	     AND etnac.codigo = pc_destaque;
2522  
2523  	  CURSOR cur_atos(pn_fat_item_det_ato_id NUMBER)
2524  	      IS
2525  	  SELECT efia.numero
2526  	       , efia.nr_item_drawback
2527  	       , Sum(Nvl(nullif(efidna.qtde_estatistica,0), efida.quantidade_drw))  quantidade
2528  	       , Sum(efida.valor18b)	    valor
2529  	       , efia.ncm
2530  	       , efia.cnpj
2531  	    FROM exp_vw_fatura_item_atos	efia
2532  	       , exp_fatura_item_detalhe_atos	efida
2533  	       , exp_vw_fatura_item_det_nf_ato	efidna
2534  	   WHERE efia.fatura_item_ato_id	  = efida.fatura_item_ato_id
2535  	     AND efida.fatura_item_detalhe_ato_id = efidna.fatura_item_detalhe_ato_id
2536  	     AND efida.fatura_item_detalhe_ato_id = pn_fat_item_det_ato_id
2537  	     AND efia.numero IS NOT NULL
2538  	GROUP BY efia.numero
2539  	       , efia.nr_item_drawback
2540  	       , efia.ncm
2541  	       , efia.cnpj
2542  	       , efida.fatura_item_ato_id;
2543  
2544  	  CURSOR cur_adoc_di(pn_fatura_item_id NUMBER)
2545  	      IS
2546  	  SELECT efid.nr_declaracao
2547  	       , ida.adicao_num
2548  	       , efid.dsi
2549  	       , ida.declaracao_adi_id
2550  	    FROM exp_vw_fatura_item_decs efid
2551  	       , imp_declaracoes_lin	 idl
2552  	       , imp_declaracoes_adi	 ida
2553  	   WHERE efid.fatura_item_id = pn_fatura_item_id
2554  	     AND idl.declaracao_lin_id	= efid.declaracao_lin_id
2555  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
2556  	     AND efid.nr_declaracao IS NOT NULL
2557  	   UNION
2558  	  SELECT efiea.nr_declaracao
2559  	       , ida.adicao_num
2560  	       , idc.dsi
2561  	       , ida.declaracao_adi_id
2562  	    FROM exp_vw_fatura_item_entr_adua efiea
2563  	       , imp_declaracoes_lin	 idl
2564  	       , imp_declaracoes_adi	 ida
2565  	       , imp_declaracoes	 idc
2566  	   WHERE efiea.fatura_item_id = pn_fatura_item_id
2567  	     AND idl.declaracao_lin_id	= efiea.declaracao_lin_id
2568  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
2569  	     AND idl.declaracao_id	= idc.declaracao_id
2570  	     AND efiea.nr_declaracao IS NOT NULL
2571  	   UNION
2572  	  SELECT DISTINCT id.nr_declaracao
2573  	       , ida.adicao_num
2574  	       , id.dsi
2575  	       , ida.declaracao_adi_id
2576  	    FROM exp_vw_fatura_item_tr_garantia efitg
2577  	       , imp_declaracoes_lin		idl
2578  	       , imp_declaracoes		id
2579  	       , imp_declaracoes_adi	 ida
2580  	   WHERE efitg.declaracao_lin_id = idl.declaracao_lin_id
2581  	     AND idl.declaracao_id	 = id.declaracao_id
2582  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
2583  	     AND id.nr_declaracao IS NOT NULL
2584  	     AND efitg.fatura_item_id	 = pn_fatura_item_id
2585  	 /*UNION
2586  	SELECT DISTINCT id.nr_declaracao
2587  	  FROM exp_vw_fat_item_embalagem_ret efitg
2588  	     , imp_declaracoes_lin	      idl
2589  	     , imp_declaracoes		      id
2590  	 WHERE efitg.invoice_lin_id = idl.invoice_lin_id
2591  	   AND idl.declaracao_id       = id.declaracao_id
2592  	   AND id.nr_declaracao IS NOT NULL
2593  	   AND efitg.fatura_item_id    = pn_fatura_item_id*/;
2594  
2595  
2596  	CURSOR cur_proc_adm(pn_declaracao_adi_id NUMBER)
2597  	IS
2598  	SELECT to_char(rcr.processo_numero) processo_numero
2599  	  FROM imp_adm_temp_rcr_lin rcr_lin
2600  	     , imp_adm_temp_rcr     rcr
2601  	     , imp_declaracoes_lin  idl
2602  	 WHERE rcr_lin.invoice_lin_id  = idl.invoice_lin_id
2603  	   AND rcr_lin.rcr_id	       = rcr.rcr_id
2604  	   AND rcr.processo_numero    IS NOT NULL
2605  	   AND idl.declaracao_adi_id  = pn_declaracao_adi_id
2606  	UNION
2607   SELECT to_char(rat.processo_numero) processo_numero
2608  	 FROM imp_adm_temp_rat_lin rat_lin
2609  	    , imp_adm_temp_rat	   rat
2610  	    , imp_declaracoes_lin  idl
2611  	WHERE rat_lin.invoice_lin_id  = idl.invoice_lin_id
2612  	  AND rat_lin.rat_id	      = rat.rat_id
2613  	  AND rat.processo_numero IS NOT NULL
2614  	  AND idl.declaracao_adi_id  = pn_declaracao_adi_id;
2615  
2616  
2617  	  CURSOR cur_nfr(pc_identification VARCHAR2)
2618  	      IS
2619  	  SELECT due_si_ref_ivc_id
2620  	    FROM exp_due_si_ref_ivc ivc
2621  	   WHERE ivc.identification = pc_identification
2622  	     AND ivc.due_ship_id = pn_due_ship_id;
2623  
2624  /*
2625  	  CURSOR cur_i_nf_itens( pn_fatura_item_id NUMBER
2626  			       , pc_nf_numero	   VARCHAR2
2627  			       , pc_nf_serie	   VARCHAR2
2628  			       , pn_nf_nr_linha    NUMBER
2629  			       )
2630  	      IS
2631  	  SELECT detalhe.fatura_item_detalhe_id 				      fatura_item_detalhe_id
2632  	       , exp_pkg_due.fnc_ind_due( 'EX0050'
2633  					, 'D'
2634  					, itens.fatura_id
2635  					, detalhe.nf_id
2636  					, detalhe.fatura_item_id
2637  					, detalhe.fatura_item_detalhe_id
2638  					)					      qtde_un_est
2639  	       , exp_pkg_due.fnc_ind_due( 'EX0031'
2640  					, 'D'
2641  					, itens.fatura_id
2642  					, detalhe.nf_id
2643  					, detalhe.fatura_item_id
2644  					, detalhe.fatura_item_detalhe_id
2645  					)					      valor_18a
2646  	       , exp_pkg_due.fnc_ind_due( 'EX0030'
2647  					, 'D'
2648  					, itens.fatura_id
2649  					, detalhe.nf_id
2650  					, detalhe.fatura_item_id
2651  					, detalhe.fatura_item_detalhe_id
2652  					)					      valor_18b
2653  	       , itens.fatura_id
2654  	    FROM exp_vw_fatura_item_detalhes  detalhe
2655  	       , exp_fatura_itens	      itens
2656  	   WHERE detalhe.fatura_item_id = itens.fatura_item_id
2657  	     AND detalhe.fatura_item_id = pn_fatura_item_id
2658  	     AND detalhe.nf_numero	= pc_nf_numero
2659  	     AND detalhe.nf_serie	= pc_nf_serie
2660  	     AND detalhe.nf_nr_linha	= pn_nf_nr_linha;*/
2661  
2662  	  CURSOR cur_detalhe_ato(pn_item_det_id NUMBER)
2663  	      IS
2664  	  SELECT Nvl(efida.valor, 0)	     valor
2665  	       , Nvl(efida.quantidade,0)     quantidade
2666  	       , Nvl(efida.quantidade_drw,0) quantidade_drw
2667  	       , Nvl(efida.peso_liquido,0)   peso_liquido
2668  	       , efia.fatura_item_ato_id
2669  	       , efia.rd_id
2670  	    FROM exp_fatura_item_atos	       efia
2671  	       , exp_fatura_item_detalhe_atos  efida
2672  	  WHERE efia.fatura_item_ato_id = efida.fatura_item_ato_id
2673  	    AND fatura_item_detalhe_id	= pn_item_det_id;
2674  
2675  	  CURSOR cur_paridade_us_emb (pn_fatura_id exp_faturas.fatura_id%TYPE)
2676  	      IS
2677  	  SELECT embarque.data	    data_embarque
2678  	       , cmx_pkg_taxas.fnc_paridade_usd_dia_util (
2679  					   fatura.moeda_id
2680  					 , embarque.data
2681  					 , 'DIARIA COMPRA'
2682  					 )
2683  	    FROM exp_fatura_datas embarque
2684  	       , exp_faturas	  fatura
2685  	   WHERE fatura.fatura_id	= pn_fatura_id
2686  	     AND embarque.fatura_id	= fatura.fatura_id
2687  	     AND embarque.tipo_id	= cmx_pkg_tabelas.tabela_id ('203', 'EMBARQUE');
2688  
2689  	  CURSOR cur_data_conhecimento (pn_fatura_id exp_faturas.fatura_id%TYPE)
2690  	      IS
2691  	  SELECT conhec.data	  data_conhec
2692  	    FROM exp_fatura_datas conhec
2693  	   WHERE conhec.fatura_id     = pn_fatura_id
2694  	     AND conhec.tipo_id       = cmx_pkg_tabelas.tabela_id ('203', 'CONHEC_TRANSPORTE');
2695  
2696  	  CURSOR cur_fat_item_info(pn_fatura_item_id NUMBER)
2697  	      IS
2698  	  SELECT efi.item_id
2699  	       , efi.ncm_id
2700  	       , decode ( efi.codigo
2701  			, NULL
2702  			, efi.un_medida_id
2703  			, exp_pkg_pesquisa.un_medida_id ( efi.item_id
2704  							, efi.organizacao_id
2705  							)
2706  			)	    unidade_de_id
2707  	       , ctn.un_medida_id   unidade_para_id
2708  	    FROM exp_fatura_itens efi
2709  	       , cmx_tab_ncm	  ctn
2710  	   WHERE efi.ncm_id	     =	ctn.ncm_id (+)
2711  	     AND efi.fatura_item_id  =	pn_fatura_item_id;
2712  
2713  	  CURSOR cur_ato_enq(pn_fat_item_ato_id NUMBER) IS
2714  	    SELECT cmx_pkg_tabelas.codigo(drd.enquadramento_id) enquadramento
2715  	      FROM exp_fatura_item_atos   efia
2716  		 , drw_registro_drawback  drd
2717  	     WHERE efia.rd_id = drd.rd_id
2718  	       AND drd.enquadramento_id IS NOT NULL
2719  	       AND efia.fatura_item_ato_id = pn_fat_item_ato_id;
2720  
2721  	  CURSOR cur_comissao_repre(pn_fat_item_id NUMBER) IS
2722  	    SELECT Sum(percentual) percentual
2723  	      FROM exp_fatura_item_representantes
2724  	     WHERE fatura_item_id = pn_fat_item_id;
2725  
2726  	  CURSOR cur_ver_ship_item( pn_item_id	   NUMBER
2727  				  , pc_nf_nr_linha VARCHAR2
2728  				  ) IS
2729  	    SELECT efidn.due_ship_item_id
2730  	      FROM exp_fatura_itens	    efi
2731  		 , exp_fatura_item_detalhes efid
2732  		 , exp_fatura_item_det_nf   efidn
2733  		 , exp_due_ship_item	    edsi
2734  	     WHERE efi.fatura_item_id  = efid.fatura_item_id
2735  	       AND efid.fatura_item_detalhe_id = efidn.fatura_item_detalhe_id
2736  	       AND efidn.due_ship_item_id      = edsi.due_ship_item_id
2737  	       AND efi.item_id	       = pn_item_id
2738  	       AND efidn.fatura_nf_id  = pn_fatura_nf_id
2739  	       AND efidn.nf_nr_linha   = pc_nf_nr_linha
2740  	       AND edsi.due_id	       = pn_due_id;
2741  
2742  	  CURSOR cur_atrib_ativo(pc_ncm VARCHAR2)
2743  	      IS
2744  	  SELECT DISTINCT etna.codigo
2745  	       , etna.ncm_atributo_id
2746  	       , Nvl(etna.formula, tipo.formula) formula
2747  	       , Upper(tipo.nomeapresentacao)	 nomeapresentacao
2748  	    FROM cmx_tab_ncm_atributos	      etna
2749  	       , cmx_tab_ncm_atributos_tipo   tipo
2750  	   WHERE etna.ncm_atr_tipo_id = tipo.ncm_atr_tipo_id
2751  	     AND etna.ncm	      = pc_ncm
2752  	     AND Nvl(etna.ativo, 'S') = 'S'
2753  	     AND etna.modalidade = 'EXPORTAÇÃO';
2754  
2755  	  CURSOR cur_nr_linha_nf( pc_numero_nf	  VARCHAR2
2756  				, pc_serie_nf	  VARCHAR2
2757  				, pc_nr_linha_nf  VARCHAR2
2758  				)
2759  	      IS
2760  	  SELECT nf_nr_linha_due
2761  	    FROM exp_vw_due_numero_lin_nf
2762  	   WHERE due_id      = pn_due_id
2763  	     AND fatura_id   = pn_fatura_id
2764  	     AND numero_nf   = pc_numero_nf
2765  	     AND serie_nf    = pc_serie_nf
2766  	     AND nf_nr_linha = pc_nr_linha_nf;
2767  
2768  	  CURSOR cur_serie(pn_fat_item_det_id NUMBER)
2769  	      IS
2770  	  SELECT serie
2771  	    FROM exp_fatura_item_detalhes
2772  	   WHERE fatura_item_detalhe_id = pn_fat_item_det_id;
2773  
2774  	  CURSOR cur_ship_item(pn_id NUMBER)
2775  	      IS
2776  	  SELECT cmmdty_description
2777  	    FROM exp_due_ship_item
2778  	   WHERE due_ship_item_id = pn_id;
2779  
2780  	  CURSOR cur_adoc_recof(pn_fat_detalhe_id NUMBER)
2781  	      IS
2782  	  SELECT DISTINCT nr_di nr_declaracao
2783  	       , adicao_num
2784  	       , dsi
2785  	       , qtde_consumo
2786  	    FROM exp_vw_due_res_reexportaca
2787  	   WHERE fatura_item_detalhe_id = pn_fat_detalhe_id;
2788  
2789  	CURSOR cur_rcf_proc_adm(pc_nr_declaracao VARCHAR2, pn_adicao_num NUMBER)
2790  	IS
2791  	SELECT to_char(rcr.processo_numero) processo_numero
2792  	  FROM imp_adm_temp_rcr_lin rcr_lin
2793  	     , imp_adm_temp_rcr     rcr
2794  	     , imp_declaracoes_lin  idl
2795  	     , imp_declaracoes	    id
2796  	     , imp_declaracoes_adi  ida
2797  	 WHERE rcr_lin.invoice_lin_id  = idl.invoice_lin_id
2798  	   AND rcr_lin.rcr_id	       = rcr.rcr_id
2799  	   AND rcr.processo_numero    IS NOT NULL
2800  	   AND idl.declaracao_adi_id  = ida.declaracao_adi_id
2801  	   AND idl.declaracao_id      = id.declaracao_id
2802  	   AND ida.adicao_num	      = pn_adicao_num
2803  	   AND id.nr_declaracao       = pc_nr_declaracao
2804  	UNION
2805   SELECT to_char(rat.processo_numero) processo_numero
2806  	 FROM imp_adm_temp_rat_lin rat_lin
2807  	    , imp_adm_temp_rat	   rat
2808  	    , imp_declaracoes_lin  idl
2809  	    , imp_declaracoes	   id
2810  	    , imp_declaracoes_adi  ida
2811  	WHERE rat_lin.invoice_lin_id  = idl.invoice_lin_id
2812  	  AND rat_lin.rat_id	      = rat.rat_id
2813  	  AND rat.processo_numero IS NOT NULL
2814  	  AND idl.declaracao_adi_id  = ida.declaracao_adi_id
2815  	  AND idl.declaracao_id      = id.declaracao_id
2816  	  AND ida.adicao_num	     = pn_adicao_num
2817  	  AND id.nr_declaracao	     = pc_nr_declaracao;
2818  
2819  	  CURSOR cur_ato_due( pn_due_ship_item_id  NUMBER
2820  			    , pc_nr_ato 	   VARCHAR2
2821  			    , pn_itemid 	   NUMBER
2822  			     ) IS
2823  	    SELECT due_si_adoc_id
2824  	      FROM exp_due_si_adoc
2825  	      WHERE due_ship_item_id = pn_due_ship_item_id
2826  		AND identification   = pc_nr_ato
2827  		AND itemid	     = pn_itemid;
2828  
2829  	  CURSOR cur_nr_ato(pn_fatura_item_ato_id NUMBER) IS
2830  	    SELECT numero, nr_item_drawback
2831  	      FROM exp_vw_fatura_item_atos
2832  	     WHERE fatura_item_ato_id = pn_fatura_item_ato_id;
2833  
2834  	  CURSOR cur_enq_sem_di(pn_due_ship_item_id NUMBER)
2835  	      IS
2836  	  SELECT Max(Upper(Nvl(ct.auxiliar6,'S'))) enq_sem_di
2837  	    FROM cmx_tabelas ct
2838  	       , exp_due_si_enq edie
2839  	   WHERE ct.codigo = edie.enquadramento
2840  	     AND edie.due_ship_item_id = pn_due_ship_item_id;
2841  
2842  	  CURSOR cur_ver_enq(pn_due_ship_item_id NUMBER, pc_enquadramento VARCHAR2)
2843  	      IS
2844  	  SELECT due_si_enq_id
2845  	    FROM exp_due_si_enq
2846  	   WHERE due_ship_item_id = pn_due_ship_item_id
2847  	     AND enquadramento = pc_enquadramento;
2848  
2849  	  CURSOR cur_nf_due_remessa ( pn_due_ship_item_id	  NUMBER
2850  				    , pn_due_si_ref_ivc_id	  NUMBER
2851  				    , pc_invoiceidentificationid  VARCHAR2
2852  				    , pn_sequencenumeric	  NUMBER
2853  				    ) IS
2854  	    SELECT due_si_ref_ivcl_id
2855  	      FROM exp_due_si_ref_ivcl
2856  	     WHERE invoiceidentificationid = pc_invoiceidentificationid
2857  	       AND due_ship_item_id	   = pn_due_ship_item_id
2858  	       AND due_si_ref_ivc_id	   = pn_due_si_ref_ivc_id
2859  	       AND sequencenumeric	   = pn_sequencenumeric;
2860  
2861  	  vr_fat_item_info	cur_fat_item_info%ROWTYPE;
2862  	  vr_nr_ato		cur_nr_ato%ROWTYPE;
2863  	  vn_due_ship_item_id	NUMBER;
2864  	  vn_due_si_ref_ivc_id	NUMBER;
2865  	  vc_atrib_code 	VARCHAR2(150);
2866  	  vn_item_det_re_id	NUMBER;
2867  	  vd_data_embarque	DATE;
2868  	  vn_paridade_us_dt_emb NUMBER;
2869  	  vd_data_conhec	DATE;
2870  	  vn_qtde_estatistica	NUMBER;
2871  	  vn_peso_liquido	NUMBER;
2872  	  vn_valor_fob		NUMBER;
2873  	  vn_valor_vcv_mn	NUMBER;
2874  	  vc_enquadramento	VARCHAR2(20);
2875  	  vn_per_comissao	NUMBER;
2876  
2877  	  vn_fat_item_id_ant	NUMBER	:= NULL;
2878  	  vb_continuar		BOOLEAN := FALSE;
2879  	  vb_enq_ato		BOOLEAN := FALSE;
2880  	  vn_ship_item_id	NUMBER	:= NULL;
2881  	  vb_achou		BOOLEAN := FALSE;
2882  	  vc_destaque		VARCHAR2(150);
2883  
2884  	  vn_nf_nr_linha_due	NUMBER	:= NULL;
2885  	  vn_item_id		NUMBER	:= NULL;
2886  	  vn_item_id_ant	NUMBER	:= NULL;
2887  
2888  	  vc_serie		VARCHAR2(40);
2889  	  vc_descricao_item	VARCHAR2(4000);
2890  	  vc_typecode		VARCHAR2(10);
2891  
2892  	  vn_due_si_adoc_id	NUMBER;
2893  	  vc_enq_sem_di 	VARCHAR2(1);
2894  	  vn_qtd_total_det	NUMBER;
2895  	  vn_due_si_enq_id	NUMBER;
2896  	  vn_vlr_financiamento	NUMBER;
2897  	  vn_due_si_ref_ivcl_id NUMBER;
2898  	BEGIN
2899  
2900  	  FOR x IN cur_i_nf
2901  	  LOOP
2902  	    vb_continuar := TRUE;
2903  
2904  	    --Quantidade estatística
2905  	    OPEN cur_fat_item_info(x.fatura_item_id);
2906  	    FETCH cur_fat_item_info INTO vr_fat_item_info;
2907  	    CLOSE cur_fat_item_info;
2908  
2909  	    --Quantidade vinculado ao detalhe do item
2910  	    vn_qtd_total_det := exp_pkg_informacoes.fnc_valor ( cmx_pkg_tabelas.tabela_id ('202', 'QUANTIDADE')
2911  							      , NULL
2912  							      , x.fatura_id
2913  							      , x.fatura_item_id
2914  							      , x.fatura_item_detalhe_id
2915  							      );
2916  
2917  	    IF(Nvl(x.peso_liquido,0) = 0) THEN
2918  
2919  	      vn_peso_liquido := Nvl(exp_pkg_informacoes.fnc_valor( cmx_pkg_tabelas.tabela_id ('202', 'PESO_LIQUIDO')
2920  								  , NULL
2921  								  , x.fatura_id
2922  								  , x.fatura_item_id
2923  								  , x.fatura_item_detalhe_id
2924  								  ),0);
2925  
2926  	      IF(Nvl(vn_peso_liquido,0) > 0) THEN
2927  		vn_peso_liquido := Nvl(vn_peso_liquido,0) * Nvl(x.quantidade_nf,0);
2928  	      END IF;
2929  	    ELSE
2930  	      vn_peso_liquido	   := (Nvl(x.peso_liquido,0) / Nvl(x.qtde_comercial,0)) * Nvl(x.quantidade_nf,0);
2931  	    END IF;
2932  
2933  	    IF ( Nvl(x.qtde_un_est, 0) = 0 OR vn_qtd_total_det <> x.quantidade_nf) THEN
2934  
2935  	      BEGIN
2936  		vn_qtde_estatistica := cmx_pkg_itens.fnc_conv_qtde_um(
2937  							      nvl( exp_pkg_informacoes.fnc_complemento_id( cmx_pkg_tabelas.tabela_id('201','UNIDADE_VENDA')
2938  													, NULL
2939  													, x.fatura_id
2940  													, x.fatura_item_id
2941  													, x.fatura_item_detalhe_id
2942  													)
2943  								,   vr_fat_item_info.unidade_de_id
2944  								)
2945  							    , vr_fat_item_info.unidade_para_id
2946  							    , vr_fat_item_info.item_id
2947  							    , x.quantidade_nf
2948  							    , vn_peso_liquido
2949  							    , vr_fat_item_info.ncm_id
2950  							    );
2951  	      EXCEPTION
2952  		WHEN OTHERS THEN
2953  		  vn_qtde_estatistica := 0;
2954  	      END;
2955  	    ELSE
2956  		vn_qtde_estatistica :=	x.qtde_un_est ;
2957  	    END IF ;
2958  
2959  	    vc_atrib_code	 := NULL;
2960  	    vn_valor_fob	 := (Nvl(x.valor_fob,0) / Nvl(x.qtde_comercial,0)) * Nvl(x.quantidade_nf,0);
2961  	    vn_valor_vcv_mn	 := (Nvl(x.valor_vcv_mn,0) / Nvl(x.qtde_comercial,0)) * Nvl(x.quantidade_nf,0);
2962  
2963  	    IF( Nvl(x.valor_financiamento,0) > 0 AND
2964  		( (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_1,'-99999')),7),'N') = 'S') OR
2965  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_2,'-99999')),7),'N') = 'S') OR
2966  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_3,'-99999')),7),'N') = 'S') OR
2967  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_4,'-99999')),7),'N') = 'S')
2968  		)
2969  	      ) THEN
2970  	      vn_vlr_financiamento := (Nvl(x.valor_financiamento,0) / Nvl(x.qtde_comercial,0)) * Nvl(x.quantidade_nf,0);
2971  	    ELSE
2972  	      vn_vlr_financiamento := NULL;
2973  	    END IF;
2974  
2975  	    /*
2976  	      Verifica se para o mesmo item da fatura com o mesmo número de nota fiscal
2977  	      e o mesmo número de linha de nota fiscal
2978  	      já foi inserido na DUE.
2979  	    */
2980  	    IF(vr_fat_item_info.item_id = vn_item_id_ant AND vn_item_id_ant IS NOT NULL AND vr_fat_item_info.item_id IS NOT NULL) THEN
2981  
2982  	      vb_achou := FALSE;
2983  	      vn_due_ship_item_id := NULL;
2984  	      OPEN  cur_ver_ship_item(vr_fat_item_info.item_id, x.nf_nr_linha_due);
2985  	      FETCH cur_ver_ship_item INTO vn_due_ship_item_id;
2986  	      vb_achou := cur_ver_ship_item%FOUND;
2987  	      CLOSE cur_ver_ship_item;
2988  
2989  	      IF(vb_achou) THEN
2990  
2991  		vb_continuar := FALSE;
2992  		vc_descricao_item := NULL;
2993  
2994  		OPEN  cur_ship_item(vn_due_ship_item_id);
2995  		FETCH cur_ship_item INTO vc_descricao_item;
2996  		CLOSE cur_ship_item;
2997  
2998  		vc_serie := NULL;
2999  		OPEN  cur_serie(x.fatura_item_detalhe_id);
3000  		FETCH cur_serie INTO vc_serie;
3001  		CLOSE cur_serie;
3002  
3003  		IF(vc_serie IS NOT NULL) THEN
3004  		  IF(InStr(vc_descricao_item, 'Serie:') > 0) THEN
3005  		    vc_descricao_item := vc_descricao_item ||', '||vc_serie;
3006  		  ELSE
3007  		    vc_descricao_item := vc_descricao_item ||' Serie: '||vc_serie;
3008  		  END IF;
3009  		END IF;
3010  
3011  		UPDATE exp_due_ship_item SET customsvalue = Nvl(customsvalue,0) + Nvl(vn_valor_fob,0)
3012  					   , cmmdty_value = Nvl(cmmdty_value,0) + Nvl(vn_valor_vcv_mn,0)
3013  					   , cmmdty_gs_netweight = Nvl(cmmdty_gs_netweight,0) + Nvl(vn_peso_liquido,0)
3014  					   , cmmdty_description  = vc_descricao_item
3015  				       WHERE due_ship_item_id = vn_due_ship_item_id;
3016  
3017  		UPDATE exp_due_si_dest SET gm_tariffquantity = Nvl(gm_tariffquantity,0) + Nvl(vn_qtde_estatistica,0)
3018  				     WHERE due_ship_item_id = vn_due_ship_item_id;
3019  
3020  		--Financedvalue
3021  		IF(Nvl(vn_vlr_financiamento,0) > 0) THEN
3022  		  UPDATE exp_due_ship_item SET financedvalue = Nvl(financedvalue,0) + Nvl(vn_vlr_financiamento,0)
3023  					 WHERE due_ship_item_id = vn_due_ship_item_id;
3024  		END IF;
3025  
3026  		--Drawback Suspensão
3027  		IF(x.fatura_item_detalhe_ato_id IS NOT NULL) THEN
3028  
3029  		  OPEN	cur_nr_ato(x.fatura_item_ato_id);
3030  		  FETCH cur_nr_ato INTO vr_nr_ato;
3031  		  CLOSE cur_nr_ato;
3032  
3033  		  vn_due_si_adoc_id := NULL;
3034  		  vb_achou	    := FALSE;
3035  		  OPEN	cur_ato_due(vn_due_ship_item_id, vr_nr_ato.numero, vr_nr_ato.nr_item_drawback);
3036  		  FETCH cur_ato_due INTO vn_due_si_adoc_id;
3037  		  vb_achou := cur_ato_due%FOUND;
3038  		  CLOSE cur_ato_due;
3039  
3040  		  IF(vb_achou) THEN
3041  
3042  --	      FOR ato IN cur_atos(x.fatura_item_detalhe_ato_id)
3043  --	      LOOP
3044  --		UPDATE exp_due_si_adoc SET quantity = Nvl(quantity,0) + Nvl(ato.quantidade,0)
3045  --					 , vlrwithexcoveramount = Nvl(vlrwithexcoveramount,0) + Nvl(ato.valor,0)
3046  --				     WHERE due_si_adoc_id = vn_due_si_adoc_id;
3047  --	      END LOOP;
3048  
3049  		    p_prc_inserir_ato( x.fatura_item_detalhe_ato_id
3050  				     , x.fatura_item_ato_id
3051  				     , vn_due_ship_item_id
3052  				     , pn_usuario_id
3053  				     , x.fatura_id
3054  				     , x.fatura_item_id
3055  				     , x.fatura_item_detalhe_id
3056  				     , vn_due_si_adoc_id
3057  				     , vn_qtde_estatistica
3058  				     , 'U'
3059  				     );
3060  
3061  		  ELSE
3062  		    /*
3063  		    EX0075 ItemID
3064  		    EX0076 QuantityQuantity
3065  		    EX0077 ValueWithExchangeCoverAmount
3066  		    EX0078 ValueWithoutExchangeCoverAmount
3067  		    EX0083 DrawbackHsClassification
3068  		    EX0084 DrawbackRecipientId
3069  		    */
3070  		    p_prc_inserir_ato( x.fatura_item_detalhe_ato_id
3071  				     , x.fatura_item_ato_id
3072  				     , vn_due_ship_item_id
3073  				     , pn_usuario_id
3074  				     , x.fatura_id
3075  				     , x.fatura_item_id
3076  				     , x.fatura_item_detalhe_id
3077  				     , NULL
3078  				     , vn_qtde_estatistica
3079  				     , 'I'
3080  				     );
3081  
3082  		  END IF;
3083  		END IF;
3084  
3085  	      END IF;
3086  	    END IF;
3087  
3088  	    IF(vb_continuar) THEN
3089  
3090  	      vn_nf_nr_linha_due := NULL;
3091  	      IF(Nvl(cmx_fnc_profile('EXP_DUE_REDEFINE_SEQ_LINHA_NF'), 'N') = 'S') THEN
3092  		OPEN  cur_nr_linha_nf ( x.nf_numero
3093  				      , x.nf_serie
3094  				      , x.nf_nr_linha
3095  				      );
3096  		FETCH cur_nr_linha_nf INTO vn_nf_nr_linha_due;
3097  		CLOSE cur_nr_linha_nf;
3098  	      ELSE
3099  		vn_nf_nr_linha_due := x.nf_nr_linha_due;
3100  	      END IF;
3101  
3102  	      -- COM NF
3103  	      pn_itens_due := pn_itens_due + 1;
3104  	      vn_due_ship_item_id := NULL;
3105  	      vn_due_ship_item_id := cmx_fnc_proxima_sequencia('exp_due_ship_item_sq1');
3106  	      INSERT INTO exp_due_ship_item
3107  	      (
3108  		due_id					     --01
3109  	      , due_ship_id				     --02
3110  	      , due_ship_item_id			     --03
3111  	      , customsvalue				     --04
3112  	      , sequence				     --05
3113  	      , cmmdty_description			     --06
3114  	      , cmmdty_value				     --07
3115  	      , cmmdty_line_sequence			     --08
3116  	      , cmmdty_gs_netweight			     --09
3117  	      , ncm					     --10
3118  	      , creation_date				     --11
3119  	      , created_by				     --12
3120  	      , last_update_date			     --13
3121  	      , last_updated_by 			     --14
3122  	      , financedvalue				     --15
3123  	      , cmmdty_commercial_descr 			--16
3124  	      , cmmdty_gs_umed_com				--17
3125  	      , cmmdty_gs_tariff				--18
3126  	      , cmmdty_gs_tariff_est				--20
3127  	      ) VALUES (
3128  			 pn_due_id			     --01
3129  		       , pn_due_ship_id 		     --02
3130  		       , vn_due_ship_item_id		     --03
3131  		       , vn_valor_fob			     --04
3132  		       , pn_itens_due			     --05
3133  		       , SubStr(x.descricao, 1, 4000)	     --06
3134  		       , vn_valor_vcv_mn		     --07
3135  		       , vn_nf_nr_linha_due		     --08
3136  		       , vn_peso_liquido		     --09
3137  		       , x.ncm				     --10
3138  		       , SYSDATE			     --11
3139  		       , pn_usuario_id			     --12
3140  		       , SYSDATE			     --13
3141  		       , pn_usuario_id			     --14
3142  		       , vn_vlr_financiamento		     --15
3143  		       , x.descricao_comercial			--16
3144  		       , x.descr_un_com 			--17
3145  		       , x.qtde_comercial			--18
3146  		       , vn_qtde_estatistica			--20
3147  		       );
3148  
3149  	      INSERT INTO exp_due_si_dest
3150  	      (
3151  		due_si_dest_id
3152  	      , due_ship_item_id
3153  	      , countrycode
3154  	      , gm_tariffquantity
3155  	      , creation_date
3156  	      , created_by
3157  	      , last_update_date
3158  	      , last_updated_by
3159  	      ) VALUES (
3160  			 cmx_fnc_proxima_sequencia('exp_due_si_dest_sq1')
3161  		       , vn_due_ship_item_id
3162  		       , x.pais_destino
3163  		       , vn_qtde_estatistica
3164  		       , SYSDATE
3165  		       , pn_usuario_id
3166  		       , SYSDATE
3167  		       , pn_usuario_id
3168  		       );
3169  
3170  	      vc_enq_sem_di := NULL;
3171  	      vb_enq_ato    := FALSE;
3172  
3173  	      IF(x.fatura_item_ato_id IS NOT  NULL) THEN
3174  
3175  		 vc_enquadramento := NULL;
3176  		 OPEN  cur_ato_enq(x.fatura_item_ato_id);
3177  		 FETCH cur_ato_enq INTO vc_enquadramento;
3178  		 CLOSE cur_ato_enq;
3179  
3180  		 IF(vc_enquadramento IS NOT NULL) THEN
3181  
3182  		   vb_achou := FALSE;
3183  		   OPEN  cur_ver_enq(vn_due_ship_item_id, vc_enquadramento);
3184  		   FETCH cur_ver_enq INTO vn_due_si_enq_id;
3185  		   vb_achou := cur_ver_enq%FOUND;
3186  		   CLOSE cur_ver_enq;
3187  
3188  		   IF NOT(vb_achou) THEN
3189  
3190  		    vb_enq_ato := TRUE;
3191  
3192  		    INSERT INTO exp_due_si_enq
3193  		    (
3194  		      due_si_enq_id
3195  		    , due_ship_item_id
3196  		    , enquadramento
3197  		    , creation_date
3198  		    , created_by
3199  		    , last_update_date
3200  		    , last_updated_by
3201  		    ) VALUES (
3202  				cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
3203  			      , vn_due_ship_item_id
3204  			      , vc_enquadramento
3205  			      , SYSDATE
3206  			      , pn_usuario_id
3207  			      , SYSDATE
3208  			      , pn_usuario_id
3209  			      );
3210  		  END IF;
3211  		 END IF;
3212  	      END IF ;
3213  
3214  	      IF NOT(vb_enq_ato) THEN
3215  		IF ( x.enquadramento_1 IS NOT NULL) THEN
3216  
3217  		  vb_achou := FALSE;
3218  		  OPEN	cur_ver_enq(vn_due_ship_item_id, x.enquadramento_1);
3219  		  FETCH cur_ver_enq INTO vn_due_si_enq_id;
3220  		  vb_achou := cur_ver_enq%FOUND;
3221  		  CLOSE cur_ver_enq;
3222  
3223  		  IF NOT(vb_achou) THEN
3224  
3225  		      INSERT INTO exp_due_si_enq
3226  		      (
3227  			due_si_enq_id
3228  		      , due_ship_item_id
3229  		      , enquadramento
3230  		      , creation_date
3231  		      , created_by
3232  		      , last_update_date
3233  		      , last_updated_by
3234  		      ) VALUES (
3235  				  cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
3236  				, vn_due_ship_item_id
3237  				, x.enquadramento_1
3238  				, SYSDATE
3239  				, pn_usuario_id
3240  				, SYSDATE
3241  				, pn_usuario_id
3242  				);
3243  		  END IF;
3244  		END IF;
3245  
3246  		IF ( x.enquadramento_2 IS NOT NULL) THEN
3247  
3248  		  vb_achou := FALSE;
3249  		  OPEN	cur_ver_enq(vn_due_ship_item_id, x.enquadramento_2);
3250  		  FETCH cur_ver_enq INTO vn_due_si_enq_id;
3251  		  vb_achou := cur_ver_enq%FOUND;
3252  		  CLOSE cur_ver_enq;
3253  
3254  		  IF NOT(vb_achou) THEN
3255  		    INSERT INTO exp_due_si_enq
3256  		    (
3257  		      due_si_enq_id
3258  		    , due_ship_item_id
3259  		    , enquadramento
3260  		    , creation_date
3261  		    , created_by
3262  		    , last_update_date
3263  		    , last_updated_by
3264  		    ) VALUES (
3265  			      cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
3266  			    , vn_due_ship_item_id
3267  			    , x.enquadramento_2
3268  			    , SYSDATE
3269  			    , pn_usuario_id
3270  			    , SYSDATE
3271  			    , pn_usuario_id
3272  			    );
3273  		  END IF;
3274  		END IF;
3275  
3276  		IF ( x.enquadramento_3 IS NOT NULL) THEN
3277  
3278  		  vb_achou := FALSE;
3279  		  OPEN	cur_ver_enq(vn_due_ship_item_id, x.enquadramento_3);
3280  		  FETCH cur_ver_enq INTO vn_due_si_enq_id;
3281  		  vb_achou := cur_ver_enq%FOUND;
3282  		  CLOSE cur_ver_enq;
3283  
3284  		  IF NOT(vb_achou) THEN
3285  		    INSERT INTO exp_due_si_enq
3286  		    (
3287  		      due_si_enq_id
3288  		    , due_ship_item_id
3289  		    , enquadramento
3290  		    , creation_date
3291  		    , created_by
3292  		    , last_update_date
3293  		    , last_updated_by
3294  		    ) VALUES (
3295  			      cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
3296  			    , vn_due_ship_item_id
3297  			    , x.enquadramento_3
3298  			    , SYSDATE
3299  			    , pn_usuario_id
3300  			    , SYSDATE
3301  			    , pn_usuario_id
3302  			    );
3303  		  END IF;
3304  		END IF;
3305  
3306  		IF ( x.enquadramento_4 IS NOT NULL) THEN
3307  
3308  		  vb_achou := FALSE;
3309  		  OPEN	cur_ver_enq(vn_due_ship_item_id, x.enquadramento_4);
3310  		  FETCH cur_ver_enq INTO vn_due_si_enq_id;
3311  		  vb_achou := cur_ver_enq%FOUND;
3312  		  CLOSE cur_ver_enq;
3313  
3314  		  IF NOT(vb_achou) THEN
3315  
3316  		    INSERT INTO exp_due_si_enq
3317  		    (
3318  		      due_si_enq_id
3319  		    , due_ship_item_id
3320  		    , enquadramento
3321  		    , creation_date
3322  		    , created_by
3323  		    , last_update_date
3324  		    , last_updated_by
3325  		    ) VALUES (
3326  			      cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
3327  			    , vn_due_ship_item_id
3328  			    , x.enquadramento_4
3329  			    , SYSDATE
3330  			    , pn_usuario_id
3331  			    , SYSDATE
3332  			    , pn_usuario_id
3333  			    );
3334  		  END IF;
3335  		END IF;
3336  	      END IF; --vb_enq_ato
3337  
3338  	      FOR attr IN cur_atrib_ativo(x.ncm_codigo) LOOP
3339  		vc_destaque   := NULL;
3340  
3341  		IF(attr.formula IS NOT NULL) THEN
3342  		  prc_busca_atributo_ncm( pn_due_id
3343  					, vn_due_ship_item_id
3344  					, x.ncm_codigo
3345  					, attr.ncm_atributo_id
3346  					, attr.formula
3347  					, vc_destaque
3348  					);
3349  		END IF;
3350  
3351  		IF(attr.nomeapresentacao  = 'DESTAQUE' AND vc_destaque IS NULL) THEN
3352  		  vc_destaque := x.destaque_ncm;
3353  		END IF;
3354  
3355  		-- EX0033
3356  		INSERT INTO exp_due_si_char
3357  		(
3358  		  due_si_char_id
3359  		, due_ship_item_id
3360  		, typecode
3361  		, description
3362  		, creation_date
3363  		, created_by
3364  		, last_update_date
3365  		, last_updated_by
3366  		) VALUES (
3367  			    cmx_fnc_proxima_sequencia('exp_due_si_char_sq1')
3368  			 , vn_due_ship_item_id
3369  			 , attr.codigo	--x.destaque_ncm_type
3370  			 , vc_destaque
3371  			 , SYSDATE
3372  			 , pn_usuario_id
3373  			 , SYSDATE
3374  			 , pn_usuario_id
3375  			 );
3376  	      END LOOP;
3377  
3378  /*      IF(x.destaque_ncm IS NOT NULL) THEN
3379  		vc_atrib_code := NULL;
3380  		-- EX0033
3381  		OPEN cur_atrib(x.ncm_codigo, x.destaque_ncm);
3382  		FETCH cur_atrib INTO vc_atrib_code;
3383  		CLOSE cur_atrib;
3384  
3385  		INSERT INTO exp_due_si_char
3386  		(
3387  		  due_si_char_id
3388  		, due_ship_item_id
3389  		, typecode
3390  		, description
3391  		, creation_date
3392  		, created_by
3393  		, last_update_date
3394  		, last_updated_by
3395  		) VALUES (
3396  			   cmx_fnc_proxima_sequencia('exp_due_si_char_sq1')
3397  			 , vn_due_ship_item_id
3398  			 , vc_atrib_code  --x.destaque_ncm_type
3399  			 , x.destaque_ncm
3400  			 , SYSDATE
3401  			 , pn_usuario_id
3402  			 , SYSDATE
3403  			 , pn_usuario_id
3404  			 );
3405  	      ELSE
3406  		IF vc_atrib_code IS NOT NULL THEN
3407  		  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Destaque da NCM não preenchido, verifique os destaques. NCM @@1@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_049',null,x.ncm_codigo),'E');
3408  		END IF;
3409  	      END IF;*/
3410  
3411  	      IF (x.prazo_exp_tmp IS NOT NULL) THEN
3412  		INSERT INTO exp_due_gs_item_add_info
3413  		(
3414  		  due_gsi_add_info_id
3415  		, due_ship_item_id
3416  		, statementcode
3417  		, statementdescription
3418  		, limitdatetime
3419  		, statementtypecode
3420  		, creation_date
3421  		, created_by
3422  		, last_update_date
3423  		, last_updated_by
3424  		) VALUES (
3425  			   cmx_fnc_proxima_sequencia('exp_due_gsi_add_info_sq1')
3426  			 , vn_due_ship_item_id
3427  			 , NULL --x.prio_carga
3428  			 , SubStr(x.doc_exp_temp,1 , 4000)  --statementdescription
3429  			 , x.prazo_exp_tmp --limitdatetime
3430  			 , x.prazo_exp_tmp_type
3431  			 , SYSDATE
3432  			 , pn_usuario_id
3433  			 , SYSDATE
3434  			 , pn_usuario_id
3435  			 );
3436  	      END IF;
3437  
3438  	      IF (x.prio_carga IS NOT NULL) THEN
3439  		INSERT INTO exp_due_gs_item_add_info
3440  		(
3441  		  due_gsi_add_info_id
3442  		, due_ship_item_id
3443  		, statementcode
3444  		, statementdescription
3445  		, limitdatetime
3446  		, statementtypecode
3447  		, creation_date
3448  		, created_by
3449  		, last_update_date
3450  		, last_updated_by
3451  		) VALUES (
3452  			   cmx_fnc_proxima_sequencia('exp_due_gsi_add_info_sq1')
3453  			 , vn_due_ship_item_id
3454  			 , x.prio_carga
3455  			 , NULL --statementdescription
3456  			 , NULL --limitdatetime
3457  			 , x.prio_carga_type
3458  			 , SYSDATE
3459  			 , pn_usuario_id
3460  			 , SYSDATE
3461  			 , pn_usuario_id
3462  			 );
3463  	      END IF;
3464  
3465  	      /*
3466  	      Drawback Suspensão
3467  
3468  	      EX0075 ItemID
3469  	      EX0076 QuantityQuantity
3470  	      EX0077 ValueWithExchangeCoverAmount
3471  	      EX0078 ValueWithoutExchangeCoverAmount
3472  	      EX0083 DrawbackHsClassification
3473  	      EX0084 DrawbackRecipientId
3474  	      */
3475  	      p_prc_inserir_ato( x.fatura_item_detalhe_ato_id
3476  			       , x.fatura_item_ato_id
3477  			       , vn_due_ship_item_id
3478  			       , pn_usuario_id
3479  			       , x.fatura_id
3480  			       , x.fatura_item_id
3481  			       , x.fatura_item_detalhe_id
3482  			       , NULL
3483  			       , vn_qtde_estatistica
3484  			       , 'I'
3485  			       );
3486  
3487  	      OPEN cur_enq_sem_di(vn_due_ship_item_id);
3488  	      FETCH cur_enq_sem_di INTO vc_enq_sem_di;
3489  	      CLOSE cur_enq_sem_di;
3490  
3491  	      IF Upper(Nvl(vc_enq_sem_di,'S')) = 'S' THEN
3492  		FOR adoc IN cur_adoc_di(x.fatura_item_id)
3493  		LOOP
3494  		  vn_due_si_adoc_id := cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1');
3495  		  INSERT INTO exp_due_si_adoc
3496  		  (
3497  		    due_si_adoc_id
3498  		  , due_ship_item_id
3499  		  , identification
3500  		  , category
3501  		  , itemid
3502  		  , quantity
3503  		  , creation_date
3504  		  , created_by
3505  		  , last_update_date
3506  		  , last_updated_by
3507  		  ) VALUES (
3508  			     vn_due_si_adoc_id
3509  			   , vn_due_ship_item_id
3510  			   , adoc.nr_declaracao
3511  			   , exp_pkg_due.fnc_ind_due(Decode(Nvl(adoc.dsi,'N')
3512  							   , 'N', 'EX0024_DI'
3513  							   , 'S', 'EX0024_DSI') ,'L', x.fatura_id, NULL , x.fatura_item_id)
3514  			   , adoc.adicao_num
3515  			   , vn_qtde_estatistica
3516  			   , SYSDATE
3517  			   , pn_usuario_id
3518  			   , SYSDATE
3519  			   , pn_usuario_id
3520  			   );
3521  
3522  		  FOR proc_adm IN cur_proc_adm(adoc.declaracao_adi_id)
3523  		  LOOP
3524  		    INSERT INTO exp_due_si_adoc_add_info
3525  		    (
3526  		      due_gs_add_info_id
3527  		    , due_si_adoc_id
3528  		    , statementtypecode
3529  		    , statementdescription
3530  		    , creation_date
3531  		    , created_by
3532  		    , last_update_date
3533  		    , last_updated_by
3534  		    ) VALUES (
3535  			     cmx_fnc_proxima_Sequencia('exp_due_si_adoc_add_info_sq1')
3536  			     , vn_due_si_adoc_id
3537  			     , 'ABC'
3538  			     , proc_adm.processo_numero
3539  			     , SYSDATE
3540  			     , pn_usuario_id
3541  			     , SYSDATE
3542  			     , pn_usuario_id
3543  			     );
3544  		  END LOOP;
3545  
3546  
3547  		END LOOP;
3548  	      END IF;
3549  
3550  	      FOR nf_r IN cur_nf_det_rem(x.fatura_det_nf_id)
3551  	      LOOP
3552  
3553  		IF (nf_r.invoiceIdentificationid IS NOT NULL) THEN
3554  
3555  		  INSERT INTO exp_due_si_ref_ivcl
3556  		  (
3557  		    due_si_ref_ivcl_id
3558  		  , due_si_ref_ivc_id
3559  		  , due_ship_item_id
3560  		  , sequencenumeric
3561  		  , invoiceidentificationid
3562  		  , gm_tariffquantity
3563  		  , creation_date
3564  		  , created_by
3565  		  , last_update_date
3566  		  , last_updated_by
3567  		  ) VALUES (
3568  			     cmx_fnc_proxima_sequencia('exp_due_si_ref_ivcl_sq1')
3569  			   , nf_r.due_si_ref_ivc_id
3570  			   , vn_due_ship_item_id
3571  			   , nf_r.sequencenumeric
3572  			   , nf_r.invoiceidentificationid
3573  			   , nf_r.gm_tariffquantity
3574  			   , SYSDATE
3575  			   , pn_usuario_id
3576  			   , SYSDATE
3577  			   , pn_usuario_id
3578  			   );
3579  		END IF;
3580  
3581  	      END LOOP;
3582  
3583  	      /*EX0073 e EX0074 -> TIPO = 149*/
3584  	      vn_per_comissao := 0;
3585  	      --OPEN  cur_comissao_repre(x.fatura_item_id);
3586  	      --FETCH cur_comissao_repre INTO vn_per_comissao;
3587  	      --CLOSE cur_comissao_repre;
3588  	      vn_per_comissao := fnc_vlr_comissao(x.fatura_item_id, vr_fat_item_info.ncm_id);
3589  
3590  	      IF(Nvl(vn_per_comissao,0) > 0) THEN
3591  		INSERT INTO exp_due_ship_item_adj( due_si_adj_id
3592  						 , due_ship_item_id
3593  						 , additioncode
3594  						 , percentage
3595  						 , creation_date
3596  						 , created_by
3597  						 , last_update_date
3598  						 , last_updated_by
3599  						 )
3600  					  VALUES ( cmx_fnc_proxima_sequencia('exp_due_ship_item_adj_sq1')
3601  						 , vn_due_ship_item_id
3602  						 , '149'
3603  						 , vn_per_comissao
3604  						 , SYSDATE
3605  						 , pn_usuario_id
3606  						 , SYSDATE
3607  						 , pn_usuario_id
3608  						 );
3609  	      END IF;
3610  
3611  	    ELSE
3612  
3613  	       FOR nf_r IN cur_nf_det_rem(x.fatura_det_nf_id) LOOP
3614  
3615  		   IF (nf_r.invoiceIdentificationid IS NOT NULL) THEN
3616  
3617  			vb_achou := FALSE;
3618  			--Verifica se já existe
3619  			OPEN  cur_nf_due_remessa( vn_due_ship_item_id
3620  						, nf_r.due_si_ref_ivc_id
3621  						, nf_r.invoiceidentificationid
3622  						, nf_r.sequencenumeric
3623  						);
3624  			FETCH cur_nf_due_remessa INTO vn_due_si_ref_ivcl_id;
3625  			vb_achou := cur_nf_due_remessa%FOUND;
3626  			CLOSE cur_nf_due_remessa;
3627  
3628  			IF NOT(vb_achou) THEN
3629  
3630  			  INSERT INTO exp_due_si_ref_ivcl
3631  			  (
3632  			    due_si_ref_ivcl_id
3633  			  , due_si_ref_ivc_id
3634  			  , due_ship_item_id
3635  			  , sequencenumeric
3636  			  , invoiceidentificationid
3637  			  , gm_tariffquantity
3638  			  , creation_date
3639  			  , created_by
3640  			  , last_update_date
3641  			  , last_updated_by
3642  			  ) VALUES (
3643  				    cmx_fnc_proxima_sequencia('exp_due_si_ref_ivcl_sq1')
3644  				  , nf_r.due_si_ref_ivc_id
3645  				  , vn_due_ship_item_id
3646  				  , nf_r.sequencenumeric
3647  				  , nf_r.invoiceidentificationid
3648  				  , nf_r.gm_tariffquantity
3649  				  , SYSDATE
3650  				  , pn_usuario_id
3651  				  , SYSDATE
3652  				  , pn_usuario_id
3653  				  );
3654  		      ELSE
3655  
3656  			IF(Nvl(nf_r.gm_tariffquantity,0) > 0) THEN
3657  			  UPDATE exp_due_si_ref_ivcl SET gm_tariffquantity = Nvl(gm_tariffquantity,0) + Nvl(nf_r.gm_tariffquantity,0)
3658  						  WHERE due_si_ref_ivcl_id = vn_due_si_ref_ivcl_id;
3659  			END IF;
3660  
3661  		      END IF;
3662  
3663  		  END IF;
3664  
3665  		END LOOP ;
3666  
3667  	    END IF;
3668  
3669  	    /*Vincula a due com a nota do detalhe do item*/
3670  	    IF(x.fatura_det_nf_id IS NOT NULL) THEN
3671  	      UPDATE exp_fatura_item_det_nf SET numero_nf	 = x.nf_numero
3672  					      , serie_nf	 = x.nf_serie
3673  					      , qtde_estatistica = vn_qtde_estatistica
3674  					      , due_ship_item_id = vn_due_ship_item_id
3675  					      , valor_18b	 = vn_valor_fob
3676  					      , valor_18a	 = vn_valor_vcv_mn
3677  					      , last_update_date = SYSDATE
3678  					      , last_updated_by  = pn_usuario_id
3679  					      , fatura_nf_id	 = pn_fatura_nf_id
3680  					      , nf_nr_linha	 = x.nf_nr_linha_due
3681  					  WHERE fatura_det_nf_id = x.fatura_det_nf_id;
3682  	    ELSE
3683  
3684  	      INSERT INTO exp_fatura_item_det_nf  ( fatura_det_nf_id
3685  																					  , fatura_nf_id
3686  																					  , fatura_item_detalhe_id
3687  																					  , fatura_item_detalhe_ato_id
3688  																					  , quantidade_nf
3689  																					  , valor_18b
3690  						  , valor_18a
3691  																					  , peso_liquido
3692  																					  , nf_nr_linha
3693  																					  , numero_nf
3694  																					  , serie_nf
3695  						  , qtde_estatistica
3696  						  , creation_date
3697  						  , created_by
3698  						  , last_update_date
3699  						  , last_updated_by
3700  								    , due_ship_item_id
3701  						  )
3702  							    VALUES ( cmx_fnc_proxima_sequencia('exp_fatura_item_det_nf_sq1')
3703  								    , pn_fatura_nf_id
3704  								    , x.fatura_item_detalhe_id
3705  								    , x.fatura_item_detalhe_ato_id
3706  								    , x.quantidade_nf
3707  								    , vn_valor_fob
3708  						  , vn_valor_vcv_mn
3709  								    , vn_peso_liquido
3710  								    , x.nf_nr_linha_due
3711  								    , x.nf_numero
3712  								    , x.nf_serie
3713  						  , vn_qtde_estatistica
3714  						  , SYSDATE
3715  						  , pn_usuario_id
3716  						  , SYSDATE
3717  						  , pn_usuario_id
3718  						  , vn_due_ship_item_id
3719  								    );
3720  	    END IF;
3721  
3722  	    --REEXPORTAÇÃO RECOF
3723  	    --vc_typecode := exp_pkg_due.fnc_ind_due('EX0018_DI' ,'L', x.fatura_id, NULL , x.fatura_item_id);
3724  	    IF Upper(Nvl(vc_enq_sem_di,'S')) = 'S' THEN
3725  
3726  	      FOR adoc IN cur_adoc_recof(x.fatura_item_detalhe_id)
3727  		LOOP
3728  		vn_due_si_adoc_id :=  cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1');
3729  
3730  		INSERT INTO exp_due_si_adoc
3731  		(
3732  		  due_si_adoc_id
3733  		, due_ship_item_id
3734  		, identification
3735  		, category
3736  		, itemid
3737  		, quantity
3738  		, creation_date
3739  		, created_by
3740  		, last_update_date
3741  		, last_updated_by
3742  		) VALUES (
3743  			   vn_due_si_adoc_id
3744  			 , vn_due_ship_item_id
3745  			 , adoc.nr_declaracao
3746  			 , exp_pkg_due.fnc_ind_due(Decode(Nvl(adoc.dsi,'N')
3747  							   , 'N', 'EX0024_DI'
3748  							   , 'S', 'EX0024_DSI') ,'L', x.fatura_id, NULL , x.fatura_item_id)
3749  			 , adoc.adicao_num
3750  			 , Nvl(  adoc.qtde_consumo , vn_qtde_estatistica )
3751  			 , SYSDATE
3752  			 , pn_usuario_id
3753  			 , SYSDATE
3754  			 , pn_usuario_id
3755  			 );
3756  
3757  		FOR proc_adm IN cur_rcf_proc_adm(adoc.nr_declaracao, adoc.adicao_num)
3758  		LOOP
3759  		  INSERT INTO exp_due_si_adoc_add_info
3760  		  (
3761  		    due_gs_add_info_id
3762  		  , due_si_adoc_id
3763  		  , statementtypecode
3764  		  , statementdescription
3765  		  , creation_date
3766  		  , created_by
3767  		  , last_update_date
3768  		  , last_updated_by
3769  		  ) VALUES (
3770  			    cmx_fnc_proxima_Sequencia('exp_due_si_adoc_add_info_sq1')
3771  			    , vn_due_si_adoc_id
3772  			    , 'ABC'
3773  			    , proc_adm.processo_numero
3774  			    , SYSDATE
3775  			    , pn_usuario_id
3776  			    , SYSDATE
3777  			    , pn_usuario_id
3778  			    );
3779  		END LOOP;
3780  
3781  	      END LOOP;
3782  	    END IF;
3783  
3784  	    --Drawback Isenção
3785  	    IF(x.fatura_det_nf_id IS NOT NULL) THEN
3786  	      p_prc_inserir_ato_isencao ( vn_due_ship_item_id
3787  					, x.fatura_det_nf_id
3788  					, pn_usuario_id
3789  					);
3790  	    END IF;
3791  
3792  	    vn_item_id_ant := vr_fat_item_info.item_id;
3793  	  END LOOP;
3794  	END prc_gs_i_nf;
3795  
3796  	PROCEDURE prc_gs_i_snf( pn_due_id      NUMBER
3797  			      , pn_due_ship_id NUMBER
3798  			      , pn_fatura_id   NUMBER
3799  			      , pn_usuario_id  NUMBER
3800  			      , pn_itens_due   IN OUT NUMBER
3801  			      )
3802  	AS
3803  
3804  	  CURSOR cur_i_snf
3805  	      IS
3806  	  SELECT fatura_id
3807  	       , fatura_item_id
3808  	       , Sum(valor_fob) valor_fob
3809  	       , descricao
3810  	       , exp_pkg_due.fnc_ind_due('EX0020' ,'L'	    , fatura_id, NULL, fatura_item_id)				     descricao_comercial
3811  	       , exp_pkg_due.fnc_ind_due('EX0021' ,'L'	    , fatura_id, NULL, fatura_item_id)				     ncm
3812  	       , exp_pkg_due.fnc_ind_due('EX0022' ,'L'	    , fatura_id, NULL, fatura_item_id)				     ncm_type
3813  	       , Sum(valor_vcv_mn) valor_vcv_mn
3814  	       , Sum(peso_liquido) peso_liquido
3815  	       , Sum(qtde_un_est) qtde_un_est
3816  	       , Sum(qtde_un_com) qtde_un_com
3817  	       , Sum(valor_financiamento) valor_financiamento
3818  	       , exp_pkg_due.fnc_ind_due('EX0049' ,'L', fatura_id, NULL, fatura_item_id)				     pais_destino
3819  	       , enquadramento_1
3820  	       , enquadramento_2
3821  	       , enquadramento_3
3822  	       , enquadramento_4
3823  	       , exp_pkg_due.fnc_ind_due('EX0014' ,'L', fatura_id, NULL, fatura_item_id)				     codigo_produto
3824  	       , exp_pkg_due.fnc_ind_due('EX0015' ,'L', fatura_id, NULL, fatura_item_id)				     codigo_produto_type
3825  	       , exp_pkg_due.fnc_ind_due('EX0027_PRIO_CARGA' ,'L', fatura_id, NULL, fatura_item_id)			     prio_carga_type
3826  	       , exp_pkg_due.fnc_ind_due('EX0027_PRAZO_TEMP' ,'L', fatura_id, NULL, fatura_item_id)			     prazo_exp_tmp_type
3827  	       , exp_pkg_due.fnc_ind_due('EX0035' ,'L', fatura_id, NULL, fatura_item_id)				     prio_carga
3828  	       , exp_pkg_due.fnc_ind_due('EX0028_TEMP' ,'L', fatura_id, NULL, fatura_item_id)				     doc_exp_temp
3829  	       , exp_pkg_due.fnc_ind_due('EX0026' ,'L', fatura_id, NULL, fatura_item_id)				     prazo_exp_tmp
3830  	       , exp_pkg_due.fnc_ind_due('EX0034' ,'L', fatura_id, NULL, fatura_item_id)				     destaque_ncm
3831  	       , exp_pkg_due.fnc_ind_due('EX0056' ,'L', fatura_id, NULL, fatura_item_id)				     crit_typecode
3832  	       , exp_pkg_due.fnc_ind_due('EX0057' ,'L', fatura_id, NULL, fatura_item_id)				     crit_description
3833  	       , exp_pkg_due.fnc_ind_due('EX0094' ,'L', fatura_id, NULL, fatura_item_id)				     crit_quantidade
3834  	       , exp_pkg_due.fnc_ind_due('EX0070_EST' ,'L', fatura_id, NULL, fatura_item_id)				     cod_un_est
3835  	       , exp_pkg_due.fnc_ind_due('EX0070_COM' ,'L', fatura_id, NULL, fatura_item_id)				     cod_un_com
3836  	       , exp_pkg_due.fnc_ind_due('EX0071' ,'L', fatura_id, NULL, fatura_item_id)				     descr_un_com
3837  	       , un_venda_id
3838  	    FROM (SELECT efi.fatura_id
3839  		       , efi.fatura_item_id
3840  		       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_1' ,'L', fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      enquadramento_1
3841  		       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_2' ,'L', fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      enquadramento_2
3842  		       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_3' ,'L', fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      enquadramento_3
3843  		       , exp_pkg_due.fnc_ind_due('EX0032_ENQ_4' ,'L', fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      enquadramento_4
3844  		       , exp_pkg_due.fnc_ind_due('EX0019' ,'L'	, efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      descricao
3845  		       , exp_pkg_due.fnc_ind_due('EX0030' ,'D'	, efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      valor_fob
3846  		       , exp_pkg_due.fnc_ind_due('EX0031' ,'D'	, efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      valor_vcv_mn
3847  		       , exp_pkg_due.fnc_ind_due('EX0090' ,'D'	, efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      valor_financiamento
3848  		       , exp_pkg_due.fnc_ind_due('EX0025' ,'D'	, efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)      peso_liquido
3849  		       , exp_pkg_due.fnc_ind_due('EX0029_EST' ,'D'  , efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)  qtde_un_est
3850  		       , exp_pkg_due.fnc_ind_due('EX0029_COM' ,'D'  , efi.fatura_id, NULL, efi.fatura_item_id, efid.fatura_item_detalhe_id)  qtde_un_com
3851  		       -- , exp_pkg_due.fnc_ind_due('EX0027_ADM_DOSS_TMP' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)			adm_dossie_tmp_type
3852  		       -- , exp_pkg_due.fnc_ind_due('EX0028' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)					adm_dossie_tmp
3853  		       -- , exp_pkg_due.fnc_ind_due('EX0024' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)					categoria_nrACDrw
3854  		       -- , exp_pkg_due.fnc_ind_due('EX0023' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)					nrACDrw
3855  		       -- , exp_pkg_due.fnc_ind_due('EX0033' ,'L', efi.fatura_id, NULL, efi.fatura_item_id)					destaque_ncm_type
3856  		       , exp_pkg_informacoes.fnc_complemento_id( cmx_pkg_tabelas.tabela_id('201','UNIDADE_VENDA')
3857  													, NULL
3858  													, efi.fatura_id
3859  													, efi.fatura_item_id
3860  													, efid.fatura_item_detalhe_id
3861  													) un_venda_id
3862  		    FROM exp_fatura_itens	  efi
3863  		       , exp_fatura_item_detalhes efid
3864  		   WHERE efid.fatura_item_id = efi.fatura_item_id
3865  		    --AND efid.nf_numero      IS NULL
3866  		    --AND efid.nf_serie       IS NULL
3867  		     AND efi.fatura_id	  = pn_fatura_id
3868  		 ) tbl
3869  	GROUP BY fatura_id
3870  	       , fatura_item_id
3871  	       , descricao
3872  	       , un_venda_id
3873  	       , enquadramento_1
3874  	       , enquadramento_2
3875  	       , enquadramento_3
3876  	       , enquadramento_4;
3877  
3878  --  CURSOR cur_atos(pn_fatura_item_id NUMBER)
3879  --      IS
3880  --  SELECT DISTINCT efia.numero
3881  --    FROM exp_vw_fatura_item_atos efia
3882  --   WHERE efia.fatura_item_id = pn_fatura_item_id
3883  --     AND efia.numero IS NOT NULL;
3884  
3885  	  CURSOR cur_atos(pn_fatura_item_id NUMBER)
3886  	      IS
3887  	  SELECT efia.numero
3888  	       , efia.nr_item_drawback
3889  	       , Sum(Nvl(nullif(efida.quantidade_re,0), efida.quantidade_drw))	     quantidade
3890  	       --, Sum(Nvl(nullif(efidna.qtde_estatistica,0), efida.quantidade_drw))  quantidade
3891  	       , Sum(efida.valor18b)	    valor
3892  	       , efia.ncm
3893  	       , efia.cnpj
3894  	    FROM exp_vw_fatura_item_atos	efia
3895  	       , exp_fatura_item_detalhe_atos	efida
3896  	       --, exp_vw_fatura_item_det_nf_ato  efidna
3897  	   WHERE efia.fatura_item_ato_id	  = efida.fatura_item_ato_id
3898  	     --AND efida.fatura_item_detalhe_ato_id = efidna.fatura_item_detalhe_ato_id
3899  	     AND efia.fatura_item_id		  = pn_fatura_item_id
3900  	     AND efia.numero IS NOT NULL
3901  	GROUP BY efia.numero
3902  	       , efia.nr_item_drawback
3903  	       , efia.ncm
3904  	       , efia.cnpj
3905  	       , efida.fatura_item_ato_id;
3906  
3907  	  CURSOR cur_adoc_di(pn_fatura_item_id NUMBER)
3908  	      IS
3909  	  SELECT efid.nr_declaracao
3910  	       , ida.adicao_num
3911  	       , efid.dsi
3912  	       , ida.declaracao_adi_id
3913  	    FROM exp_vw_fatura_item_decs efid
3914  	       , imp_declaracoes_lin	 idl
3915  	       , imp_declaracoes_adi	 ida
3916  	   WHERE efid.fatura_item_id = pn_fatura_item_id
3917  	     AND idl.declaracao_lin_id	= efid.declaracao_lin_id
3918  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
3919  	     AND efid.nr_declaracao IS NOT NULL
3920  	   UNION
3921  	  SELECT efiea.nr_declaracao
3922  	       , ida.adicao_num
3923  	       , idc.dsi
3924  	       , ida.declaracao_adi_id
3925  	    FROM exp_vw_fatura_item_entr_adua efiea
3926  	       , imp_declaracoes_lin	 idl
3927  	       , imp_declaracoes_adi	 ida
3928  	       , imp_declaracoes	 idc
3929  	   WHERE efiea.fatura_item_id = pn_fatura_item_id
3930  	     AND idl.declaracao_lin_id	= efiea.declaracao_lin_id
3931  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
3932  	     AND idl.declaracao_id	= idc.declaracao_id
3933  	     AND efiea.nr_declaracao IS NOT NULL
3934  	   UNION
3935  	  SELECT DISTINCT id.nr_declaracao
3936  	       , ida.adicao_num
3937  	       , id.dsi
3938  	       , ida.declaracao_adi_id
3939  	    FROM exp_vw_fatura_item_tr_garantia efitg
3940  	       , imp_declaracoes_lin		idl
3941  	       , imp_declaracoes		id
3942  	       , imp_declaracoes_adi	 ida
3943  	   WHERE efitg.declaracao_lin_id = idl.declaracao_lin_id
3944  	     AND idl.declaracao_id	 = id.declaracao_id
3945  	     AND idl.declaracao_adi_id	= ida.declaracao_adi_id
3946  	     AND id.nr_declaracao IS NOT NULL
3947  	     AND efitg.fatura_item_id	 = pn_fatura_item_id
3948  	 /*UNION
3949  	SELECT DISTINCT id.nr_declaracao
3950  	  FROM exp_vw_fat_item_embalagem_ret efitg
3951  	     , imp_declaracoes_lin	      idl
3952  	     , imp_declaracoes		      id
3953  	 WHERE efitg.invoice_lin_id = idl.invoice_lin_id
3954  	   AND idl.declaracao_id       = id.declaracao_id
3955  	   AND id.nr_declaracao IS NOT NULL
3956  	   AND efitg.fatura_item_id    = pn_fatura_item_id*/;
3957  
3958  	CURSOR cur_proc_adm(pn_declaracao_adi_id NUMBER)
3959  	IS
3960  	SELECT to_char(rcr.processo_numero) processo_numero
3961  	  FROM imp_adm_temp_rcr_lin rcr_lin
3962  	     , imp_adm_temp_rcr     rcr
3963  	     , imp_declaracoes_lin  idl
3964  	 WHERE rcr_lin.invoice_lin_id  = idl.invoice_lin_id
3965  	   AND rcr_lin.rcr_id	       = rcr.rcr_id
3966  	   AND rcr.processo_numero    IS NOT NULL
3967  	   AND idl.declaracao_adi_id  = pn_declaracao_adi_id
3968  	UNION
3969   SELECT to_char(rat.processo_numero) processo_numero
3970  	 FROM imp_adm_temp_rat_lin rat_lin
3971  	    , imp_adm_temp_rat	   rat
3972  	    , imp_declaracoes_lin  idl
3973  	WHERE rat_lin.invoice_lin_id  = idl.invoice_lin_id
3974  	  AND rat_lin.rat_id	      = rat.rat_id
3975  	  AND rat.processo_numero IS NOT NULL
3976  	  AND idl.declaracao_adi_id  = pn_declaracao_adi_id;
3977  
3978  
3979  	CURSOR cur_atrib(pc_ncm VARCHAR2, pc_destaque VARCHAR2)
3980  	    IS
3981  	SELECT etna.codigo
3982  	  FROM cmx_tab_ncm_atributos  etna
3983  	     , cmx_tab_ncm_atr_compl  etnac
3984  	 WHERE etna.ncm_atributo_id = etnac.ncm_atributo_id
3985  	   AND etnac.tipo   = 'DO'
3986  	   AND etna.ncm     = pc_ncm
3987  	   AND etnac.codigo = pc_destaque;
3988  
3989  	CURSOR cur_comissao_repre(pn_fat_item_id NUMBER) IS
3990  	  SELECT Sum(percentual) percentual
3991  	    FROM exp_fatura_item_representantes
3992  	    WHERE fatura_item_id = pn_fat_item_id;
3993  
3994  	CURSOR cur_ato_enq(pn_fat_item_id NUMBER) IS
3995  	  SELECT cmx_pkg_tabelas.codigo(drd.enquadramento_id) enquadramento
3996  	    FROM exp_fatura_item_atos	efia
3997  	       , drw_registro_drawback	drd
3998  	   WHERE efia.rd_id = drd.rd_id
3999  	     AND drd.enquadramento_id IS NOT NULL
4000  	     AND efia.fatura_item_id = pn_fat_item_id;
4001  
4002  	CURSOR cur_atrib_ativo(pc_ncm VARCHAR2)
4003  	    IS
4004  	SELECT DISTINCT etna.codigo
4005  	      , etna.ncm_atributo_id
4006  	      , Nvl(etna.formula, tipo.formula) formula
4007  	      , Upper(tipo.nomeapresentacao)	nomeapresentacao
4008  	  FROM cmx_tab_ncm_atributos	    etna
4009  	     , cmx_tab_ncm_atributos_tipo   tipo
4010  	  WHERE etna.ncm_atr_tipo_id = tipo.ncm_atr_tipo_id
4011  	    AND etna.ncm	     = pc_ncm
4012  	    AND Nvl(etna.ativo, 'S') = 'S'
4013  	    AND etna.modalidade = 'EXPORTAÇÃO';
4014  
4015  	  CURSOR cur_fat_item_info(pn_fatura_item_id NUMBER)
4016  	      IS
4017  	  SELECT efi.item_id
4018  	       , efi.ncm_id
4019  	       , decode ( efi.codigo
4020  			, NULL
4021  			, efi.un_medida_id
4022  			, exp_pkg_pesquisa.un_medida_id ( efi.item_id
4023  							, efi.organizacao_id
4024  							)
4025  			)	    unidade_de_id
4026  	       , ctn.un_medida_id   unidade_para_id
4027  	    FROM exp_fatura_itens efi
4028  	       , cmx_tab_ncm	  ctn
4029  	   WHERE efi.ncm_id	     =	ctn.ncm_id (+)
4030  	     AND efi.fatura_item_id  =	pn_fatura_item_id;
4031  
4032  	  CURSOR cur_enq_sem_di(pn_due_ship_item_id NUMBER)
4033  	      IS
4034  	  SELECT Max(Upper(Nvl(ct.auxiliar6,'S'))) enq_sem_di
4035  	    FROM cmx_tabelas ct
4036  	       , exp_due_si_enq edie
4037  	   WHERE ct.codigo = edie.enquadramento
4038  	     AND edie.due_ship_item_id = pn_due_ship_item_id;
4039  
4040  	  CURSOR cur_ver_enq(pn_due_ship_item_id NUMBER, pc_enquadramento VARCHAR2)
4041  	      IS
4042  	  SELECT due_si_enq_id
4043  	    FROM exp_due_si_enq
4044  	   WHERE due_ship_item_id = pn_due_ship_item_id
4045  	     AND enquadramento = pc_enquadramento;
4046  
4047  	  vr_fat_item_info	cur_fat_item_info%ROWTYPE;
4048  	  vn_due_ship_item_id	NUMBER;
4049  	  vn_fatura_snf_item	NUMBER;
4050  	  vc_atrib_code 	VARCHAR2(150);
4051  	  vn_per_comissao	NUMBER;
4052  	  vc_enquadramento	VARCHAR2(20);
4053  	  vb_achou		BOOLEAN;
4054  	  vc_destaque		VARCHAR2(150);
4055  	  vn_qtde_estatistica	NUMBER;
4056  	  vn_due_si_adoc_id	NUMBER;
4057  	  vc_enq_sem_di 	VARCHAR2(1);
4058  	  vn_due_si_enq_id	NUMBER;
4059  	  vn_vlr_financiamento	NUMBER;
4060  	BEGIN
4061  	  FOR x IN cur_i_snf
4062  	  LOOP
4063  	    vn_fatura_snf_item := vn_fatura_snf_item +1;
4064  	    pn_itens_due := pn_itens_due + 1;
4065  
4066  	    --Quantidade estatistica
4067  	    OPEN cur_fat_item_info(x.fatura_item_id);
4068  	    FETCH cur_fat_item_info INTO vr_fat_item_info;
4069  	    CLOSE cur_fat_item_info;
4070  
4071  	    IF Nvl( x.qtde_un_est , 0 ) = 0 THEN
4072  
4073  	      BEGIN
4074  		vn_qtde_estatistica := cmx_pkg_itens.fnc_conv_qtde_um(
4075  							      nvl( x.un_venda_id
4076  								,  vr_fat_item_info.unidade_de_id
4077  								)
4078  							    , vr_fat_item_info.unidade_para_id
4079  							    , vr_fat_item_info.item_id
4080  							    , x.qtde_un_com
4081  							    , x.peso_liquido
4082  							    , vr_fat_item_info.ncm_id
4083  							    );
4084  	      EXCEPTION
4085  		WHEN OTHERS THEN
4086  		  vn_qtde_estatistica := 0;
4087  	      END;
4088  	    ELSE
4089  		vn_qtde_estatistica :=	x.qtde_un_est ;
4090  	    END IF ;
4091  
4092  	    IF( Nvl(x.valor_financiamento,0) > 0 AND
4093  		( (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_1,'-99999')),7),'N') = 'S') OR
4094  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_2,'-99999')),7),'N') = 'S') OR
4095  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_3,'-99999')),7),'N') = 'S') OR
4096  		  (Nvl(cmx_pkg_tabelas.auxiliar(cmx_pkg_tabelas.tabela_id('211', Nvl(x.enquadramento_4,'-99999')),7),'N') = 'S')
4097  		)
4098  	      ) THEN
4099  	      vn_vlr_financiamento := x.valor_financiamento;
4100  	    ELSE
4101  	      vn_vlr_financiamento := NULL;
4102  	    END IF;
4103  
4104  	    -- SEM NF
4105  	    vn_due_ship_item_id := cmx_fnc_proxima_sequencia('exp_due_ship_item_sq1');
4106  	    INSERT INTO exp_due_ship_item
4107  	    (
4108  	      due_id
4109  	    , due_ship_id
4110  	    , due_ship_item_id
4111  	    , customsvalue
4112  	    , sequence
4113  	    , cmmdty_description
4114  	    , cmmdty_value
4115  	    , cmmdty_commercial_descr
4116  	    , cmmdty_line_sequence
4117  	    , cmmdty_gs_netweight
4118  	    , cmmdty_gs_tariff
4119  	    , cmmdty_gs_cod_com
4120  	    , cmmdty_gs_umed_com
4121  	    , cmmdty_gs_cod_est
4122  	    , cmmdty_gs_tariff_est
4123  	    , ncm
4124  	    , creation_date
4125  	    , created_by
4126  	    , last_update_date
4127  	    , last_updated_by
4128  	    , financedvalue
4129  	    , fatura_item_temp_id
4130  	    ) VALUES (
4131  		       pn_due_id
4132  		     , pn_due_ship_id
4133  		     , vn_due_ship_item_id
4134  		     , x.valor_fob
4135  		     , pn_itens_due
4136  		     , SubStr(x.descricao, 1, 4000)
4137  		     , x.valor_vcv_mn
4138  		     , SubStr(x.descricao_comercial, 1, 256)
4139  		     , vn_fatura_snf_item
4140  		     , x.peso_liquido
4141  		     , x.qtde_un_com
4142  		     , x.cod_un_com
4143  		     , x.descr_un_com
4144  		     , x.cod_un_est
4145  		     , vn_qtde_estatistica -- x.qtde_un_est
4146  		     , x.ncm
4147  		     , SYSDATE
4148  		     , pn_usuario_id
4149  		     , SYSDATE
4150  		     , pn_usuario_id
4151  		     , vn_vlr_financiamento
4152  		     , x.fatura_item_id
4153  		     );
4154  
4155  	    INSERT INTO exp_due_si_dest
4156  	    (
4157  	      due_si_dest_id
4158  	    , due_ship_item_id
4159  	    , countrycode
4160  	    , gm_tariffquantity
4161  	    , creation_date
4162  	    , created_by
4163  	    , last_update_date
4164  	    , last_updated_by
4165  	    ) VALUES (
4166  			cmx_fnc_proxima_sequencia('exp_due_si_dest_sq1')
4167  		      , vn_due_ship_item_id
4168  		      , x.pais_destino
4169  		      , vn_qtde_estatistica --x.qtde_un_est
4170  		      , SYSDATE
4171  		      , pn_usuario_id
4172  		      , SYSDATE
4173  		      , pn_usuario_id
4174  		     );
4175  
4176  
4177  	    IF x.codigo_produto IS NOT NULL THEN
4178  	      INSERT INTO  exp_due_si_prod
4179  	      (
4180  		due_si_prod_id
4181  	      , due_ship_item_id
4182  	      , identification
4183  	      , identifiertypecode
4184  	      , creation_date
4185  	      , created_by
4186  	      , last_update_date
4187  	      , last_updated_by
4188  	      ) VALUES (
4189  			 cmx_fnc_proxima_sequencia('exp_due_si_prod_sq1')
4190  		       , vn_due_ship_item_id
4191  		       , x.codigo_produto
4192  		       , x.codigo_produto_type
4193  		       , SYSDATE
4194  		       , pn_usuario_id
4195  		       , SYSDATE
4196  		       , pn_usuario_id
4197  		       );
4198  	    END IF;
4199  
4200  	    IF x.crit_typecode IS NOT NULL THEN
4201  	      INSERT INTO  exp_due_si_crit
4202  	      (
4203  		due_si_crit_id
4204  	      , due_ship_item_id
4205  	      , description
4206  	      , typecode
4207  	      , creation_date
4208  	      , created_by
4209  	      , last_update_date
4210  	      , last_updated_by
4211  	      , quantityquantity
4212  	      ) VALUES (
4213  			 cmx_fnc_proxima_sequencia('exp_due_si_crit_sq1')
4214  		       , vn_due_ship_item_id
4215  		       , x.crit_description
4216  		       , x.crit_typecode
4217  		       , SYSDATE
4218  		       , pn_usuario_id
4219  		       , SYSDATE
4220  		       , pn_usuario_id
4221  		       , x.crit_quantidade
4222  		       );
4223  	    END IF;
4224  
4225  
4226  --      vc_enq_sem_di := NULL;
4227  --      vc_enquadramento := NULL;
4228  --      OPEN cur_ato_enq (x.fatura_item_id);
4229  --      FETCH cur_ato_enq INTO vc_enquadramento;
4230  --      CLOSE cur_ato_enq;
4231  
4232  --      IF vc_enquadramento IS NOT NULL THEN
4233  --	INSERT INTO exp_due_si_enq
4234  --	(
4235  --	  due_si_enq_id
4236  --	, due_ship_item_id
4237  --	, enquadramento
4238  --	, creation_date
4239  --	, created_by
4240  --	, last_update_date
4241  --	, last_updated_by
4242  --	) VALUES (
4243  --		   cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
4244  --		 , vn_due_ship_item_id
4245  --		 , vc_enquadramento
4246  --		 , SYSDATE
4247  --		 , pn_usuario_id
4248  --		 , SYSDATE
4249  --		 , pn_usuario_id
4250  --		 );
4251  --      ELSE
4252  
4253  	      IF ( x.enquadramento_1 IS NOT NULL) THEN
4254  
4255  		vb_achou := FALSE;
4256  		OPEN  cur_ver_enq(vn_due_ship_item_id, x.enquadramento_1);
4257  		FETCH cur_ver_enq INTO vn_due_si_enq_id;
4258  		vb_achou := cur_ver_enq%FOUND;
4259  		CLOSE cur_ver_enq;
4260  
4261  		IF NOT(vb_achou) THEN
4262  		  INSERT INTO exp_due_si_enq
4263  		  (
4264  		    due_si_enq_id
4265  		  , due_ship_item_id
4266  		  , enquadramento
4267  		  , creation_date
4268  		  , created_by
4269  		  , last_update_date
4270  		  , last_updated_by
4271  		  ) VALUES (
4272  			    cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
4273  			  , vn_due_ship_item_id
4274  			  , x.enquadramento_1
4275  			  , SYSDATE
4276  			  , pn_usuario_id
4277  			  , SYSDATE
4278  			  , pn_usuario_id
4279  			  );
4280  		END IF;
4281  	      END IF;
4282  
4283  	      IF ( x.enquadramento_2 IS NOT NULL) THEN
4284  
4285  		vb_achou := FALSE;
4286  		OPEN  cur_ver_enq(vn_due_ship_item_id, x.enquadramento_2);
4287  		FETCH cur_ver_enq INTO vn_due_si_enq_id;
4288  		vb_achou := cur_ver_enq%FOUND;
4289  		CLOSE cur_ver_enq;
4290  
4291  		IF NOT(vb_achou) THEN
4292  
4293  		  INSERT INTO exp_due_si_enq
4294  		  (
4295  		    due_si_enq_id
4296  		  , due_ship_item_id
4297  		  , enquadramento
4298  		  , creation_date
4299  		  , created_by
4300  		  , last_update_date
4301  		  , last_updated_by
4302  		  ) VALUES (
4303  			    cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
4304  			  , vn_due_ship_item_id
4305  			  , x.enquadramento_2
4306  			  , SYSDATE
4307  			  , pn_usuario_id
4308  			  , SYSDATE
4309  			  , pn_usuario_id
4310  			  );
4311  
4312  		END IF;
4313  	      END IF;
4314  
4315  	      IF ( x.enquadramento_3 IS NOT NULL) THEN
4316  
4317  		vb_achou := FALSE;
4318  		OPEN  cur_ver_enq(vn_due_ship_item_id, x.enquadramento_3);
4319  		FETCH cur_ver_enq INTO vn_due_si_enq_id;
4320  		vb_achou := cur_ver_enq%FOUND;
4321  		CLOSE cur_ver_enq;
4322  
4323  		IF NOT(vb_achou) THEN
4324  		  INSERT INTO exp_due_si_enq
4325  		  (
4326  		    due_si_enq_id
4327  		  , due_ship_item_id
4328  		  , enquadramento
4329  		  , creation_date
4330  		  , created_by
4331  		  , last_update_date
4332  		  , last_updated_by
4333  		  ) VALUES (
4334  			    cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
4335  			  , vn_due_ship_item_id
4336  			  , x.enquadramento_3
4337  			  , SYSDATE
4338  			  , pn_usuario_id
4339  			  , SYSDATE
4340  			  , pn_usuario_id
4341  			  );
4342  		END IF;
4343  	      END IF;
4344  
4345  	      IF ( x.enquadramento_4 IS NOT NULL) THEN
4346  
4347  		vb_achou := FALSE;
4348  		OPEN  cur_ver_enq(vn_due_ship_item_id, x.enquadramento_4);
4349  		FETCH cur_ver_enq INTO vn_due_si_enq_id;
4350  		vb_achou := cur_ver_enq%FOUND;
4351  		CLOSE cur_ver_enq;
4352  
4353  		IF NOT(vb_achou) THEN
4354  
4355  		  INSERT INTO exp_due_si_enq
4356  		  (
4357  		    due_si_enq_id
4358  		  , due_ship_item_id
4359  		  , enquadramento
4360  		  , creation_date
4361  		  , created_by
4362  		  , last_update_date
4363  		  , last_updated_by
4364  		  ) VALUES (
4365  			    cmx_fnc_proxima_sequencia('exp_due_si_enq_sq1')
4366  			  , vn_due_ship_item_id
4367  			  , x.enquadramento_4
4368  			  , SYSDATE
4369  			  , pn_usuario_id
4370  			  , SYSDATE
4371  			  , pn_usuario_id
4372  			  );
4373  		END IF;
4374  
4375  	      END IF;
4376  --      END IF;
4377  
4378  	    FOR attr IN cur_atrib_ativo(x.ncm) LOOP
4379  	      vc_destaque   := NULL;
4380  
4381  	      IF(attr.formula IS NOT NULL) THEN
4382  		prc_busca_atributo_ncm( pn_due_id
4383  				      , vn_due_ship_item_id
4384  				      , x.ncm
4385  				      , attr.ncm_atributo_id
4386  				      , attr.formula
4387  				      , vc_destaque
4388  				      );
4389  	      END IF;
4390  
4391  	      IF(attr.nomeapresentacao	= 'DESTAQUE' AND vc_destaque IS NULL) THEN
4392  		vc_destaque := x.destaque_ncm;
4393  	      END IF;
4394  
4395  	      -- EX0033
4396  	      INSERT INTO exp_due_si_char
4397  	      (
4398  		due_si_char_id
4399  	      , due_ship_item_id
4400  	      , typecode
4401  	      , description
4402  	      , creation_date
4403  	      , created_by
4404  	      , last_update_date
4405  	      , last_updated_by
4406  	      ) VALUES (
4407  			  cmx_fnc_proxima_sequencia('exp_due_si_char_sq1')
4408  			, vn_due_ship_item_id
4409  			, attr.codigo  --x.destaque_ncm_type
4410  			, vc_destaque
4411  			, SYSDATE
4412  			, pn_usuario_id
4413  			, SYSDATE
4414  			, pn_usuario_id
4415  			);
4416  	    END LOOP;
4417  
4418  /*
4419  	    IF (x.destaque_ncm IS NOT NULL) THEN
4420  	      -- EX0033
4421  	      vc_atrib_code := NULL;
4422  	      OPEN cur_atrib(x.ncm, x.destaque_ncm);
4423  	      FETCH cur_atrib INTO vc_atrib_code;
4424  	      CLOSE cur_atrib;
4425  
4426  	      INSERT INTO exp_due_si_char
4427  	      (
4428  		due_si_char_id
4429  	      , due_ship_item_id
4430  	      , typecode
4431  	      , description
4432  	      , creation_date
4433  	      , created_by
4434  	      , last_update_date
4435  	      , last_updated_by
4436  	      ) VALUES (
4437  			 cmx_fnc_proxima_sequencia('exp_due_si_char_sq1')
4438  		       , vn_due_ship_item_id
4439  		       , vc_atrib_code -- x.destaque_ncm_type
4440  		       , x.destaque_ncm
4441  		       , SYSDATE
4442  		       , pn_usuario_id
4443  		       , SYSDATE
4444  		       , pn_usuario_id
4445  		       );
4446  	    END IF;
4447  */
4448  	    --prio_carga
4449  	    --adm_dossie_tmp
4450  	    --prazo_exp_tmp
4451  	    IF (x.prazo_exp_tmp IS NOT NULL) THEN
4452  	      INSERT INTO exp_due_gs_item_add_info
4453  	      (
4454  		due_gsi_add_info_id
4455  	      , due_ship_item_id
4456  	      , statementcode
4457  	      , statementdescription
4458  	      , limitdatetime
4459  	      , statementtypecode
4460  	      , creation_date
4461  	      , created_by
4462  	      , last_update_date
4463  	      , last_updated_by
4464  	      ) VALUES (
4465  			 cmx_fnc_proxima_sequencia('exp_due_gsi_add_info_sq1')
4466  		       , vn_due_ship_item_id
4467  		       , NULL		 --x.prio_carga
4468  		       , SubStr(x.doc_exp_temp, 1, 4000)  --statementdescription
4469  		       , x.prazo_exp_tmp --limitdatetime
4470  		       , x.prazo_exp_tmp_type
4471  		       , SYSDATE
4472  		       , pn_usuario_id
4473  		       , SYSDATE
4474  		       , pn_usuario_id
4475  		       );
4476  	    END IF;
4477  
4478  	    IF (x.prio_carga IS NOT NULL) THEN
4479  	      INSERT INTO exp_due_gs_item_add_info
4480  	      (
4481  		due_gsi_add_info_id
4482  	      , due_ship_item_id
4483  	      , statementcode
4484  	      , statementdescription
4485  	      , limitdatetime
4486  	      , statementtypecode
4487  	      , creation_date
4488  	      , created_by
4489  	      , last_update_date
4490  	      , last_updated_by
4491  	      ) VALUES (
4492  			 cmx_fnc_proxima_sequencia('exp_due_gsi_add_info_sq1')
4493  		       , vn_due_ship_item_id
4494  		       , x.prio_carga
4495  		       , NULL --statementdescription
4496  		       , NULL --limitdatetime
4497  		       , x.prio_carga_type
4498  		       , SYSDATE
4499  		       , pn_usuario_id
4500  		       , SYSDATE
4501  		       , pn_usuario_id
4502  		       );
4503  	    END IF;
4504  
4505  --      IF (x.adm_dossie_tmp IS NOT NULL) THEN
4506  --	INSERT INTO exp_due_gs_item_add_info
4507  --	(
4508  --	  due_gsi_add_info_id
4509  --	, due_ship_item_id
4510  --	, statementcode
4511  --	, statementdescription
4512  --	, limitdatetime
4513  --	, statementtypecode
4514  --	, creation_date
4515  --	, created_by
4516  --	, last_update_date
4517  --	, last_updated_by
4518  --	) VALUES (
4519  --		   cmx_fnc_proxima_sequencia('exp_due_gsi_add_info_sq1')
4520  --		 , vn_due_ship_item_id
4521  --		 , x.adm_dossie_tmp
4522  --		 , NULL --statementdescription
4523  --		 , NULL --limitdatetime
4524  --		 , x.adm_dossie_tmp_type
4525  --		 , SYSDATE
4526  --		 , pn_usuario_id
4527  --		 , SYSDATE
4528  --		 , pn_usuario_id
4529  --		 );
4530  --      END IF;
4531  
4532  --      FOR ato IN cur_atos(x.fatura_item_id)
4533  --      LOOP
4534  --	INSERT INTO exp_due_si_adoc
4535  --	(
4536  --	  due_si_adoc_id
4537  --	, due_ship_item_id
4538  --	, identification
4539  --	, category
4540  --	, creation_date
4541  --	, created_by
4542  --	, last_update_date
4543  --	, last_updated_by
4544  --	) VALUES (
4545  --		   cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1')
4546  --		 , vn_due_ship_item_id
4547  --		 , ato.numero
4548  --		 , exp_pkg_due.fnc_ind_due('EX0024' ,'L', x.fatura_id, NULL , x.fatura_item_id)
4549  --		 , SYSDATE
4550  --		 , pn_usuario_id
4551  --		 , SYSDATE
4552  --		 , pn_usuario_id
4553  --		 );
4554  --      END LOOP;
4555  
4556  --      Retirado rotina de drawback, pois quando o embarque for do tipo antecipado não pode enviar esses dados
4557  --      /*
4558  --      EX0075 ItemID
4559  --      EX0076 QuantityQuantity
4560  --      EX0077 ValueWithExchangeCoverAmount
4561  --      EX0078 ValueWithoutExchangeCoverAmount
4562  --      EX0083 DrawbackHsClassification
4563  --      EX0084 DrawbackRecipientId
4564  --      */
4565  --      FOR ato IN cur_atos(x.fatura_item_id)
4566  --      LOOP
4567  --	INSERT INTO exp_due_si_adoc
4568  --	(
4569  --	  due_si_adoc_id
4570  --	, due_ship_item_id
4571  --	, identification
4572  --	, category
4573  --	, creation_date
4574  --	, created_by
4575  --	, last_update_date
4576  --	, last_updated_by
4577  --	, itemid
4578  --	, quantity
4579  --	, vlrwithexcoveramount
4580  --	, vlrwithoutexcoveramount
4581  --	, drawbackhsclassification
4582  --	, drawbackrecipientid
4583  --	) VALUES (
4584  --		   cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1')
4585  --		 , vn_due_ship_item_id
4586  --		 , ato.numero
4587  --		 , exp_pkg_due.fnc_ind_due('EX0024' ,'L', x.fatura_id, NULL , x.fatura_item_id)
4588  --		 , SYSDATE
4589  --		 , pn_usuario_id
4590  --		 , SYSDATE
4591  --		 , pn_usuario_id
4592  --		 , ato.nr_item_drawback
4593  --		 , ato.quantidade
4594  --		 , ato.valor
4595  --		 , 0
4596  --		 , ato.ncm
4597  --		 , ato.cnpj
4598  --		 );
4599  --      END LOOP;
4600  
4601  	    OPEN cur_enq_sem_di(vn_due_ship_item_id);
4602  	    FETCH cur_enq_sem_di INTO vc_enq_sem_di;
4603  	    CLOSE cur_enq_sem_di;
4604  
4605  	    IF Upper(Nvl(vc_enq_sem_di,'S')) = 'S' THEN
4606  
4607  
4608  	      FOR adoc IN cur_adoc_di(x.fatura_item_id)
4609  	      LOOP
4610  		vn_due_si_adoc_id :=   cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1');
4611  		INSERT INTO exp_due_si_adoc
4612  		(
4613  		  due_si_adoc_id
4614  		, due_ship_item_id
4615  		, identification
4616  		, category
4617  		, itemid
4618  		, quantity
4619  		, creation_date
4620  		, created_by
4621  		, last_update_date
4622  		, last_updated_by
4623  		) VALUES (
4624  			   vn_due_si_adoc_id
4625  			 , vn_due_ship_item_id
4626  			 , adoc.nr_declaracao
4627  			 , exp_pkg_due.fnc_ind_due(Decode(Nvl(adoc.dsi,'N')
4628  							   , 'N', 'EX0024_DI'
4629  							   , 'S', 'EX0024_DSI') ,'L', x.fatura_id, NULL , x.fatura_item_id)
4630  			 , adoc.adicao_num
4631  			 , vn_qtde_estatistica --x.qtde_un_est
4632  			 , SYSDATE
4633  			 , pn_usuario_id
4634  			 , SYSDATE
4635  			 , pn_usuario_id
4636  			 );
4637  
4638  		FOR proc_adm IN cur_proc_adm(adoc.declaracao_adi_id)
4639  		LOOP
4640  		  INSERT INTO exp_due_si_adoc_add_info
4641  		  (
4642  		    due_gs_add_info_id
4643  		  , due_si_adoc_id
4644  		  , statementtypecode
4645  		  , statementdescription
4646  		  , creation_date
4647  		  , created_by
4648  		  , last_update_date
4649  		  , last_updated_by
4650  		  ) VALUES (
4651  			   cmx_fnc_proxima_Sequencia('exp_due_si_adoc_add_info_sq1')
4652  			   , vn_due_si_adoc_id
4653  			   , 'ABC'
4654  			   , proc_adm.processo_numero
4655  			   , SYSDATE
4656  			   , pn_usuario_id
4657  			   , SYSDATE
4658  			   , pn_usuario_id
4659  			   );
4660  		END LOOP;
4661  
4662  	      END LOOP;
4663  	    END IF;
4664  
4665  	    /*EX0073 e EX0074 -> TIPO = 149*/
4666  	    vn_per_comissao := 0;
4667  	    OPEN  cur_comissao_repre(x.fatura_item_id);
4668  	    FETCH cur_comissao_repre INTO vn_per_comissao;
4669  	    CLOSE cur_comissao_repre;
4670  
4671  	    IF(Nvl(vn_per_comissao,0) > 0) THEN
4672  	      INSERT INTO exp_due_ship_item_adj ( due_si_adj_id
4673  						, due_ship_item_id
4674  						, additioncode
4675  						, percentage
4676  						, creation_date
4677  						, created_by
4678  						, last_update_date
4679  						, last_updated_by
4680  						)
4681  					 VALUES ( cmx_fnc_proxima_sequencia('exp_due_ship_item_adj_sq1')
4682  						, vn_due_ship_item_id
4683  						, '149'
4684  						, vn_per_comissao
4685  						, SYSDATE
4686  						, pn_usuario_id
4687  						, SYSDATE
4688  						, pn_usuario_id
4689  						);
4690  	    END IF;
4691  
4692  	  END LOOP;
4693  	END prc_gs_i_snf;
4694  
4695  	FUNCTION fnc_xml_table(pn_due_id       NUMBER)
4696  	RETURN NUMBER
4697  	AS
4698  	  CURSOR cur_nls
4699  	  IS
4700  	  SELECT nsp.value  valor
4701  	  FROM nls_session_parameters nsp
4702  	  WHERE nsp.parameter='NLS_NUMERIC_CHARACTERS';
4703  
4704  	  vc_xml CLOB;
4705  	  vn_indice PLS_INTEGER := 1;
4706  	  vn_pos    NUMBER	:= 1;
4707  	  vn_amt    NUMBER;
4708  	  vc_valor VARCHAR2(100);
4709  
4710  	BEGIN
4711  	  OPEN cur_nls;
4712  	  FETCH cur_nls INTO vc_valor;
4713  	  CLOSE cur_nls;
4714  
4715  	  vt_xml.DELETE;
4716  	  EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS=''.,''';
4717  	  vc_xml := fnc_xml_due(pn_due_id).extract('*').getclobval();
4718  	  EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS=''' || vc_valor || '''';
4719  	  vn_amt := Dbms_Lob.InStr(vc_xml, Chr(10));
4720  	  IF vn_amt > 0 THEN
4721  
4722  	    LOOP
4723  	      vt_xml(vn_indice) := Dbms_Lob.SubStr(vc_xml, vn_amt - vn_pos, vn_pos);
4724  	      vn_pos := vn_amt + 1;
4725  	      vn_amt := Dbms_Lob.InStr(vc_xml, Chr(10), vn_pos);
4726  	      vn_indice := vn_indice + 1;
4727  	    EXIT WHEN vn_amt < 1;
4728  	    END LOOP;
4729  
4730  	  ELSE
4731  	    vt_xml(vn_indice) := vc_xml;
4732  
4733  	  END IF;
4734  	  RETURN vn_indice - 1;
4735  	END fnc_xml_table;
4736  
4737  	FUNCTION fnc_clob_base64 (
4738  	   pclob_texto_xml   IN  CLOB
4739  	 , pc_charset	     IN VARCHAR2 DEFAULT 'UTF8'
4740  	)
4741  	RETURN CLOB
4742  	IS
4743  
4744  	  vblob_arq_utf8      BLOB;
4745  	  vblob_arq_destino   BLOB;
4746  	  vblob_arq_aux       BLOB;
4747  	  vc_aux	      CLOB;
4748  	  vclob_arq_origem    CLOB;
4749  
4750  	  vn_tmp_blob_id      NUMBER;
4751  
4752  	  vn_tamanho_arq_utf8 PLS_INTEGER    := 0;
4753  	  vbi_amt	      BINARY_INTEGER := 10800 /*16384*/;
4754  	  vn_pos	      INTEGER;
4755  	  vn_tam_max	      NUMBER := null;
4756  	  vc_buf	      VARCHAR2(32767);
4757  	  vr_buf	      RAW(32767);
4758  
4759  	  vc_nome_arq	      VARCHAR2(256) := null;
4760  	  vc_ultimo_passo     VARCHAR2(4000);
4761  
4762  	  vb_log	      BOOLEAN := FALSE;
4763  
4764  	  vn_lang_context     number := dbms_lob.default_lang_ctx;
4765  	  vn_warning	      NUMBER;
4766  	  vn_dest_offset      NUMBER :=1;
4767  	  vn_src_offset       NUMBER :=1;
4768  	  vn_mod	      NUMBER :=0;
4769  
4770  	  vc_charset	      VARCHAR2(150);
4771  
4772  	  CURSOR cur_charset
4773  	      IS
4774  	  SELECT value
4775  	    FROM v$nls_parameters
4776  	   WHERE parameter='NLS_CHARACTERSET';
4777  
4778  	BEGIN
4779  	  vn_pos := 1;
4780  	  vc_charset := NULL;
4781  	  OPEN cur_charset;
4782  	  FETCH cur_charset INTO vc_charset;
4783  	  CLOSE cur_charset;
4784  
4785  	  vclob_arq_origem := pclob_texto_xml;
4786  
4787  	  dbms_lob.createtemporary (vblob_arq_destino, true);
4788  
4789  	  Dbms_Lob.createtemporary(vblob_arq_aux,TRUE);
4790  
4791  	  Dbms_Lob.convertToBlob(vblob_arq_aux,
4792  				 vclob_arq_origem,
4793  				 Length(vclob_arq_origem),
4794  				 vn_dest_offset,
4795  				 vn_src_offset,
4796  				 nls_charset_id(pc_charset),
4797  				 vn_lang_context,
4798  				 vn_warning);
4799  				 Dbms_Output.put_line(Dbms_Lob.getLength(vblob_arq_aux));
4800  
4801  	  dbms_lob.createtemporary (vblob_arq_utf8, true);
4802  
4803  	  dbms_lob.open (vblob_arq_utf8, dbms_lob.lob_readwrite);
4804  
4805  	  dbms_lob.createtemporary (vblob_arq_destino, true);
4806  
4807  	  dbms_lob.open (vblob_arq_destino, dbms_lob.lob_readwrite);
4808  
4809  	  vn_tam_max := dbms_lob.getlength (vblob_arq_aux);
4810  
4811  	  LOOP
4812  
4813  	    IF (vn_pos >= vn_tam_max) THEN
4814  
4815  	      EXIT;
4816  	    END IF;
4817  
4818  	    vn_pos := least (vn_pos, vn_tam_max);
4819  	    vr_buf := '';
4820  
4821  	    dbms_lob.read (vblob_arq_aux, vbi_amt, vn_pos, vr_buf);
4822  
4823  	    dbms_lob.writeappend (
4824  	       vblob_arq_utf8
4825  	     , utl_raw.length (vr_buf)
4826  	     , vr_buf
4827  	    );
4828  
4829  	    vr_buf := utl_encode.base64_encode (vr_buf);
4830  
4831  	    dbms_lob.writeappend (
4832  	       vblob_arq_destino
4833  	     , utl_raw.length (vr_buf)
4834  	     , vr_buf
4835  	    );
4836  
4837  	    vn_mod := Mod(Utl_Raw.Length(vr_buf),4) ;
4838  
4839  	    vn_pos := vn_pos + vbi_amt;
4840  
4841  	  END LOOP;
4842  
4843  	  IF vn_mod <> 0 THEN
4844  	    vn_mod := 4 - vn_mod;
4845  	    Dbms_Lob.writeappend( vblob_arq_destino
4846  				, vn_mod
4847  				, Utl_Raw.cast_to_raw(LPad('=', vn_mod, '='))
4848  				);
4849  	  END IF;
4850  
4851  	  vn_tamanho_arq_utf8 := dbms_lob.getlength (vblob_arq_utf8);
4852  
4853  	  vn_dest_offset := 1;
4854  	  vn_src_offset := 1;
4855  	  Dbms_Lob.convertToClob(vclob_arq_origem,
4856  				 vblob_arq_destino,
4857  				 Dbms_Lob.getLength(vblob_arq_destino),
4858  				 vn_dest_offset,
4859  				 vn_src_offset,
4860  				 nls_charset_id(pc_charset),
4861  				 vn_lang_context,
4862  				 vn_warning);
4863  
4864  
4865  	  dbms_lob.close (vblob_arq_utf8);
4866  	  dbms_lob.close (vblob_arq_destino);
4867  
4868  	  dbms_lob.freetemporary (vblob_arq_utf8);
4869  	  dbms_lob.freetemporary (vblob_arq_destino);
4870  	  dbms_lob.freetemporary (vblob_arq_aux);
4871  
4872  	  RETURN vclob_arq_origem;
4873  
4874  	EXCEPTION
4875  	  WHEN OTHERS THEN
4876  
4877  	    RETURN null;
4878  
4879  	END fnc_clob_base64;
4880  
4881  	FUNCTION fnc_base64_clob (
4882  	   pclob_texto_xml   IN  CLOB
4883  	 , pc_charset	     IN VARCHAR2 DEFAULT 'UTF8'
4884  	)
4885  	RETURN CLOB
4886  	IS
4887  
4888  	  vblob_arq_utf8      BLOB;
4889  	  vblob_arq_destino   BLOB;
4890  	  vblob_arq_aux       BLOB;
4891  	  vc_aux	      CLOB;
4892  	  vclob_arq_origem    CLOB;
4893  
4894  	  vn_tmp_blob_id      NUMBER;
4895  
4896  	  vn_tamanho_arq_utf8 PLS_INTEGER    := 0;
4897  	  vbi_amt	      BINARY_INTEGER := 10800 /*16384*/;
4898  	  vn_pos	      INTEGER;
4899  	  vn_tam_max	      NUMBER := null;
4900  	  vc_buf	      VARCHAR2(32767);
4901  	  vr_buf	      RAW(32767);
4902  
4903  	  vc_nome_arq	      VARCHAR2(256) := null;
4904  	  vc_ultimo_passo     VARCHAR2(4000);
4905  
4906  	  vb_log	      BOOLEAN := FALSE;
4907  
4908  	  vn_lang_context     number := dbms_lob.default_lang_ctx;
4909  	  vn_warning	      NUMBER;
4910  	  vn_dest_offset      NUMBER :=1;
4911  	  vn_src_offset       NUMBER :=1;
4912  	  vn_offset	      NUMBER :=1;
4913  
4914  	  vc_charset	      VARCHAR2(150);
4915  	  vc_decodeline       VARCHAR2(32000);
4916  	  vr_buffer_raw       RAW(32000);
4917  	  vn_linesize	      NUMBER;
4918  
4919  	  CURSOR cur_charset
4920  	      IS
4921  	  SELECT value
4922  	    FROM v$nls_parameters
4923  	   WHERE parameter='NLS_CHARACTERSET';
4924  
4925  	BEGIN
4926  	  vn_pos := 1;
4927  	  vc_charset := NULL;
4928  	  OPEN cur_charset;
4929  	  FETCH cur_charset INTO vc_charset;
4930  	  CLOSE cur_charset;
4931  
4932  	  vclob_arq_origem := pclob_texto_xml;
4933  
4934  --    vn_linesize := Dbms_Lob.InStr(pclob_texto_xml,Chr(10));
4935  --    Dbms_Output.put_line(vn_linesize);
4936  --    IF vn_linesize > 0 THEN
4937  --      vn_linesize := vn_linesize;
4938  --    ELSE
4939  --      vn_linesize := 128;
4940  --    END IF;
4941  
4942  	  vn_linesize := 2048;
4943  
4944  	  dbms_lob.createtemporary(vblob_arq_destino, true);
4945  
4946  	  vn_offset := 1;
4947  
4948  	  FOR i in 1 .. ceil(dbms_lob.getlength(pclob_texto_xml) / vn_linesize)
4949  	  LOOP
4950  	    dbms_lob.read(pclob_texto_xml, vn_linesize, vn_offset, vc_decodeline);
4951  	    Dbms_Output.put_line(i || '-' || vc_decodeline);
4952  	    vr_buffer_raw := utl_raw.cast_to_raw(vc_decodeline);
4953  	    vr_buffer_raw := utl_encode.base64_decode(vr_buffer_raw);
4954  	    dbms_lob.writeappend(vblob_arq_destino, utl_raw.length(vr_buffer_raw), vr_buffer_raw);
4955  	    vn_offset := vn_offset + vn_linesize;
4956  	  END LOOP;
4957  
4958  	  dbms_lob.createtemporary(vclob_arq_origem, true);
4959  	  vn_dest_offset := 1;
4960  	  vn_src_offset := 1;
4961  	  Dbms_Lob.convertToClob(vclob_arq_origem,
4962  				 vblob_arq_destino,
4963  				 Dbms_Lob.getLength(vblob_arq_destino),
4964  				 vn_dest_offset,
4965  				 vn_src_offset,
4966  				 nls_charset_id(pc_charset),
4967  				 vn_lang_context,
4968  				 vn_warning);
4969  
4970  	  dbms_lob.freetemporary (vblob_arq_destino);
4971  
4972  	  RETURN vclob_arq_origem;
4973  	END fnc_base64_clob;
4974  
4975  	FUNCTION fnc_xml_table_clob_base64(pc_clob clob)
4976  	RETURN NUMBER
4977  	AS
4978  	  vc_xml    CLOB;
4979  	  vc_xml2   CLOB;
4980  	  vn_indice PLS_INTEGER := 1;
4981  	  vn_pos    NUMBER	:= 1;
4982  	  vn_amt    NUMBER;
4983  	BEGIN
4984  	  vt_xml_b64.DELETE;
4985  
4986  	  vc_xml2 := pc_clob;
4987  	  vc_xml := fnc_clob_base64(vc_xml2);
4988  	  vn_amt := Dbms_Lob.InStr(vc_xml, Chr(10));
4989  	  IF vn_amt > 0 THEN
4990  
4991  	    LOOP
4992  	      vt_xml_b64(vn_indice) := Dbms_Lob.SubStr(vc_xml, vn_amt - vn_pos, vn_pos);
4993  	      vn_pos := vn_amt + 1;
4994  	      vn_amt := Dbms_Lob.InStr(vc_xml, Chr(10), vn_pos);
4995  	      vn_indice := vn_indice + 1;
4996  
4997  	    EXIT WHEN vn_amt < 1;
4998  	    END LOOP;
4999  	    IF vn_pos < Length(vc_xml) THEN
5000  	      vt_xml_b64(vn_indice) := Dbms_Lob.SubStr(vc_xml, Length(vc_xml) - vn_pos, vn_pos);
5001  	      vn_indice := vn_indice + 1;
5002  	    END IF;
5003  
5004  	  ELSE
5005  	    vt_xml_b64(vn_indice) := vc_xml;
5006  
5007  	  END IF;
5008  	  RETURN vn_indice - 1;
5009  	END;
5010  
5011  	FUNCTION fnc_xml_table_base64(pn_due_id       NUMBER)
5012  	RETURN NUMBER
5013  	AS
5014  	  vc_xml    CLOB;
5015  	  vc_xml2   CLOB;
5016  	  vn_indice PLS_INTEGER := 1;
5017  	  vn_pos    NUMBER	:= 1;
5018  	  vn_amt    NUMBER;
5019  	BEGIN
5020  
5021  	  --Limpando flag_justificativa
5022  	  UPDATE exp_due_ship_item SET flag_justificativa = 'N'
5023  				 WHERE due_id = pn_due_id;
5024  	  COMMIT;
5025  
5026  	  vc_xml2 := fnc_xml_due(pn_due_id).extract('*').getclobval();
5027  
5028  	  RETURN fnc_xml_table_clob_base64(vc_xml2);
5029  
5030  	END fnc_xml_table_base64;
5031  
5032  	FUNCTION fnc_xml_line(pn_linha	       NUMBER)
5033  	RETURN VARCHAR2
5034  	AS
5035  	BEGIN
5036  	  RETURN vt_xml(pn_linha);
5037  	END fnc_xml_line;
5038  
5039  	FUNCTION fnc_xml_line_base64(pn_linha	      NUMBER)
5040  	RETURN VARCHAR2
5041  	AS
5042  	BEGIN
5043  	  RETURN vt_xml_b64(pn_linha);
5044  	END fnc_xml_line_base64;
5045  
5046  	FUNCTION fnc_valida_due(pn_due_id NUMBER, pn_evento_id NUMBER ) RETURN NUMBER
5047  	AS
5048  
5049  	  CURSOR cur_dados
5050  	      IS
5051  	  SELECT fatura_id
5052  	       , embarque_id
5053  	       , fatura_numero
5054  	       , fatura_ano
5055  	       , empresa_id
5056  	       , doffice_identification
5057  	       , whs_identification
5058  	       , whs_type
5059  	       , whs_latitude
5060  	       , whs_longitude
5061  	       , whs_addr_line
5062  	       , currencytype
5063  	       , exitoffice_identification
5064  	       , exitoffice_whs_identification
5065  	       , exitoffice_whs_type
5066  	       --, importer_name
5067  	       , importer_addr_country
5068  	       --, importer_addr_line
5069  	       , forma_exportacao
5070  	       , forma_exportacao_type
5071  	       , situacao_especial
5072  	       , situacao_especial_type
5073  	       , caso_esp_transporte
5074  	       , caso_esp_transporte_type
5075  	       , observacoes_gerais
5076  	       , observacoes_gerais_type
5077  	       , motivo_dispensa_nf
5078  	    FROM (SELECT ef.fatura_id
5079  		      , ef.embarque_id
5080  		      , ef.fatura_numero
5081  		      , ef.fatura_ano
5082  		      , ef.empresa_id
5083  		      , exp_pkg_due.fnc_ind_due('EX0010' ,'F', ef.fatura_id )	      doffice_identification
5084  		      , NVL( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
5085  			   , exp_pkg_due.fnc_ind_due('EX0037_CNPJ' ,'F', ef.fatura_id ))	 whs_identification
5086  		      , Decode( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
5087  			      , NULL
5088  			      , '22'
5089  			      , '281'
5090  			      ) 						      whs_type
5091  		      , exp_pkg_due.fnc_ind_due('EX0063' ,'F', ef.fatura_id )	      whs_latitude
5092  		      , exp_pkg_due.fnc_ind_due('EX0064' ,'F', ef.fatura_id )	      whs_longitude
5093  		      , exp_pkg_due.fnc_ind_due('EX0062' ,'F', ef.fatura_id )	      whs_addr_line
5094  		      , exp_pkg_due.fnc_ind_due('EX0039' ,'F', ef.fatura_id )	      currencytype
5095  		      , exp_pkg_due.fnc_ind_due('EX0011' ,'F', ef.fatura_id )	      exitoffice_identification
5096  		      , exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )	      exitoffice_whs_identification
5097  		      , Decode( exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )
5098  			      , NULL
5099  			      , '22'
5100  			      , '281'
5101  			      ) 						      exitoffice_whs_type
5102  		      --, exp_pkg_due.fnc_ind_due('EX0008' ,'F', ef.fatura_id ) 	importer_name
5103  		      , exp_pkg_due.fnc_ind_due('EX0009' ,'F', ef.fatura_id )	      importer_addr_country
5104  		      --, exp_pkg_due.fnc_ind_due('EX0036' ,'F', ef.fatura_id ) 	importer_addr_line
5105  		      , exp_pkg_due.fnc_ind_due('EX0040_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao
5106  		      , exp_pkg_due.fnc_ind_due('EX0041_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao_type
5107  		      , exp_pkg_due.fnc_ind_due('EX0040_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial
5108  		      , exp_pkg_due.fnc_ind_due('EX0041_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial_type
5109  		      , exp_pkg_due.fnc_ind_due('EX0040_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte
5110  		      , exp_pkg_due.fnc_ind_due('EX0041_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte_type
5111  		      , exp_pkg_due.fnc_ind_due('EX0042_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais
5112  		      , exp_pkg_due.fnc_ind_due('EX0041_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais_type
5113  		      , exp_pkg_due.fnc_ind_due('EX0067' ,'F', ef.fatura_id )	      motivo_dispensa_nf
5114  		    FROM exp_faturas ef
5115  		      , exp_due_faturas edft
5116  		  WHERE ef.fatura_id = edft.fatura_id
5117  		    AND edft.due_id = pn_due_id
5118  		 ) tbl
5119  	ORDER BY fatura_ano
5120  	       , fatura_numero
5121  	       , doffice_identification
5122  	       , whs_identification
5123  	       , whs_type
5124  	       , whs_latitude
5125  	       , whs_longitude
5126  	       , whs_addr_line
5127  	       , currencytype
5128  	       , exitoffice_identification
5129  	       , exitoffice_whs_identification
5130  	       , exitoffice_whs_type
5131  	       --, importer_name
5132  	       , importer_addr_country
5133  	       --, importer_addr_line
5134  	       , forma_exportacao
5135  	       , forma_exportacao_type
5136  	       , situacao_especial
5137  	       , situacao_especial_type
5138  	       , caso_esp_transporte
5139  	       , caso_esp_transporte_type
5140  	       , observacoes_gerais
5141  	       , observacoes_gerais_type
5142  	       , motivo_dispensa_nf;
5143  
5144  	  vr_fat_ant cur_dados%ROWTYPE;
5145  	  vb_erro	       BOOLEAN;
5146  	  vn_due_id	       NUMBER;
5147  	  vn_criacao	       NUMBER;
5148  
5149  	BEGIN
5150  	  -- verifica se alguma fatura tem informação divergente das demais.
5151  	  vr_fat_ant := NULL;
5152  	  vb_erro    := FALSE;
5153  
5154  	  FOR x IN cur_dados
5155  	  LOOP
5156  	    exp_prc_criar_due_hook1(pn_evento_id, x.fatura_id);
5157  	    --IF x.doffice_identification IS NULL THEN
5158  	    --	cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ sem local de despacho preenchido.', 'EXP_PKG_DUE','FNC_GERAR_DUE_001',null,x.fatura_numero || '/' || x.fatura_ano),'E');
5159  	    --	vb_erro := TRUE;
5160  	    --END IF;
5161  
5162  	    IF vr_fat_ant.fatura_id IS NOT NULL THEN
5163  	      IF Nvl(x.doffice_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.doffice_identification       ,'-!-!-!') THEN
5164  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_002',null,x.fatura_numero || '/' || x.fatura_ano, 'doffice_identification'       , x.doffice_identification       ),'E');
5165  		vb_erro := TRUE;
5166  	      END IF;
5167  
5168  	      IF Nvl(x.whs_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_identification	       ,'-!-!-!') THEN
5169  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_003',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_identification'	      , x.whs_identification	       ),'E');
5170  		vb_erro := TRUE;
5171  	      END IF;
5172  
5173  	      IF Nvl(x.whs_type 		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_type		       ,'-!-!-!') THEN
5174  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_004',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_type'		      , x.whs_type		       ),'E');
5175  		vb_erro := TRUE;
5176  	      END IF;
5177  
5178  	      IF Nvl(x.whs_latitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_latitude		       ,'-!-!-!') THEN
5179  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_005',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_latitude'		      , x.whs_latitude		       ),'E');
5180  		vb_erro := TRUE;
5181  	      END IF;
5182  
5183  	      IF Nvl(x.whs_longitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_longitude 	       ,'-!-!-!') THEN
5184  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_006',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_longitude'		      , x.whs_longitude 	       ),'E');
5185  		vb_erro := TRUE;
5186  	      END IF;
5187  
5188  	      IF Nvl(x.whs_addr_line		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_addr_line 	       ,'-!-!-!') THEN
5189  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_007',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_addr_line'		      , x.whs_addr_line 	       ),'E');
5190  		vb_erro := TRUE;
5191  	      END IF;
5192  
5193  	      IF Nvl(x.currencytype		    ,'-!-!-!')	<> Nvl(vr_fat_ant.currencytype		       ,'-!-!-!') THEN
5194  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_008',null,x.fatura_numero || '/' || x.fatura_ano, 'currencytype'		      , x.currencytype		       ),'E');
5195  		vb_erro := TRUE;
5196  	      END IF;
5197  
5198  	      --IF Nvl(x.declarant_identification     ,'-!-!-!')  <> Nvl(vr_fat_ant.declarant_identification	 ,'-!-!-!') THEN
5199  	      --  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_009',null,x.fatura_numero || '/' || x.fatura_ano, 'declarant_identification'	, x.declarant_identification	 ),'E');
5200  	      --  vb_erro := TRUE;
5201  	      --END IF;
5202  
5203  	      IF Nvl(x.exitoffice_identification    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_identification    ,'-!-!-!') THEN
5204  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_010',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_identification'    , x.exitoffice_identification    ),'E');
5205  		vb_erro := TRUE;
5206  	      END IF;
5207  
5208  	      IF Nvl(x.exitoffice_whs_identification,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_identification,'-!-!-!') THEN
5209  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_011',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_identification', x.exitoffice_whs_identification),'E');
5210  		vb_erro := TRUE;
5211  	      END IF;
5212  
5213  	      IF Nvl(x.exitoffice_whs_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_type	       ,'-!-!-!') THEN
5214  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_012',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_type'	      , x.exitoffice_whs_type	       ),'E');
5215  		vb_erro := TRUE;
5216  	      END IF;
5217  
5218  --	IF Nvl(x.importer_name		      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_name		 ,'-!-!-!') THEN
5219  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_014',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_name'		, x.importer_name		 ),'E');
5220  --	  vb_erro := TRUE;
5221  --	END IF;
5222  
5223  	      IF Nvl(x.importer_addr_country	    ,'-!-!-!')	<> Nvl(vr_fat_ant.importer_addr_country        ,'-!-!-!') THEN
5224  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_015',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_country'	      , x.importer_addr_country        ),'E');
5225  		vb_erro := TRUE;
5226  	      END IF;
5227  
5228  --	IF Nvl(x.importer_addr_line	      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_addr_line		 ,'-!-!-!') THEN
5229  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_016',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_line'		, x.importer_addr_line		 ),'E');
5230  --	  vb_erro := TRUE;
5231  --	END IF;
5232  
5233  	      IF Nvl(x.forma_exportacao 	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao	       ,'-!-!-!') THEN
5234  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_017',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao'	      , x.forma_exportacao	       ),'E');
5235  		vb_erro := TRUE;
5236  	      END IF;
5237  
5238  	      IF Nvl(x.forma_exportacao_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao_type        ,'-!-!-!') THEN
5239  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_018',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao_type'	      , x.forma_exportacao_type        ),'E');
5240  		vb_erro := TRUE;
5241  	      END IF;
5242  
5243  	      IF Nvl(x.situacao_especial	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial	       ,'-!-!-!') THEN
5244  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_019',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial'	      , x.situacao_especial	       ),'E');
5245  		vb_erro := TRUE;
5246  	      END IF;
5247  
5248  	      IF Nvl(x.situacao_especial_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial_type       ,'-!-!-!') THEN
5249  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_020',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial_type'       , x.situacao_especial_type       ),'E');
5250  		vb_erro := TRUE;
5251  	      END IF;
5252  
5253  	      IF Nvl(x.caso_esp_transporte	    ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte	       ,'-!-!-!') THEN
5254  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_021',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte'	      , x.caso_esp_transporte	       ),'E');
5255  		vb_erro := TRUE;
5256  	      END IF;
5257  
5258  	      IF Nvl(x.caso_esp_transporte_type     ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte_type     ,'-!-!-!') THEN
5259  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_022',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte_type'     , x.caso_esp_transporte_type     ),'E');
5260  		vb_erro := TRUE;
5261  	      END IF;
5262  
5263  	      IF Nvl(x.observacoes_gerais	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais	       ,'-!-!-!') THEN
5264  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_023',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais'	      , x.observacoes_gerais	       ),'E');
5265  		vb_erro := TRUE;
5266  	      END IF;
5267  
5268  	      IF Nvl(x.observacoes_gerais_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais_type      ,'-!-!-!') THEN
5269  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_024',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais_type'      , x.observacoes_gerais_type      ),'E');
5270  		vb_erro := TRUE;
5271  	      END IF;
5272  	      IF Nvl(x.motivo_dispensa_nf      ,'-!-!-!')  <> Nvl(vr_fat_ant.motivo_dispensa_nf      ,'-!-!-!') THEN
5273  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_024',null,x.fatura_numero || '/' || x.fatura_ano, 'motivo_dispensa_nf'	 , Nvl(x.motivo_dispensa_nf, ' ')      ),'E');
5274  		vb_erro := TRUE;
5275  	      END IF;
5276  
5277  	    END IF;
5278  
5279  	    vr_fat_ant := x;
5280  
5281  	  END LOOP;
5282  
5283  
5284  	  IF vb_erro THEN
5285  	    RETURN pn_evento_id;
5286  	  END IF;
5287  
5288  	  RETURN NULL;
5289  	END fnc_valida_due;
5290  
5291  	FUNCTION fnc_gerar_due( pn_due_tmp_id NUMBER
5292  			      , pn_evento_id NUMBER
5293  			      , pn_usuario_id NUMBER
5294  			      ) RETURN NUMBER
5295  	AS
5296  
5297  	  CURSOR cur_dados
5298  	      IS
5299  	  SELECT fatura_id
5300  	       , embarque_id
5301  	       , fatura_numero
5302  	       , fatura_ano
5303  	       , empresa_id
5304  	       , doffice_identification
5305  	       , whs_identification
5306  	       , whs_type
5307  	       , whs_latitude
5308  	       , whs_longitude
5309  	       , whs_addr_line
5310  	       , currencytype
5311  	       --, declarant_identification
5312  	       , exitoffice_identification
5313  	       , exitoffice_whs_identification
5314  	       , exitoffice_whs_type
5315  	       --, importer_name
5316  	       , importer_addr_country
5317  	       --, importer_addr_line
5318  	       , forma_exportacao
5319  	       , forma_exportacao_type
5320  	       , situacao_especial
5321  	       , situacao_especial_type
5322  	       , caso_esp_transporte
5323  	       , caso_esp_transporte_type
5324  	       , observacoes_gerais
5325  	       , observacoes_gerais_type
5326  	       --, ucr
5327  	       , motivo_dispensa_nf
5328  	    FROM (SELECT ef.fatura_id
5329  		       , ef.embarque_id
5330  		       , ef.fatura_numero
5331  		       , ef.fatura_ano
5332  		       , edft.empresa_id
5333  		       , exp_pkg_due.fnc_ind_due('EX0010' ,'F', ef.fatura_id )	       doffice_identification
5334  		       , NVL( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
5335  			    , exp_pkg_due.fnc_ind_due('EX0037_CNPJ' ,'F', ef.fatura_id ))	  whs_identification
5336  		       , Decode( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
5337  			       , NULL
5338  			       , '22'
5339  			       , '281'
5340  			       )						       whs_type
5341  		       , exp_pkg_due.fnc_ind_due('EX0063' ,'F', ef.fatura_id )	       whs_latitude
5342  		       , exp_pkg_due.fnc_ind_due('EX0064' ,'F', ef.fatura_id )	       whs_longitude
5343  		       , exp_pkg_due.fnc_ind_due('EX0062' ,'F', ef.fatura_id )	       whs_addr_line
5344  		       , exp_pkg_due.fnc_ind_due('EX0039' ,'F', ef.fatura_id )	       currencytype
5345  		       --, exp_pkg_due.fnc_ind_due('EX0003' ,'F', ef.fatura_id )	 declarant_identification
5346  		       , exp_pkg_due.fnc_ind_due('EX0011' ,'F', ef.fatura_id )	       exitoffice_identification
5347  		       , exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )	       exitoffice_whs_identification
5348  		       , Decode( exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )
5349  			       , NULL
5350  			       , '22'
5351  			       , '281'
5352  			       )						       exitoffice_whs_type
5353  		       --, exp_pkg_due.fnc_ind_due('EX0008' ,'F', ef.fatura_id )	 importer_name
5354  		       , exp_pkg_due.fnc_ind_due('EX0009' ,'F', ef.fatura_id )	       importer_addr_country
5355  		       --, exp_pkg_due.fnc_ind_due('EX0036' ,'F', ef.fatura_id )	 importer_addr_line
5356  		       , exp_pkg_due.fnc_ind_due('EX0040_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao
5357  		       , exp_pkg_due.fnc_ind_due('EX0041_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao_type
5358  		       , exp_pkg_due.fnc_ind_due('EX0040_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial
5359  		       , exp_pkg_due.fnc_ind_due('EX0041_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial_type
5360  		       , exp_pkg_due.fnc_ind_due('EX0040_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte
5361  		       , exp_pkg_due.fnc_ind_due('EX0041_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte_type
5362  		       , exp_pkg_due.fnc_ind_due('EX0042_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais
5363  		       , exp_pkg_due.fnc_ind_due('EX0041_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais_type
5364  		       --, exp_pkg_due.fnc_ind_due('EX0002' ,'F', ef.fatura_id )	 ucr
5365  		       , exp_pkg_due.fnc_ind_due('EX0067' ,'F', ef.fatura_id )	       motivo_dispensa_nf
5366  		    FROM exp_faturas ef
5367  		       , exp_due_fatura_tmp edft
5368  		   WHERE ef.fatura_id = edft.fatura_id
5369  		     AND edft.due_tmp_id = pn_due_tmp_id
5370  		 )
5371  	ORDER BY fatura_ano
5372  	       , fatura_numero
5373  	       , doffice_identification
5374  	       , whs_identification
5375  	       , whs_type
5376  	       , whs_latitude
5377  	       , whs_longitude
5378  	       , whs_addr_line
5379  	       , currencytype
5380  	       --, declarant_identification
5381  	       , exitoffice_identification
5382  	       , exitoffice_whs_identification
5383  	       , exitoffice_whs_type
5384  	       --, importer_name
5385  	       , importer_addr_country
5386  	       --, importer_addr_line
5387  	       , forma_exportacao
5388  	       , forma_exportacao_type
5389  	       , situacao_especial
5390  	       , situacao_especial_type
5391  	       , caso_esp_transporte
5392  	       , caso_esp_transporte_type
5393  	       , observacoes_gerais
5394  	       , observacoes_gerais_type
5395  	       , motivo_dispensa_nf
5396  	       ;
5397  
5398  	  CURSOR cur_empresas(pn_empresa_id NUMBER) IS
5399  	    SELECT SubStr(Nvl(numero_documento, cnpj),1,17) cnpj
5400  	      FROM cmx_empresas
5401  	     WHERE empresa_id = pn_empresa_id;
5402  
5403  	  CURSOR cur_vinc_fat
5404  	     IS
5405  	 SELECT cmx_fnc_string_agg(fat.fatura_numero||'/'||fat.fatura_ano)
5406  	   FROM exp_due_faturas      dfat
5407  	      , exp_due 	     due
5408  	      , exp_due_fatura_tmp   tmp
5409  	      , exp_due_ship	     ship
5410  	      , exp_faturas	     fat
5411  	  WHERE dfat.due_id = due.due_id
5412  	    AND dfat.fatura_id = tmp.fatura_id
5413  	    AND dfat.fatura_id = ship.fatura_id
5414  	    AND ship.due_id   = due.due_id
5415  	    AND dfat.fatura_id = fat.fatura_id
5416  	    AND due.dt_cancel IS NULL
5417  	    AND ship.fatura_nf_id IS NULL
5418  	    AND tmp.due_tmp_id = pn_due_tmp_id
5419  	    GROUP BY fat.fatura_numero, fat.fatura_ano;
5420  
5421  	  vr_fat_ant cur_dados%ROWTYPE;
5422  	  vb_erro	       BOOLEAN;
5423  	  vn_due_id	       NUMBER;
5424  	  vn_criacao	       NUMBER;
5425  	  vc_ucr	       VARCHAR2(35) := NULL;
5426  	  vc_decl_identif      VARCHAR2(17);
5427  	  vc_faturas	       VARCHAR2(4000) := NULL;
5428  
5429  	BEGIN
5430  	  -- verifica se alguma fatura tem informação divergente das demais.
5431  	  vr_fat_ant := NULL;
5432  	  vb_erro    := FALSE;
5433  
5434  	  -- verifica se alguma fatura já possui DUE gerada do tipo embarque antecipado.
5435  	  OPEN	cur_vinc_fat;
5436  	  FETCH cur_vinc_fat INTO vc_faturas;
5437  	  CLOSE cur_vinc_fat;
5438  
5439  	  IF(vc_faturas IS NOT NULL) THEN
5440  	    cmx_prc_gera_log_erros(pn_evento_id, 'Não é possível gerar a DUE, pois a(s) fatura(s) ['||vc_faturas||'] já está(ão) vinculada(s) a uma DUE.','E');
5441  	    vb_erro := TRUE;
5442  	  END IF;
5443  
5444  	  FOR x IN cur_dados
5445  	  LOOP
5446  	    --IF x.doffice_identification IS NULL THEN
5447  	    --	cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ sem local de despacho preenchido.', 'EXP_PKG_DUE','FNC_GERAR_DUE_025',null,x.fatura_numero || '/' || x.fatura_ano),'E');
5448  	    --	vb_erro := TRUE;
5449  	    --END IF;
5450  
5451  	    IF vr_fat_ant.fatura_id IS NOT NULL THEN
5452  	      IF Nvl(x.doffice_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.doffice_identification       ,'-!-!-!') THEN
5453  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_026',null,x.fatura_numero || '/' || x.fatura_ano, 'doffice_identification'       , x.doffice_identification       ),'E');
5454  		vb_erro := TRUE;
5455  	      END IF;
5456  
5457  	      IF Nvl(x.whs_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_identification	       ,'-!-!-!') THEN
5458  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_027',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_identification'	      , x.whs_identification	       ),'E');
5459  		vb_erro := TRUE;
5460  	      END IF;
5461  
5462  	      IF Nvl(x.whs_type 		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_type		       ,'-!-!-!') THEN
5463  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_028',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_type'		      , x.whs_type		       ),'E');
5464  		vb_erro := TRUE;
5465  	      END IF;
5466  
5467  	      IF Nvl(x.whs_latitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_latitude		       ,'-!-!-!') THEN
5468  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_029',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_latitude'		      , x.whs_latitude		       ),'E');
5469  		vb_erro := TRUE;
5470  	      END IF;
5471  
5472  	      IF Nvl(x.whs_longitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_longitude 	       ,'-!-!-!') THEN
5473  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_030',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_longitude'		      , x.whs_longitude 	       ),'E');
5474  		vb_erro := TRUE;
5475  	      END IF;
5476  
5477  	      IF Nvl(x.whs_addr_line		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_addr_line 	       ,'-!-!-!') THEN
5478  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_031',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_addr_line'		      , x.whs_addr_line 	       ),'E');
5479  		vb_erro := TRUE;
5480  	      END IF;
5481  
5482  	      IF Nvl(x.currencytype		    ,'-!-!-!')	<> Nvl(vr_fat_ant.currencytype		       ,'-!-!-!') THEN
5483  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_032',null,x.fatura_numero || '/' || x.fatura_ano, 'currencytype'		      , x.currencytype		       ),'E');
5484  		vb_erro := TRUE;
5485  	      END IF;
5486  
5487  	      --IF Nvl(x.declarant_identification     ,'-!-!-!')  <> Nvl(vr_fat_ant.declarant_identification	 ,'-!-!-!') THEN
5488  	      -- cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_033',null,x.fatura_numero || '/' || x.fatura_ano, 'declarant_identification'     , x.declarant_identification	),'E');
5489  	      --  vb_erro := TRUE;
5490  	      --END IF;
5491  
5492  	      IF Nvl(x.exitoffice_identification    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_identification    ,'-!-!-!') THEN
5493  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_034',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_identification'    , x.exitoffice_identification    ),'E');
5494  		vb_erro := TRUE;
5495  	      END IF;
5496  
5497  	      IF Nvl(x.exitoffice_whs_identification,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_identification,'-!-!-!') THEN
5498  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_035',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_identification', x.exitoffice_whs_identification),'E');
5499  		vb_erro := TRUE;
5500  	      END IF;
5501  
5502  	      IF Nvl(x.exitoffice_whs_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_type	       ,'-!-!-!') THEN
5503  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_036',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_type'	      , x.exitoffice_whs_type	       ),'E');
5504  		vb_erro := TRUE;
5505  	      END IF;
5506  
5507  --	IF Nvl(x.importer_name		      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_name		 ,'-!-!-!') THEN
5508  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_037',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_name'		, x.importer_name		 ),'E');
5509  --	  vb_erro := TRUE;
5510  --	END IF;
5511  
5512  	      IF Nvl(x.importer_addr_country	    ,'-!-!-!')	<> Nvl(vr_fat_ant.importer_addr_country        ,'-!-!-!') THEN
5513  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_038',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_country'	      , x.importer_addr_country        ),'E');
5514  		vb_erro := TRUE;
5515  	      END IF;
5516  
5517  --	IF Nvl(x.importer_addr_line	      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_addr_line		 ,'-!-!-!') THEN
5518  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_039',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_line'		, x.importer_addr_line		 ),'E');
5519  --	  vb_erro := TRUE;
5520  --	END IF;
5521  
5522  	      IF Nvl(x.forma_exportacao 	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao	       ,'-!-!-!') THEN
5523  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_040',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao'	      , x.forma_exportacao	       ),'E');
5524  		vb_erro := TRUE;
5525  	      END IF;
5526  
5527  	      IF Nvl(x.forma_exportacao_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao_type        ,'-!-!-!') THEN
5528  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_041',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao_type'	      , x.forma_exportacao_type        ),'E');
5529  		vb_erro := TRUE;
5530  	      END IF;
5531  
5532  	      IF Nvl(x.situacao_especial	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial	       ,'-!-!-!') THEN
5533  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_042',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial'	      , x.situacao_especial	       ),'E');
5534  		vb_erro := TRUE;
5535  	      END IF;
5536  
5537  	      IF Nvl(x.situacao_especial_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial_type       ,'-!-!-!') THEN
5538  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_043',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial_type'       , x.situacao_especial_type       ),'E');
5539  		vb_erro := TRUE;
5540  	      END IF;
5541  
5542  	      IF Nvl(x.caso_esp_transporte	    ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte	       ,'-!-!-!') THEN
5543  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_044',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte'	      , x.caso_esp_transporte	       ),'E');
5544  		vb_erro := TRUE;
5545  	      END IF;
5546  
5547  	      IF Nvl(x.caso_esp_transporte_type     ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte_type     ,'-!-!-!') THEN
5548  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_045',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte_type'     , x.caso_esp_transporte_type     ),'E');
5549  		vb_erro := TRUE;
5550  	      END IF;
5551  
5552  	      IF Nvl(x.observacoes_gerais	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais	       ,'-!-!-!') THEN
5553  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_046',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais'	      , x.observacoes_gerais	       ),'E');
5554  		vb_erro := TRUE;
5555  	      END IF;
5556  
5557  	      IF Nvl(x.observacoes_gerais_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais_type      ,'-!-!-!') THEN
5558  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_047',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais_type'      , x.observacoes_gerais_type      ),'E');
5559  		vb_erro := TRUE;
5560  	      END IF;
5561  
5562  	      IF Nvl(x.motivo_dispensa_nf      ,'-!-!-!')  <> Nvl(vr_fat_ant.motivo_dispensa_nf      ,'-!-!-!') THEN
5563  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_047',null,x.fatura_numero || '/' || x.fatura_ano, 'motivo_dispensa_nf'	 , Nvl(x.motivo_dispensa_nf, ' ')      ),'E');
5564  		vb_erro := TRUE;
5565  	      END IF;
5566  
5567  	    END IF;
5568  
5569  	    vr_fat_ant := x;
5570  
5571  	  END LOOP;
5572  
5573  	  IF vb_erro THEN
5574  	    RETURN NULL;
5575  	  ELSE
5576  	    vn_due_id  := cmx_fnc_proxima_sequencia('exp_due_sq1');
5577  	    vc_ucr     := exp_pkg_due.fnc_ind_due('EX0002' ,'F', vr_fat_ant.fatura_id, NULL, NULL, NULL, vn_due_id);
5578  
5579  	    --IF vr_fat_ant.ucr IS NULL THEN
5580  	    IF vc_ucr IS NULL THEN
5581  	      vc_ucr := To_Char(SYSDATE, 'Y') || 'BR' || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_fat_ant.empresa_id),14,'0'),1,8) || SubStr(To_Char(SYSDATE, 'YY'),1,1) || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_fat_ant.empresa_id),14,'0'),9,6) ||  'D' || LPad(vn_due_id,16,'0');
5582  	    ELSE
5583  	      vc_ucr := To_Char(SYSDATE, 'Y') || 'BR' || SubStr(LPad(cmx_pkg_empresas.cnpj(vr_fat_ant.empresa_id),14,'0'),1,8) || SubStr(To_Char(SYSDATE, 'YY'),1,1) || vc_ucr;
5584  	    END IF;
5585  
5586  	    --EX0003
5587  	    OPEN  cur_empresas(vr_fat_ant.empresa_id);
5588  	    FETCH cur_empresas INTO vc_decl_identif;
5589  	    CLOSE cur_empresas;
5590  
5591  	    INSERT INTO exp_due
5592  	    (
5593  	      due_id
5594  	    , transmissao
5595  	    , doffice_identification
5596  	    , whs_identification
5597  	    , whs_type
5598  	    , whs_latitude
5599  	    , whs_longitude
5600  	    , whs_addr_line
5601  	    , currencytype
5602  	    , declarant_identification
5603  	    , exitoffice_identification
5604  	    , exitoffice_whs_identification
5605  	    , exitoffice_whs_type
5606  	    --, importer_name
5607  	    , importer_addr_country
5608  	    --, importer_addr_line
5609  	    , ucr
5610  --      , forma_exportacao
5611  --      , forma_exportacao_type
5612  --      , situacao_especial
5613  --      , situacao_especial_type
5614  --      , caso_esp_transporte
5615  --      , caso_esp_transporte_type
5616  --      , observacoes_gerais
5617  --      , observacoes_gerais_type
5618  	    , creation_date
5619  	    , created_by
5620  	    , last_update_date
5621  	    , last_updated_by
5622  	    , empresa_id
5623  	    , emissao
5624  	    ) VALUES ( vn_due_id
5625  		     , 0 -- transmissao
5626  		     , vr_fat_ant.doffice_identification
5627  		     , vr_fat_ant.whs_identification
5628  		     , vr_fat_ant.whs_type
5629  		     , vr_fat_ant.whs_latitude
5630  		     , vr_fat_ant.whs_longitude
5631  		     , vr_fat_ant.whs_addr_line
5632  		     , vr_fat_ant.currencytype
5633  		     , vc_decl_identif
5634  		     , vr_fat_ant.exitoffice_identification
5635  		     , vr_fat_ant.exitoffice_whs_identification
5636  		     , vr_fat_ant.exitoffice_whs_type
5637  		     --, SubStr(vr_fat_ant.importer_name, 1, 70)
5638  		     , vr_fat_ant.importer_addr_country
5639  		     --, vr_fat_ant.importer_addr_line
5640  		     , vc_ucr
5641  --	       , vr_fat_ant.forma_exportacao
5642  --	       , vr_fat_ant.forma_exportacao_type
5643  --	       , vr_fat_ant.situacao_especial
5644  --	       , vr_fat_ant.situacao_especial_type
5645  --	       , vr_fat_ant.caso_esp_transporte
5646  --	       , vr_fat_ant.caso_esp_transporte_type
5647  --	       , vr_fat_ant.observacoes_gerais
5648  --	       , vr_fat_ant.observacoes_gerais_type
5649  		     , SYSDATE
5650  		     , pn_usuario_id
5651  		     , SYSDATE
5652  		     , pn_usuario_id
5653  		     , vr_fat_ant.empresa_id
5654  		     , sysdate
5655  		     );
5656  
5657  	  END IF;
5658  
5659  	  INSERT INTO exp_due_faturas
5660  	  (
5661  	    due_fatura_id
5662  	  , due_id
5663  	  , fatura_id
5664  	  , creation_date
5665  	  , created_by
5666  	  , last_update_date
5667  	  , last_updated_by
5668  	  , importer_name
5669  	  , importer_addr_country
5670  	  , importer_addr_line
5671  	  ) SELECT cmx_fnc_proxima_sequencia('exp_due_faturas_sq1')
5672  		 , vn_due_id
5673  		 , edft.fatura_id
5674  		 , SYSDATE
5675  		 , pn_usuario_id
5676  		 , SYSDATE
5677  		 , pn_usuario_id
5678  		 , exp_pkg_due.fnc_ind_due('EX0008' ,'F', edft.fatura_id )
5679  		 , exp_pkg_due.fnc_ind_due('EX0009' ,'F', edft.fatura_id )
5680  		 , exp_pkg_due.fnc_ind_due('EX0036' ,'F', edft.fatura_id )
5681  	      FROM exp_due_fatura_tmp edft
5682  	     WHERE edft.due_tmp_id    = pn_due_tmp_id;
5683  
5684  	  prc_atual_compl( vn_due_id
5685  			 , 'DUE_RUC'
5686  			 , vc_ucr
5687  			 , pn_usuario_id
5688  			 );
5689  
5690  
5691  	  vn_criacao := fnc_criar_due(vn_due_id, pn_evento_id, pn_usuario_id);
5692  
5693  	  IF vn_criacao IS NULL THEN
5694  	    DELETE FROM exp_due_faturas WHERE due_id = vn_due_id;
5695  	    DELETE FROM exp_due 	WHERE due_id = vn_due_id;
5696  	    RETURN NULL;
5697  	  END IF;
5698  
5699  	  exp_prc_gera_due_hook1( vn_due_id
5700  				, pn_due_tmp_id
5701  				, pn_evento_id
5702  				, pn_usuario_id
5703  				);
5704  	  COMMIT;
5705  
5706  	  RETURN vn_due_id;
5707  	END fnc_gerar_due;
5708  
5709  	PROCEDURE prc_limpa_b64
5710  	AS
5711  	BEGIN
5712  	  Dbms_Lob.createtemporary(gc_ret_b64,false);
5713  	END prc_limpa_b64;
5714  
5715  	PROCEDURE prc_add_token(pc_token VARCHAR2)
5716  	AS
5717  	BEGIN
5718  	  IF (pc_token IS NOT NULL) THEN
5719  	   Dbms_lob.writeappend(gc_ret_b64,length(pc_token),pc_token);
5720  	 END IF;
5721  	END prc_add_token;
5722  
5723  	PROCEDURE prc_proc_ret(pn_due_id     NUMBER
5724  			      , pc_mensagem  VARCHAR2
5725  			      , pn_evento_id NUMBER
5726  			      , pc_tipo      VARCHAR2
5727  			      )
5728  	IS
5729  
5730  	  CURSOR cur_det(pc_item VARCHAR2)
5731  	      IS
5732  	  SELECT eds.ivc_identification
5733  	       , eds.ivc_issue
5734  	       , eds.numero_nf
5735  	       , eds.serie
5736  	       , edsi.cmmdty_line_sequence	linha
5737  	       , edsi.SEQUENCE
5738  	       , ef.fatura_numero
5739  	       , ef.fatura_ano
5740  	       , edsi.due_ship_item_id
5741  	    FROM exp_due_ship_item edsi
5742  	       , exp_due_ship	   eds
5743  	       , exp_faturas	   ef
5744  	   WHERE edsi.due_ship_id = eds.due_ship_id
5745  	     AND eds.fatura_id	   = ef.fatura_id (+)
5746  	     AND edsi.sequence = pc_item
5747  	     AND eds.due_id   = pn_due_id ;
5748  
5749  	  vc_mensagem VARCHAR2(4000);
5750  	  vc_item     VARCHAR2(4000);
5751  	  vn_pos_ini  NUMBER;
5752  	  vn_pos_fim  NUMBER;
5753  
5754  	BEGIN
5755  	  vc_mensagem := SubStr(dbms_xmlgen.Convert (pc_mensagem,1),1,4000);
5756  
5757  	  vn_pos_ini  := InStr(Upper(vc_mensagem),'ITEM DU-E') ;
5758  
5759  	  IF ( vn_pos_ini > 0 ) THEN
5760  	    vn_pos_fim := InStr(Upper(vc_mensagem),':', vn_pos_ini + 9);
5761  
5762  	    IF ( vn_pos_fim > 0 )  THEN
5763  
5764  	      vc_item := Trim(SubStr(vc_mensagem, vn_pos_ini + 9, vn_pos_fim - ( vn_pos_ini + 9)));
5765  	      Dbms_Output.put_line(vn_pos_ini || ' - ' || vn_pos_fim || ' - ' || vc_item);
5766  	      FOR x IN cur_det(vc_item) LOOP
5767  		vc_mensagem := 'Fatura [' || x.fatura_numero || '/' || x.fatura_ano || '] - Nota Fiscal [' || x.numero_nf || '-' || x.serie || '] chave [' || x.ivc_identification || '] linha [' || x.linha || ']. ' || vc_mensagem;
5768  		cmx_prc_gera_log_erros( pn_evento_id
5769  				      , vc_mensagem
5770  				      , pc_tipo
5771  				      );
5772  		--
5773  		IF(InStr(Upper(vc_mensagem), 'SUJEITOS A VERIFICAÇÃO ESTATÍSTICA DA SECEX') > 0) THEN
5774  		  UPDATE exp_due_ship_item SET flag_justificativa = 'S'
5775  					 WHERE due_ship_item_id   = x.due_ship_item_id;
5776  		END IF;
5777  		--
5778  	      END LOOP;
5779  
5780  	    END IF;
5781  	  END IF;
5782  
5783  	EXCEPTION
5784  	  WHEN OTHERS THEN
5785  	    NULL;
5786  	END;
5787  
5788  	FUNCTION fnc_proc_retorno( pn_due_id	  NUMBER
5789  				 , pn_usuario_id  NUMBER
5790  				 , pn_evento_id   NUMBER DEFAULT NULL
5791  				 , pn_nr_linha	  NUMBER DEFAULT NULL
5792  				 , pc_retificacao VARCHAR2 DEFAULT 'N'
5793  				 )
5794  	RETURN VARCHAR2
5795  	AS
5796  
5797  	  CURSOR cur_errors(pc_xml CLOB) IS
5798  	  SELECT extract(VALUE(erros), '//message/text()').getclobval() 	erros
5799  	    FROM TABLE(XMLSequence(Extract( xmltype(pc_xml)
5800  					     , '//error/message'))) erros;
5801  
5802  	  CURSOR cur_sucesso(pc_xml CLOB) IS
5803  	  SELECT extract(VALUE(due), '//message/text()').getclobval()		mensagem
5804  	       , extract(VALUE(due), '//due/text()').getclobval()		due
5805  	       , extract(VALUE(due), '//ruc/text()').getclobval()		ruc
5806  	       , extract(VALUE(due), '//date/text()').getclobval()		data
5807  	       , extract(VALUE(due), '//chaveDeAcesso/text()').getclobval()	chave_acesso
5808  	    FROM TABLE(XMLSequence(Extract( xmltype(pc_xml)
5809  					     , '//pucomexReturn'))) due;
5810  
5811  	  CURSOR cur_warnings(pc_xml CLOB) IS
5812  	  SELECT extract(VALUE(due), '//warning/text()').getclobval()		warning
5813  	    FROM TABLE(XMLSequence(Extract( xmltype(pc_xml)
5814  					     , '//pucomexReturn/warnings/warning'))) due;
5815  
5816  	  CURSOR cur_due
5817  	      IS
5818  	  SELECT ed.ucr
5819  	       , Nvl(ed.retificacao,0) retificacao
5820  	    FROM exp_due ed
5821  	   WHERE ed.due_id = pn_due_id;
5822  
5823  	  vc_clob	  CLOB;
5824  	  vn_evento_id	  NUMBER;
5825  	  vc_ucr	  VARCHAR2(100);
5826  	  vb_erro	  BOOLEAN := FALSE;
5827  	  vc_complemento  VARCHAR2(150);
5828  	  vn_retificacao  NUMBER;
5829  	  vc_etapa	  VARCHAR2(4000);
5830  	BEGIN
5831  	  vc_etapa := 'Convertendo retorno';
5832  	  vc_clob :=  fnc_base64_clob(gc_ret_b64);
5833  
5834  	  OPEN cur_due;
5835  	  FETCH cur_due INTO vc_ucr, vn_retificacao;
5836  	  CLOSE cur_due;
5837  
5838  	  IF(Nvl(pc_retificacao,'N') = 'S') THEN
5839  	    vn_retificacao := Nvl(vn_retificacao,0) + 1;
5840  	  END IF;
5841  
5842  	  vc_etapa := 'Salvando retorno';
5843  	  IF(Dbms_Lob.getlength(vc_clob) > 0) THEN
5844  	    UPDATE exp_due
5845  	       SET xml_retorno = vc_clob
5846  	     WHERE due_id = pn_due_id;
5847  	  END IF;
5848  
5849  	  IF(pn_evento_id IS NULL) THEN
5850  	    vn_evento_id := cmx_fnc_gera_evento('Verificando retorno DUE com número de RUC: ' || vc_ucr, SYSDATE,pn_usuario_id);
5851  	  ELSE
5852  	    vn_evento_id := pn_evento_id;
5853  	  END IF;
5854  
5855  	  vc_etapa := 'Lendo XML';
5856  	  IF(pn_nr_linha IS NOT NULL) THEN
5857  	    vc_complemento := 'RUC['||vc_ucr||'], Nr. Linha['||pn_nr_linha||']'||' - ';
5858  	  END IF;
5859  
5860  	  BEGIN
5861  
5862  	    FOR x IN cur_errors(vc_clob) LOOP
5863  	      vb_erro := TRUE;
5864  	      cmx_prc_gera_log_erros( vn_evento_id
5865  				    , vc_complemento||'Etapa['||vc_etapa||'] -'||dbms_xmlgen.Convert (x.erros,1)
5866  				    , 'E'
5867  				    );
5868  	      prc_proc_ret(pn_due_id, x.erros, vn_evento_id,'E');
5869  	    END LOOP;
5870  
5871  	    FOR x IN cur_warnings(vc_clob)
5872  	    LOOP
5873  	      vb_erro := TRUE;
5874  	      cmx_prc_gera_log_erros( vn_evento_id
5875  				    , vc_complemento||'Etapa['||vc_etapa||'] -'||'Warning: ' ||  dbms_xmlgen.Convert (x.warning,1)
5876  				    , 'A'
5877  				    );
5878  	      prc_proc_ret(pn_due_id, x.warning, vn_evento_id,'A');
5879  	    END LOOP;
5880  
5881  	    IF(Nvl(pc_retificacao,'N') = 'S') THEN
5882  	      FOR x IN cur_sucesso(vc_clob) LOOP
5883  		UPDATE exp_due
5884  		   SET ultimo_envio	= SYSDATE
5885  		     , last_update_date = SYSDATE
5886  		     , last_updated_by	= pn_usuario_id
5887  		     , retificacao	= vn_retificacao
5888  		 WHERE due_id = pn_due_id;
5889  
5890  		cmx_prc_gera_log_erros( vn_evento_id
5891  				      , vc_complemento||'Etapa['||vc_etapa||'] -'||dbms_xmlgen.Convert (x.mensagem,1) || ' - Due: [ ' || x.due || '].'
5892  				      , '*'
5893  				      );
5894  
5895  	      END LOOP;
5896  	    ELSE
5897  	      FOR x IN cur_sucesso(vc_clob) LOOP
5898  		UPDATE exp_due
5899  		  SET registro	       = To_Date(SubStr(x.data,1,19), 'YYYY-MM-DD HH24:MI:SS)')
5900  		    , numero	       = x.due
5901  		    , chave_acesso     = x.chave_acesso
5902  		    , ultimo_envio     = SYSDATE
5903  		    , last_update_date = SYSDATE
5904  		    , last_updated_by  = pn_usuario_id
5905  		    , retificacao      = vn_retificacao
5906  		WHERE due_id = pn_due_id;
5907  
5908  		cmx_prc_gera_log_erros( vn_evento_id
5909  				      , vc_complemento||'Etapa['||vc_etapa||'] -'||dbms_xmlgen.Convert (x.mensagem,1) || ' - Due: [ ' || x.due || '].'
5910  				      , '*'
5911  				      );
5912  	      END LOOP;
5913  	    END IF;
5914  
5915  	    COMMIT;
5916  
5917  	  EXCEPTION
5918  	    WHEN OTHERS THEN
5919  	       vb_erro := TRUE;
5920  	       cmx_prc_gera_log_erros( vn_evento_id
5921  				     , vc_complemento||'Etapa['||vc_etapa||'] -'||SubStr(vc_clob,1,3000)||' ['||SubStr(sqlerrm,1,1000)||']'
5922  				     , 'E'
5923  				     );
5924  	  END;
5925  
5926  	  IF(pn_evento_id IS NULL) THEN
5927  	    RETURN 'Verifique o evento: [' || vn_evento_id  || '].';
5928  	  ELSE
5929  
5930  	    IF(vb_erro) THEN
5931  	      RETURN 'ERRO';
5932  	    ELSE
5933  	      RETURN NULL;
5934  	    END IF;
5935  
5936  	  END IF;
5937  	END fnc_proc_retorno;
5938  
5939  	FUNCTION fnc_proc_retorno_json( pn_due_id      NUMBER
5940  				      , pn_usuario_id  NUMBER
5941  				      , pn_evento_id   NUMBER
5942  				      , pn_nr_linha    NUMBER DEFAULT NULL
5943  				      )
5944  	RETURN VARCHAR2
5945  	AS
5946  
5947  	  CURSOR cur_due
5948  	      IS
5949  	  SELECT ed.numero
5950  	    FROM exp_due ed
5951  	   WHERE ed.due_id = pn_due_id;
5952  
5953  	  CURSOR cur_verifica_situacao
5954  	      IS
5955  	  SELECT situacaodue
5956  	       , indicadorbloqueio
5957  	       , situacaocarga
5958  	       , controleadministrativo
5959  	    FROM exp_due_hist_situacao
5960  	   WHERE due_id  = pn_due_id
5961  	   ORDER BY due_situacao_id DESC;
5962  
5963  	  vt_obj_json		      cmx_pkg_json.JSONStructObj;
5964  	  vc_clob		      CLOB;
5965  	  vn_count		      NUMBER := 1;
5966  	  vb_erro		      BOOLEAN := FALSE;
5967  	  vb_inserir		      BOOLEAN := FALSE;
5968  	  vb_achou		      BOOLEAN := FALSE;
5969  	  vc_numero		      VARCHAR2(100);
5970  	  vc_complemento	      VARCHAR2(150);
5971  	  vc_etapa		      VARCHAR2(4000);
5972  	  vc_conteudo		      VARCHAR2(2000);
5973  	  vc_tipo		      VARCHAR2(100);
5974  	  vr_situacao		      cur_verifica_situacao%ROWTYPE;
5975  
5976  	  vc_numerodue		      VARCHAR2(100);
5977  	  vc_numeroruc		      VARCHAR2(100);
5978  	  vc_situacaodue	      VARCHAR2(100);
5979  	  vn_situacao_id	      NUMBER;
5980  	  vd_datasituacaodue	      DATE;
5981  	  vn_indicadorbloqueio	      NUMBER;
5982  	  vc_controleadministrativo   VARCHAR2(100);
5983  	  vc_uaembarque 	      VARCHAR2(100);
5984  	  vc_uadespacho 	      VARCHAR2(100);
5985  	  vc_responsaveluadespacho    VARCHAR2(100);
5986  	  vc_cdrecintoaddespacho      VARCHAR2(100);
5987  	  vc_cdrecintoadembarque      VARCHAR2(100);
5988  	  vc_coordenadasdespacho      VARCHAR2(100);
5989  	  vc_recintodespacho	      VARCHAR2(100);
5990  	  vc_declarante_num	      VARCHAR2(100);
5991  	  vc_declarante_tipo	      VARCHAR2(100);
5992  	  vc_exportadores_num	      VARCHAR2(100);
5993  	  vc_exportadores_tipo	      VARCHAR2(100);
5994  	  vc_situacaocarga	      VARCHAR2(100);
5995  	  vn_situacaocarga_id	      NUMBER;
5996  	  vn_due_status_id	      NUMBER;
5997  	  vn_timestamp		      NUMBER;
5998  	  vd_cancel		      DATE;
5999  
6000  	  FUNCTION fnc_trata_campo(pn_index NUMBER) RETURN VARCHAR2 IS
6001  	    vc_dados VARCHAR2(2000);
6002  	  BEGIN
6003  
6004  	    vc_dados	:= vt_obj_json(pn_index).item;
6005  	    vc_dados	:= REPLACE(vc_dados, '"', '');
6006  	    vc_dados	:= Trim(vc_dados);
6007  
6008  	    IF(Upper(vc_dados) = 'NULL') THEN
6009  	      vc_dados := NULL;
6010  	    END IF;
6011  
6012  	    RETURN vc_dados;
6013  	  END;
6014  
6015  	  PROCEDURE p_prc_inserir IS
6016  	  BEGIN
6017  
6018  	    INSERT INTO exp_due_hist_situacao
6019  	    (
6020  	      due_situacao_id
6021  	    , due_id
6022  	    , numeroDUE
6023  	    , numeroRUC
6024  	    , situacaoDUE
6025  	    , dataSituacaoDUE
6026  	    , indicadorBloqueio
6027  	    , uaDespacho
6028  	    , responsaveluaDespacho
6029  	    , uaEmbarque
6030  	    , niDeclarante
6031  	    , niExportador
6032  	    , situacaoCarga
6033  	    , cdRecintoAdDespacho
6034  	    , coordenadasDespacho
6035  	    , cdRecintoAdEmbarque
6036  	    , tipoDeclarante
6037  	    , tipoExportador
6038  	    , controleAdministrativo
6039  	    , conteudo_json
6040  	    , creation_date
6041  	    , created_by
6042  	    , last_update_date
6043  	    , last_updated_by
6044  	    ) VALUES (
6045  		       cmx_fnc_proxima_sequencia('exp_due_hist_situacao_SQ1')
6046  		     , pn_due_id
6047  		     , vc_numerodue
6048  		     , vc_numeroruc
6049  		     , vc_situacaodue
6050  		     , vd_datasituacaodue
6051  		     , vn_indicadorbloqueio
6052  		     , vc_uadespacho
6053  		     , vc_responsaveluadespacho
6054  		     , vc_uaembarque
6055  		     , vc_declarante_num
6056  		     , vc_exportadores_num
6057  		     , vc_situacaocarga
6058  		     , vc_cdrecintoaddespacho
6059  		     , vc_coordenadasdespacho
6060  		     , vc_cdrecintoadembarque
6061  		     , vc_declarante_tipo
6062  		     , vc_exportadores_tipo
6063  		     , vc_controleadministrativo
6064  		     , vc_clob
6065  		     , SYSDATE
6066  		     , pn_usuario_id
6067  		     , SYSDATE
6068  		     , pn_usuario_id
6069  		     );
6070  
6071  	    IF(vc_situacaodue = '70') THEN
6072  	      UPDATE exp_due SET dt_averbacao = vd_datasituacaodue
6073  			   WHERE due_id      = pn_due_id;
6074  	    ELSIF(vc_situacaodue IN ('80', '81', '82', '83')) THEN
6075  	      UPDATE exp_due SET dt_cancel = vd_datasituacaodue
6076  			   WHERE due_id      = pn_due_id;
6077  	    END IF;
6078  
6079  	    prc_atualiza_datas( pn_due_id
6080  			      , Upper(vc_situacaodue)
6081  			      , vd_datasituacaodue
6082  			      );
6083  
6084  	  END p_prc_inserir;
6085  
6086  	BEGIN
6087  	  vc_clob :=  fnc_base64_clob(gc_ret_b64);
6088  
6089  	  OPEN cur_due;
6090  	  FETCH cur_due INTO vc_numero;
6091  	  CLOSE cur_due;
6092  
6093  	  IF(pn_nr_linha IS NOT NULL) THEN
6094  	    vc_complemento := 'Número['||vc_numero||'], Nr. Linha['||pn_nr_linha||']'||' - ';
6095  	  END IF;
6096  
6097  	  IF(dbms_lob.getlength(vc_clob) = 0) THEN
6098  	    vb_erro  := TRUE;
6099  	    cmx_prc_gera_log_erros ( pn_evento_id
6100  				  , vc_complemento||'Não foi encontrado informações no arquivo JSON.'
6101  				  , 'E'
6102  				  );
6103  	  END IF;
6104  
6105  	  IF(instr(vc_clob, '{') = 0) THEN
6106  	    vb_erro  := TRUE;
6107  	    cmx_prc_gera_log_erros ( pn_evento_id
6108  				  , vc_complemento||SubStr(vc_clob, 1, 4000)
6109  				  , 'E'
6110  				  );
6111  	  END IF;
6112  
6113  	  IF NOT(vb_erro) THEN
6114  
6115  	    UPDATE exp_due SET json_retorno = vc_clob
6116  			 WHERE due_id = pn_due_id;
6117  
6118  	    vc_etapa := 'Carregando JSON.';
6119  	    vt_obj_json := cmx_pkg_json.clob2JSON(vc_clob, '"');
6120  
6121  	    vc_etapa := 'Validando tamanho do JSON.';
6122  	    IF(vt_obj_json.Count <= 0) THEN
6123  	      vb_erro  := TRUE;
6124  	      cmx_prc_gera_log_erros ( pn_evento_id
6125  				     , vc_complemento||'Erro ao carregar JSON.'
6126  				     , 'E'
6127  				     );
6128  	    END IF;
6129  
6130  	    IF NOT(vb_erro) THEN
6131  
6132  	      vc_etapa	    := 'Lendo JSON.';
6133  	      vb_inserir    := FALSE;
6134  	      WHILE vn_count <= vt_obj_json.Count LOOP
6135  
6136  		vc_tipo     := vt_obj_json(vn_count).type;
6137  		vc_conteudo := vt_obj_json(vn_count).item;
6138  
6139  		vc_conteudo := REPLACE(vc_conteudo, '"', '');
6140  		vc_conteudo := Trim(vc_conteudo);
6141  
6142  		IF(Upper(vc_conteudo) = 'NUMERODUE') THEN
6143  
6144  		  IF (vb_inserir) THEN
6145  
6146  		    vb_achou := FALSE;
6147  		    IF(vc_situacaodue IS NOT NULL) THEN
6148  		      vc_etapa := 'Verifica se a situação é igual a última situação da DUE.';
6149  		      OPEN  cur_verifica_situacao;
6150  		      FETCH cur_verifica_situacao INTO vr_situacao;
6151  		      vb_achou := cur_verifica_situacao%FOUND;
6152  		      CLOSE cur_verifica_situacao;
6153  
6154  		      IF NOT(vb_achou) OR (    vr_situacao.situacaodue <>  vc_situacaodue OR vr_situacao.indicadorbloqueio <> vn_indicadorbloqueio
6155  					    OR vr_situacao.situacaocarga <> vc_situacaocarga OR vr_situacao.controleadministrativo <> vc_controleadministrativo
6156  					  ) THEN
6157  			vc_etapa := 'Inserir JSON.';
6158  			p_prc_inserir;
6159  		      END IF;
6160  		    END IF;
6161  
6162  		    vb_inserir		      := FALSE;
6163  		    vc_numerodue	      := NULL;
6164  		    vc_numeroruc	      := NULL;
6165  		    vc_situacaodue	      := NULL;
6166  		    vn_situacao_id	      := NULL;
6167  		    vd_datasituacaodue	      := NULL;
6168  		    vn_indicadorbloqueio      := NULL;
6169  		    vc_controleadministrativo := NULL;
6170  		    vc_uaembarque	      := NULL;
6171  		    vc_uadespacho	      := NULL;
6172  		    vc_responsaveluadespacho  := NULL;
6173  		    vc_cdrecintoaddespacho    := NULL;
6174  		    vc_cdrecintoadembarque    := NULL;
6175  		    vc_coordenadasdespacho    := NULL;
6176  		    vc_recintodespacho	      := NULL;
6177  		    vc_declarante_num	      := NULL;
6178  		    vc_declarante_tipo	      := NULL;
6179  		    vc_exportadores_num       := NULL;
6180  		    vc_exportadores_tipo      := NULL;
6181  		    vc_situacaocarga	      := NULL;
6182  		    vn_situacaocarga_id       := NULL;
6183  		    vn_timestamp	      := NULL;
6184  		  END IF;
6185  
6186  		  vc_etapa := 'Convertendo número da DUE.';
6187  
6188  		  vn_count	 := vn_count + 2;
6189  		  vc_numerodue	 := fnc_trata_campo(vn_count);
6190  		  vb_inserir	 := TRUE;
6191  		ELSIF(Upper(vc_conteudo) = 'NUMERORUC') THEN
6192  		  vc_etapa := 'Convertendo Nr. RUC da DUE.';
6193  
6194  		  vn_count	 := vn_count + 2;
6195  		  vc_numeroruc	 := fnc_trata_campo(vn_count);
6196  		  vb_inserir	 := TRUE;
6197  		ELSIF(Upper(vc_conteudo) = 'SITUACAODUE') THEN
6198  		  vc_etapa := 'Convertendo Situação da DUE.';
6199  
6200  		  vn_count	 := vn_count + 2;
6201  		  vc_situacaodue := fnc_trata_campo(vn_count);
6202  		  vb_inserir	 := TRUE;
6203  		ELSIF(Upper(vc_conteudo) = 'DATASITUACAODUE') THEN
6204  		  vc_etapa := 'Convertendo Data da situação da DUE.';
6205  
6206  		  vn_count	 := vn_count + 2;
6207  		  vc_conteudo	 := fnc_trata_campo(vn_count);
6208  		  vc_conteudo	 := SubStr(vc_conteudo, 1, 19);
6209  
6210  		  IF(vc_conteudo IS NOT NULL) THEN
6211  		    vd_datasituacaodue	:= To_Date(vc_conteudo, 'RRRR-MM-DD HH24:MI:SS');
6212  		    vb_inserir		:= TRUE;
6213  		  END IF;
6214  		ELSIF(Upper(vc_conteudo) = 'INDICADORBLOQUEIO') THEN
6215  		  vc_etapa := 'Convertendo indicador de bloqueio da DUE.';
6216  
6217  		  vn_count	 := vn_count + 2;
6218  		  vc_conteudo	 := fnc_trata_campo(vn_count);
6219  
6220  		  IF(vc_conteudo IS NOT NULL) THEN
6221  		    vn_indicadorbloqueio := To_Number(vc_conteudo);
6222  		    vb_inserir		 := TRUE;
6223  		  END IF;
6224  		ELSIF(Upper(vc_conteudo) = 'CONTROLEADMINISTRATIVO') THEN
6225  		  vc_etapa := 'Convertendo Controle administrativo da DUE.';
6226  
6227  		  vn_count		    := vn_count + 2;
6228  		  vc_controleadministrativo := fnc_trata_campo(vn_count);
6229  		  vb_inserir		    := TRUE;
6230  		ELSIF(Upper(vc_conteudo) = 'UAEMBARQUE') THEN
6231  		  vc_etapa := 'Convertendo UAEMBARQUE da DUE.';
6232  
6233  		  vn_count	 := vn_count + 2;
6234  		  vc_uaembarque  := fnc_trata_campo(vn_count);
6235  		  vb_inserir	 := TRUE;
6236  		ELSIF(Upper(vc_conteudo) = 'UADESPACHO') THEN
6237  		  vc_etapa := 'Convertendo UADESPACHO da DUE.';
6238  
6239  		  vn_count	 := vn_count + 2;
6240  		  vc_uadespacho  := fnc_trata_campo(vn_count);
6241  		  vb_inserir	 := TRUE;
6242  		ELSIF(Upper(vc_conteudo) = 'RESPONSAVELUADESPACHO') THEN
6243  		  vc_etapa := 'Convertendo Responsável UADESPACHO da DUE.';
6244  
6245  		  vn_count		    := vn_count + 2;
6246  		  vc_responsaveluadespacho  := fnc_trata_campo(vn_count);
6247  		  vb_inserir		    := TRUE;
6248  		ELSIF(Upper(vc_conteudo) = 'CODIGORECINTOADUANEIRODESPACHO') THEN
6249  		  vc_etapa := 'Convertendo Código do recinto aduaneiro de despacho da DUE.';
6250  
6251  		  vn_count		  := vn_count + 2;
6252  		  vc_cdrecintoaddespacho  := fnc_trata_campo(vn_count);
6253  		  vb_inserir		  := TRUE;
6254  		ELSIF(Upper(vc_conteudo) = 'CODIGORECINTOADUANEIROEMBARQUE') THEN
6255  		  vc_etapa := 'Convertendo Código do recinto aduaneiro de embarque da DUE.';
6256  
6257  		  vn_count		  := vn_count + 2;
6258  		  vc_cdrecintoadembarque  := fnc_trata_campo(vn_count);
6259  		  vb_inserir		  := TRUE;
6260  		ELSIF(Upper(vc_conteudo) = 'COORDENADASDESPACHO') THEN
6261  		  vc_etapa := 'Convertendo Coordenadas de despacho da DUE.';
6262  
6263  		  vn_count		  := vn_count + 2;
6264  		  vc_coordenadasdespacho  := fnc_trata_campo(vn_count);
6265  		  vb_inserir		  := TRUE;
6266  		ELSIF(Upper(vc_conteudo) = 'RECINTODESPACHO') THEN
6267  		  vc_etapa := 'Convertendo Recinto de despacho da DUE.';
6268  
6269  		  vn_count	      := vn_count + 2;
6270  		  vc_recintodespacho  := fnc_trata_campo(vn_count);
6271  		  vb_inserir	      := TRUE;
6272  		ELSIF(Upper(vc_conteudo) = 'DECLARANTE') THEN
6273  		  vc_etapa := 'Convertendo Declarante da DUE.';
6274  
6275  		  vn_count	 := vn_count + 2;
6276  		  vc_conteudo	 := fnc_trata_campo(vn_count);
6277  
6278  		  IF(vc_conteudo = '{') THEN
6279  
6280  		    vn_count	   := vn_count + 1;
6281  		    vc_conteudo    := fnc_trata_campo(vn_count);
6282  
6283  		    IF(Upper(vc_conteudo) = 'NUMERO') THEN
6284  		      vn_count		:= vn_count + 2;
6285  		      vc_declarante_num := fnc_trata_campo(vn_count);
6286  		      vb_inserir	:= TRUE;
6287  		    END IF;
6288  
6289  		    vn_count	   := vn_count + 2;
6290  		    vc_conteudo    := fnc_trata_campo(vn_count);
6291  
6292  		    IF(Upper(vc_conteudo) = 'TIPO') THEN
6293  		      vn_count		 := vn_count + 2;
6294  		      vc_declarante_tipo := fnc_trata_campo(vn_count);
6295  		      vb_inserir	 := TRUE;
6296  		    END IF;
6297  		  END IF;
6298  
6299  		ELSIF(Upper(vc_conteudo) = 'EXPORTADORES') THEN
6300  		  vc_etapa := 'Convertendo Exportadores da DUE.';
6301  
6302  		  vn_count	 := vn_count + 3;
6303  		  vc_conteudo	 := fnc_trata_campo(vn_count);
6304  
6305  		  IF(vc_conteudo = '{') THEN
6306  
6307  		    vn_count	   := vn_count + 1;
6308  		    vc_conteudo    := fnc_trata_campo(vn_count);
6309  
6310  		    IF(Upper(vc_conteudo) = 'NUMERO') THEN
6311  		      vn_count		  := vn_count + 2;
6312  		      vc_exportadores_num := fnc_trata_campo(vn_count);
6313  		      vb_inserir	  := TRUE;
6314  		    END IF;
6315  
6316  		    vn_count	   := vn_count + 2;
6317  		    vc_conteudo    := fnc_trata_campo(vn_count);
6318  
6319  		    IF(Upper(vc_conteudo) = 'TIPO') THEN
6320  		      vn_count		   := vn_count + 2;
6321  		      vc_exportadores_tipo := fnc_trata_campo(vn_count);
6322  		      vb_inserir	   := TRUE;
6323  		    END IF;
6324  		  END IF;
6325  
6326  		ELSIF(Upper(vc_conteudo) = 'SITUACAOCARGA') THEN
6327  		  vc_etapa := 'Convertendo Situação da carga da DUE.';
6328  
6329  		  vn_count	    := vn_count + 3;
6330  		  vc_situacaocarga  := fnc_trata_campo(vn_count);
6331  		  vb_inserir	    := TRUE;
6332  		END IF;
6333  
6334  		vn_count := vn_count + 1;
6335  	      END LOOP;
6336  
6337  	      vb_achou := FALSE;
6338  	      IF(vc_situacaodue IS NOT NULL) THEN
6339  		vc_etapa := 'Verifica se a situação é igual a última situação da DUE.';
6340  		OPEN  cur_verifica_situacao;
6341  		FETCH cur_verifica_situacao INTO vr_situacao;
6342  		vb_achou := cur_verifica_situacao%FOUND;
6343  		CLOSE cur_verifica_situacao;
6344  
6345  		IF NOT(vb_achou) OR (	 vr_situacao.situacaodue <>  vc_situacaodue OR vr_situacao.indicadorbloqueio <> vn_indicadorbloqueio
6346  				      OR vr_situacao.situacaocarga <> vc_situacaocarga OR vr_situacao.controleadministrativo <> vc_controleadministrativo
6347  				    ) THEN
6348  		  vc_etapa := 'Inserir JSON.';
6349  		  p_prc_inserir;
6350  		  vn_count := vn_count + 1;
6351  		END IF;
6352  
6353  		UPDATE exp_due SET situacaodue		      = vc_situacaodue
6354  				 , datasituacaodue	      = vd_datasituacaodue
6355  				 , indicadorbloqueio	      = vn_indicadorbloqueio
6356  				 , controleadministrativo     = vc_controleadministrativo
6357  				 , situacaocarga	      = vc_situacaocarga
6358  			    WHERE due_id = pn_due_id;
6359  	      END IF;
6360  
6361  	    END IF;
6362  
6363  	  END IF;
6364  
6365  	  --cmx_prc_gera_log_erros(pn_evento_id, vc_complemento||' Retorno JSON['||SubStr(vc_clob, 1, 4000)||']','*');
6366  
6367  	  IF(vb_erro) THEN
6368  	    RETURN 'ERRO';
6369  	  ELSE
6370  	    RETURN NULL;
6371  	  END IF;
6372  
6373  	EXCEPTION
6374  	  WHEN OTHERS THEN
6375  
6376  	    IF(vc_complemento IS NOT NULL) THEN
6377  	      vc_complemento := vc_complemento||',';
6378  	    END IF;
6379  
6380  	    cmx_prc_gera_log_erros(pn_evento_id, vc_complemento||' Etapa['||vc_etapa||'], Conteúdo['||vc_conteudo||'] - '||SQLERRM,'E');
6381  	    RETURN 'ERRO';
6382  	END fnc_proc_retorno_json;
6383  
6384  	FUNCTION fnc_valida_trans_due( pn_due_id      NUMBER
6385  				     , pn_usuario_id  NUMBER
6386  				     , pn_evento_id   NUMBER DEFAULT NULL
6387  				     , pn_nr_linha    NUMBER DEFAULT NULL
6388  				     )
6389  	RETURN NUMBER
6390  	AS
6391  	  CURSOR cur_due
6392  	      IS
6393  	  SELECT due.*
6394  	    FROM exp_due due
6395  	   WHERE due_id = pn_due_id;
6396  
6397  	  CURSOR cur_nf
6398  	      IS
6399  	  SELECT eds.*
6400  	    FROM exp_vw_due_ship eds
6401  	   WHERE eds.due_id = pn_due_id
6402  	   ORDER BY due_ship_id;
6403  
6404  	  CURSOR cur_nfi(pn_due_ship_id NUMBER)
6405  	      IS
6406  	  SELECT edsi.*
6407  	    FROM exp_vw_due_ship_item edsi
6408  
6409  	   WHERE edsi.due_ship_id = pn_due_ship_id
6410  	ORDER BY due_ship_item_id;
6411  
6412  	  CURSOR cur_forma
6413  	      IS
6414  	  SELECT due_add_info_id
6415  	    FROM exp_vw_due_add_info dai
6416  	   WHERE due_id = pn_due_id
6417  	     AND dai.statementtypecode = 'CUS';
6418  
6419  	  CURSOR cur_destaques(pc_ncm VARCHAR2)
6420  	      IS
6421  	  SELECT Count(*) destaques
6422  	    FROM cmx_tab_ncm_atributos
6423  	   WHERE codigo = pc_ncm
6424  	     AND Nvl(obrigatorio, 'N') = 'S'
6425  	     AND Nvl(ativo, 'N') = 'S';
6426  
6427  	  CURSOR cur_due_dest(pn_due_ship_item_id NUMBER)
6428  	      IS
6429  	  SELECT edsc.typecode	   atributo
6430  	       , edsc.description  destaque
6431  	    FROM exp_vw_due_si_char edsc
6432  	   WHERE pn_due_ship_item_id = edsc.due_ship_item_id;
6433  
6434  	  CURSOR cur_erros(pn_evento_id NUMBER)
6435  	      IS
6436  	  SELECT cle.evento_id
6437  	    FROM cmx_log_erros cle
6438  	   WHERE cle.evento_id = pn_evento_id;
6439  
6440  	  CURSOR cur_pais_dest (pn_due_ship_item_id NUMBER)
6441  	     IS
6442  	  SELECT edd.countrycode
6443  	       , edd.gm_tariffquantity
6444  	    FROM exp_vw_due_si_dest edd
6445  	   WHERE edd.due_ship_item_id = pn_due_ship_item_id;
6446  
6447  	  CURSOR cur_enq (pn_due_ship_item_id NUMBER)
6448  	     IS
6449  	  SELECT ede.due_si_enq_id
6450  	    FROM exp_vw_due_si_enq ede
6451  	   WHERE ede.due_ship_item_id = pn_due_ship_item_id;
6452  
6453  	  CURSOR cur_atributo_ncm( pc_ncm      VARCHAR2
6454  				 , pc_atributo VARCHAR2
6455  				 )
6456  	      IS
6457  	  SELECT cna.codigo  atributo
6458  	    FROM cmx_tab_ncm_atributos cna
6459  	   WHERE cna.ncm      = pc_ncm
6460  	     AND cna.codigo   = pc_atributo;
6461  
6462  	  CURSOR cur_dominio_ncm( pc_ncm      VARCHAR2
6463  				, pc_dominio  VARCHAR2
6464  				, pc_atributo VARCHAR2
6465  				)
6466  	      IS
6467  	  SELECT cnac.codigo destaque
6468  	    FROM cmx_tab_ncm_atributos cna
6469  	       , cmx_tab_ncm_atr_compl cnac
6470  	   WHERE cna.ncm_atributo_id = cnac.ncm_atributo_id
6471  	     --AND cnac.tipo	= 'DO'
6472  	     AND cna.ncm      = pc_ncm
6473  	     AND (Upper(cna.formapreench_attr) <> 'LISTA_ESTATICA' OR cnac.codigo  = pc_dominio)
6474  	     AND (cna.codigo  = pc_atributo OR pc_atributo IS NULL);
6475  
6476  	  CURSOR cur_fat
6477  	      IS
6478  	  SELECT importer_name
6479  	       , importer_addr_country
6480  	       , importer_addr_line
6481  	       , ef.fatura_numero
6482  	       , ef.fatura_ano
6483  	    FROM exp_due_faturas edf
6484  	       , exp_faturas	 ef
6485  	   WHERE edf.fatura_id = ef.fatura_id
6486  	     AND due_id = pn_due_id;
6487  
6488  	  CURSOR cur_enq_fin(pn_due_ship_item_id NUMBER)
6489  	      IS
6490  	  SELECT ede.due_si_enq_id
6491  	    FROM exp_due_si_enq ede
6492  	   WHERE ede.due_ship_item_id = pn_due_ship_item_id
6493  	     AND ede.enquadramento IN ('81501', '81502', '81503');
6494  
6495  	  vn_evento_id	  NUMBER;
6496  	  vr_due	  cur_due%ROWTYPE;
6497  	  vb_found	  BOOLEAN;
6498  	  vb_erro	  BOOLEAN := FALSE;
6499  	  vn_forma_id	  NUMBER;
6500  	  vc_destaque	  VARCHAR2(150);
6501  	  vn_destaques	  NUMBER;
6502  	  vn_dummy	  NUMBER;
6503  	  vc_atributo	  VARCHAR2(10);
6504  	  vc_complemento  VARCHAR2(150);
6505  	  vb_erro_pais	  BOOLEAN := FALSE;
6506  	  vc_pais_ant	  VARCHAR2(10);
6507  
6508  	  vn_count	  NUMBER := 0;
6509  	BEGIN
6510  	  OPEN cur_due;
6511  	  FETCH cur_due INTO vr_due;
6512  	  vb_found	:= cur_due%FOUND;
6513  	  CLOSE cur_due;
6514  
6515  	  IF vb_found THEN
6516  
6517  	    IF(pn_evento_id IS NULL) THEN
6518  	      vn_evento_id := cmx_fnc_gera_evento( 'Validando DUE com número de RUC: '|| vr_due.ucr
6519  						 , SYSDATE
6520  						 , pn_usuario_id
6521  						 );
6522  	    ELSE
6523  	      vn_evento_id := pn_evento_id;
6524  	    END IF;
6525  
6526  	    IF(pn_nr_linha IS NOT NULL) THEN
6527  	      vc_complemento := 'RUC['||vr_due.ucr||'], Nr. Linha['||pn_nr_linha||']'||' - ';
6528  	    END IF;
6529  
6530  	    IF vr_due.ucr IS NULL THEN
6531  	      vb_erro := TRUE;
6532  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Número da RUC não preenchido','E');
6533  	    END IF;
6534  
6535  	    OPEN cur_forma;
6536  	    FETCH cur_forma INTO vn_forma_id;
6537  	    vb_found  := cur_forma%FOUND;
6538  	    CLOSE cur_forma;
6539  
6540  	    IF NOT vb_found THEN
6541  	      vb_erro := TRUE;
6542  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Forma de exportação não preenchida na aba Informações Adicionais.','E');
6543  	    END IF;
6544  
6545  	    IF vr_due.doffice_identification IS NULL THEN
6546  	      vb_erro := TRUE;
6547  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Local de despacho não preenchido na aba Local de Despacho.','E');
6548  	    END IF;
6549  
6550  	    /*
6551  	    IF vr_due.whs_identification IS NULL THEN
6552  	      vb_erro := TRUE;
6553  	      cmx_prc_gera_log_erros( vn_evento_id
6554  				    , vc_complemento||'Portal Único não está tratando informações de Despacho fora do recinto.'
6555  				    , 'E'
6556  				    , 'Favor preencher o recinto aduaneiro de embarque na aba Local de Despacho.'
6557  				    );
6558  	    END IF;
6559  	    */
6560  
6561  	    IF vr_due.whs_type IS NULL THEN
6562  	      vb_erro := TRUE;
6563  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Tipo de recinto aduaneiro de embarque não preenchido na aba Local de Despacho.','E');
6564  	    END IF;
6565  
6566  	    IF vr_due.exitoffice_identification IS NULL AND vr_due.whs_type <> '19' THEN
6567  	      vb_erro := TRUE;
6568  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Local de embarque não preenchido na aba Local de Embarque.','E');
6569  	    END IF;
6570  
6571  	    IF vr_due.exitoffice_whs_identification IS NULL AND vr_due.exitoffice_whs_type = '281' THEN
6572  	      vb_erro := TRUE;
6573  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Recinto aduaneiro de embarque não preenchido na aba Local de Embarque.','E');
6574  	    END IF;
6575  
6576  	    IF vr_due.exitoffice_whs_type IS NULL THEN
6577  	      vb_erro := TRUE;
6578  	      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Tipo de recinto aduaneiro de embarque não preenchido na aba Local de Embarque.','E');
6579  	    END IF;
6580  
6581  --      IF vr_due.importer_name IS NULL THEN
6582  --	vb_erro := TRUE;
6583  --	cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Importador não preenchido na aba Importador.','E');
6584  --      END IF;
6585  
6586  --      IF vr_due.importer_addr_line IS NULL THEN
6587  --	vb_erro := TRUE;
6588  --	cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Endereço do importador não preenchido na aba Importador.','E');
6589  --      END IF;
6590  
6591  --      IF vr_due.importer_addr_country IS NULL THEN
6592  --	vb_erro := TRUE;
6593  --	cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'País do importador não preenchido na aba Importador.','E');
6594  --      END IF;
6595  
6596  	    FOR fat IN cur_fat LOOP
6597  
6598  	      IF(vn_count = 0) THEN
6599  		vc_pais_ant := fat.importer_addr_country;
6600  	      END IF;
6601  
6602  	      IF fat.importer_name IS NULL THEN
6603  		vb_erro := TRUE;
6604  		cmx_prc_gera_log_erros( vn_evento_id
6605  				      , vc_complemento||'Fatura['||fat.fatura_numero||'/'||fat.fatura_ano||'] - Importador não preenchido na aba Faturas.'
6606  				      ,'E'
6607  				      , 'Favor preencher o importador na aba (Faturas).'
6608  				      );
6609  	      END IF;
6610  
6611  	      IF fat.importer_addr_line IS NULL THEN
6612  		vb_erro := TRUE;
6613  		cmx_prc_gera_log_erros( vn_evento_id
6614  				      , vc_complemento||'Fatura['||fat.fatura_numero||'/'||fat.fatura_ano||'] - Endereço do importador não preenchido na aba Faturas.'
6615  				      , 'E'
6616  				      , 'Favor preencher o endereço do importador na aba (Faturas).'
6617  				      );
6618  	      END IF;
6619  
6620  	      IF fat.importer_addr_country IS NULL THEN
6621  		vb_erro := TRUE;
6622  		cmx_prc_gera_log_erros( vn_evento_id
6623  				      , vc_complemento||'Fatura['||fat.fatura_numero||'/'||fat.fatura_ano||'] - País do importador não preenchido na aba Faturas.'
6624  				      , 'E'
6625  				      , 'Favor preencher o país do importador na aba (Faturas).'
6626  				      );
6627  	      END IF;
6628  
6629  	      IF(Nvl(fat.importer_addr_country, '-----') <> Nvl(vc_pais_ant, '-----')) THEN
6630  		vb_erro_pais := TRUE;
6631  	      END IF;
6632  
6633  	      vc_pais_ant := fat.importer_addr_country;
6634  	      vn_count	  := vn_count + 1;
6635  	    END LOOP;
6636  
6637  	    IF(vb_erro_pais) THEN
6638  	      vb_erro := TRUE;
6639  	      cmx_prc_gera_log_erros( vn_evento_id
6640  				    , vc_complemento||'O país dos importadores não podem ser diferentes.'
6641  				    , 'E'
6642  				    );
6643  	    END IF;
6644  
6645  	    FOR nf IN cur_nf LOOP
6646  	      IF nf.ivc_identification IS NULL AND nf.ivc_addit_statement IS NULL  THEN
6647  		vb_erro := TRUE;
6648  		cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Preencha a chave NF ou o motivo de dispensa da NF na aba Notas Fiscais.','E');
6649  	      END IF;
6650  
6651  	      IF(nf.ivc_tradeterms_condition IS NULL) THEN
6652  		vb_erro := TRUE;
6653  		cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Incoterm não preenchido na aba Notas Fiscais.','E');
6654  	      END IF;
6655  
6656  	      FOR nfi IN cur_nfi(nf.due_ship_id)
6657  	      LOOP
6658  		IF nfi.customsvalue IS NULL THEN
6659  		  vb_erro := TRUE;
6660  		  cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Valor FOB não preenchido.','E');
6661  		END IF;
6662  
6663  		vb_found := FALSE;
6664  		OPEN  cur_enq_fin(nfi.due_ship_item_id);
6665  		FETCH cur_enq_fin INTO vn_dummy;
6666  		vb_found := cur_enq_fin%FOUND;
6667  		CLOSE cur_enq_fin;
6668  
6669  		IF(vb_found) THEN
6670  		  IF(Nvl(nfi.financedvalue,0) = 0 OR Nvl(nfi.financedvalue,0) > Nvl(nfi.cmmdty_value,0)) THEN
6671  		    vb_erro := TRUE;
6672  		    cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - O valor do financiamento deve ser maior que zero e menor ou igual ao VMCV.','E');
6673  		  END IF;
6674  		END IF;
6675  
6676  		vb_found := FALSE;
6677  		FOR dest IN cur_due_dest(nfi.due_ship_item_id)
6678  		LOOP
6679  
6680  		  IF dest.destaque IS NULL AND dest.atributo IS NULL THEN
6681  		    vb_erro := TRUE;
6682  		    cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Existe uma linha em branco na aba Atributos NCM, preencha as informações ou exclua a linha.','E');
6683  		  ELSE
6684  		    /* Validando o atributo do NCM */
6685  		    IF(dest.atributo IS NULL) THEN
6686  		      vb_erro := TRUE;
6687  		      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o código do atributo para NCM['||nfi.ncm||'].','E');
6688  		    ELSE
6689  		      vb_found := FALSE;
6690  		      OPEN cur_atributo_ncm(nfi.ncm, dest.atributo);
6691  		      FETCH cur_atributo_ncm INTO vc_atributo;
6692  		      vb_found := cur_atributo_ncm%FOUND;
6693  		      CLOSE cur_atributo_ncm;
6694  
6695  		      IF NOT(vb_found) THEN
6696  			vb_erro := TRUE;
6697  			cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Atributo ['||dest.atributo||'] informado é inválido para a NCM['||nfi.ncm||'].','E');
6698  		      END IF;
6699  		    END IF;
6700  
6701  		    /* Validando o domínio do NCM */
6702  		    IF(dest.destaque IS NULL) THEN
6703  		      vb_erro := TRUE;
6704  		      cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o código do domínio para a NCM['||nfi.ncm||'].','E');
6705  		    ELSE
6706  		      vb_found := FALSE;
6707  		      OPEN cur_dominio_ncm(nfi.ncm, dest.destaque, dest.atributo);
6708  		      FETCH cur_dominio_ncm INTO vc_atributo;
6709  		      vb_found := cur_dominio_ncm%FOUND;
6710  		      CLOSE cur_dominio_ncm;
6711  
6712  		      IF NOT(vb_found) THEN
6713  			vb_erro := TRUE;
6714  			cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Domínio ['||dest.destaque||'] informado é inválido para a NCM['||nfi.ncm||'].','E');
6715  		      END IF;
6716  		    END IF;
6717  
6718  		    vb_found := TRUE;
6719  		  END IF;
6720  		END LOOP; --cur_due_dest
6721  
6722  		IF NOT vb_found THEN
6723  
6724  		  vn_destaques := 0;
6725  		  OPEN cur_destaques(nfi.ncm);
6726  		  FETCH cur_destaques INTO vn_destaques;
6727  		  CLOSE cur_destaques;
6728  
6729  		  IF(Nvl(vn_destaques ,0) > 0) THEN
6730  		    vb_erro := TRUE;
6731  		    cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o(s) atributo(s) para a NCM['||nfi.ncm||'].','E');
6732  		  END IF;
6733  		END IF;
6734  
6735  		FOR pais_dest IN cur_pais_dest(nfi.due_ship_item_id) LOOP
6736  		  IF pais_dest.countrycode IS NULL THEN
6737  		    vb_erro := TRUE;
6738  		    cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o país de destino.','E');
6739  		  END IF;
6740  
6741  		  IF pais_dest.gm_tariffquantity IS NULL THEN
6742  		    vb_erro := TRUE;
6743  		    cmx_prc_gera_log_erros( vn_evento_id
6744  					  , vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o campo quantidade exportada.'
6745  					  , 'E'
6746  					  , 'Por favor, verifique se está parametrizado corretamente a conversão para unidade de medida estatística.'
6747  					  );
6748  		  END IF;
6749  
6750  		END LOOP;
6751  
6752  		OPEN cur_enq (nfi.due_ship_item_id);
6753  		FETCH cur_enq INTO vn_dummy;
6754  		vb_found := cur_enq%FOUND;
6755  		CLOSE cur_enq;
6756  
6757  		IF NOT vb_found THEN
6758  		  vb_erro := TRUE;
6759  		  cmx_prc_gera_log_erros(vn_evento_id, vc_complemento||'Nota['||nf.numero_nf||'], Item [' || nfi.sequence || '] - Preencha o enquadramento.','E');
6760  		END IF;
6761  
6762  	      END LOOP;
6763  	    END LOOP;
6764  
6765  	  FOR vr_add_info IN (SELECT due_add_info_id
6766  				   , statementdescription
6767  				   , cmx_pkg_tabelas.auxiliar('281', statementtypecode, 2) tam_maximo
6768  				   , nvl (cmx_pkg_tabelas.auxiliar('281', statementtypecode, 3), 'N') truncar
6769  				   , statementtypecode
6770  				FROM exp_due_add_info edai
6771  			       WHERE due_id = pn_due_id) LOOP
6772  	    IF length (vr_add_info.statementdescription) > vr_add_info.tam_maximo THEN
6773  	       IF vr_add_info.truncar = 'S' THEN
6774  		 BEGIN
6775  		 UPDATE exp_due_add_info edai
6776  		    SET statementdescription = SubStr(statementdescription,1,vr_add_info.tam_maximo)
6777  		  WHERE edai.due_add_info_id = vr_add_info.due_add_info_id;
6778  		 EXCEPTION
6779  		   WHEN OTHERS THEN
6780  		     cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Erro UPDATE Tamanho máximo do campo @@01@@ (@@02@@) - @@03@@', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.2',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo,sqlerrm),'E');
6781  		     vb_erro := TRUE;
6782  		 END;
6783  	       ELSE
6784  		cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Tamanho máximo do campo @@01@@ (@@02@@) excedido!', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.1',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo),'E');
6785  		vb_erro := TRUE;
6786  	       END IF;
6787  	    END IF;
6788  	  END LOOP;
6789  
6790  	  FOR vr_add_info IN (SELECT due_gs_add_info_id
6791  				   , statementdescription
6792  				   , cmx_pkg_tabelas.auxiliar('281', statementtypecode, 2) tam_maximo
6793  				   , nvl (cmx_pkg_tabelas.auxiliar('281', statementtypecode, 3), 'N') truncar
6794  				   , statementtypecode
6795  				FROM exp_due_gs_add_info edai
6796  				   , exp_due_ship i
6797  			       WHERE i.due_ship_id = edai.due_ship_id
6798  				 AND i.due_id = pn_due_id) LOOP
6799  	    IF length (vr_add_info.statementdescription) > vr_add_info.tam_maximo THEN
6800  	       IF vr_add_info.truncar = 'S' THEN
6801  		 BEGIN
6802  		 UPDATE exp_due_gs_add_info i
6803  		    SET statementdescription = SubStr(statementdescription,1,vr_add_info.tam_maximo)
6804  		  WHERE i.due_gs_add_info_id = vr_add_info.due_gs_add_info_id;
6805  		 EXCEPTION
6806  		   WHEN OTHERS THEN
6807  		     cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Erro UPDATE Tamanho máximo do campo @@01@@ (@@02@@) - @@03@@', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.2',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo,sqlerrm),'E');
6808  		     vb_erro := TRUE;
6809  		 END;
6810  	       ELSE
6811  		cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Tamanho máximo do campo @@01@@ (@@02@@) excedido!', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.1',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo),'E');
6812  		vb_erro := TRUE;
6813  	       END IF;
6814  	    END IF;
6815  	  END LOOP;
6816  
6817  	  FOR vr_add_info IN (SELECT due_gsi_add_info_id
6818  				   , statementdescription
6819  				   , cmx_pkg_tabelas.auxiliar('281', statementtypecode, 2) tam_maximo
6820  				   , nvl (cmx_pkg_tabelas.auxiliar('281', statementtypecode, 3), 'N') truncar
6821  				   , statementtypecode
6822  				FROM exp_due_gs_item_add_info edai
6823  				   , exp_due_ship_item i
6824  			       WHERE i.due_ship_item_id = edai.due_ship_item_id
6825  				 AND i.due_id = pn_due_id) LOOP
6826  	    IF length (vr_add_info.statementdescription) > vr_add_info.tam_maximo THEN
6827  	       IF vr_add_info.truncar = 'S' THEN
6828  		BEGIN
6829  		 UPDATE exp_due_gs_item_add_info i
6830  		    SET statementdescription = SubStr(statementdescription,1,vr_add_info.tam_maximo)
6831  		  WHERE i.due_gsi_add_info_id = vr_add_info.due_gsi_add_info_id;
6832  		 EXCEPTION
6833  		   WHEN OTHERS THEN
6834  		     cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Erro UPDATE Tamanho máximo do campo @@01@@ (@@02@@) - @@03@@', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.2',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo,sqlerrm),'E');
6835  		     vb_erro := TRUE;
6836  		 END;
6837  	       ELSE
6838  		cmx_prc_gera_log_erros(vn_evento_id, cmx_fnc_texto_traduzido('Tamanho máximo do campo @@01@@ (@@02@@) excedido!', 'EXP_PKG_DUE','FNC_GERAR_DUE_024.1',null,vr_add_info.statementtypecode, vr_add_info.tam_maximo),'E');
6839  		vb_erro := TRUE;
6840  	       END IF;
6841  	    END IF;
6842  	  END LOOP;
6843  
6844  
6845  	  ELSE
6846  	    vb_erro := TRUE;
6847  	    vn_evento_id := cmx_fnc_gera_evento('PN_DUE_ID : [' || pn_due_id || ' ] não existe.',SYSDATE, pn_usuario_id);
6848  	  END IF;
6849  
6850  	  IF vb_erro THEN
6851  	    RETURN vn_evento_id;
6852  	  ELSE
6853  	    RETURN NULL;
6854  	  END IF;
6855  	END fnc_valida_trans_due;
6856  
6857   FUNCTION fnc_atualiza_due( pn_due_id NUMBER
6858  				, pn_evento_id NUMBER
6859  				, pn_usuario_id NUMBER
6860  				) RETURN NUMBER
6861  	AS
6862  
6863  	  CURSOR cur_dados
6864  	      IS
6865  	  SELECT fatura_id
6866  	       , embarque_id
6867  	       , fatura_numero
6868  	       , fatura_ano
6869  	       , empresa_id
6870  	       , doffice_identification
6871  	       , whs_identification
6872  	       , whs_type
6873  	       , whs_latitude
6874  	       , whs_longitude
6875  	       , whs_addr_line
6876  	       , currencytype
6877  	       , exitoffice_identification
6878  	       , exitoffice_whs_identification
6879  	       , exitoffice_whs_type
6880  	       , importer_name
6881  	       , importer_addr_country
6882  	       , importer_addr_line
6883  	       , forma_exportacao
6884  	       , forma_exportacao_type
6885  	       , situacao_especial
6886  	       , situacao_especial_type
6887  	       , caso_esp_transporte
6888  	       , caso_esp_transporte_type
6889  	       , observacoes_gerais
6890  	       , observacoes_gerais_type
6891  	       , due_fatura_id
6892  	    FROM (SELECT ef.fatura_id
6893  		       , ef.embarque_id
6894  		       , ef.fatura_numero
6895  		       , ef.fatura_ano
6896  		       , ef.empresa_id
6897  		       , exp_pkg_due.fnc_ind_due('EX0010' ,'F', ef.fatura_id )	       doffice_identification
6898  		       , NVL( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
6899  			    , exp_pkg_due.fnc_ind_due('EX0037_CNPJ' ,'F', ef.fatura_id )
6900  			    )							       whs_identification
6901  		       , Decode( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
6902  			       , NULL
6903  			       , '22'
6904  			       , '281'
6905  			       )						       whs_type
6906  		       , exp_pkg_due.fnc_ind_due('EX0063' ,'F', ef.fatura_id )	       whs_latitude
6907  		       , exp_pkg_due.fnc_ind_due('EX0064' ,'F', ef.fatura_id )	       whs_longitude
6908  		       , exp_pkg_due.fnc_ind_due('EX0062' ,'F', ef.fatura_id )	       whs_addr_line
6909  		       , exp_pkg_due.fnc_ind_due('EX0039' ,'F', ef.fatura_id )	       currencytype
6910  		       , exp_pkg_due.fnc_ind_due('EX0011' ,'F', ef.fatura_id )	       exitoffice_identification
6911  		       , exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )	       exitoffice_whs_identification
6912  		       , Decode( exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )
6913  			       , NULL
6914  			       , '22'
6915  			       , '281'
6916  			       )						       exitoffice_whs_type
6917  		       , exp_pkg_due.fnc_ind_due('EX0008' ,'F', ef.fatura_id )	       importer_name
6918  		       , exp_pkg_due.fnc_ind_due('EX0009' ,'F', ef.fatura_id )	       importer_addr_country
6919  		       , exp_pkg_due.fnc_ind_due('EX0036' ,'F', ef.fatura_id )	       importer_addr_line
6920  		       , exp_pkg_due.fnc_ind_due('EX0040_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao
6921  		       , exp_pkg_due.fnc_ind_due('EX0041_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao_type
6922  		       , exp_pkg_due.fnc_ind_due('EX0040_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial
6923  		       , exp_pkg_due.fnc_ind_due('EX0041_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial_type
6924  		       , exp_pkg_due.fnc_ind_due('EX0040_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte
6925  		       , exp_pkg_due.fnc_ind_due('EX0041_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte_type
6926  		       , exp_pkg_due.fnc_ind_due('EX0042_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais
6927  		       , exp_pkg_due.fnc_ind_due('EX0041_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais_type
6928  		       , edft.due_fatura_id
6929  		    FROM exp_faturas ef
6930  		      , exp_due_faturas edft
6931  		  WHERE ef.fatura_id = edft.fatura_id
6932  		    AND edft.due_id = pn_due_id
6933  		) tbl
6934  	ORDER BY fatura_ano
6935  	       , fatura_numero
6936  	       , doffice_identification
6937  	       , whs_identification
6938  	       , whs_type
6939  	       , whs_latitude
6940  	       , whs_longitude
6941  	       , whs_addr_line
6942  	       , currencytype
6943  	       , exitoffice_identification
6944  	       , exitoffice_whs_identification
6945  	       , exitoffice_whs_type
6946  	       --, importer_name
6947  	       , importer_addr_country
6948  	       --, importer_addr_line
6949  	       , forma_exportacao
6950  	       , forma_exportacao_type
6951  	       , situacao_especial
6952  	       , situacao_especial_type
6953  	       , caso_esp_transporte
6954  	       , caso_esp_transporte_type
6955  	       , observacoes_gerais
6956  	       , observacoes_gerais_type;
6957  
6958  	  CURSOR cur_due_nf IS
6959  	    SELECT fatura_nf_id, fatura_id
6960  	      FROM exp_due_ship
6961  	     WHERE fatura_nf_id IS NOT NULL
6962  	       AND due_id = pn_due_id;
6963  
6964  	  CURSOR cur_due_fat_nf IS
6965  	    SELECT efn.fatura_nf_id, efn.fatura_id
6966  	      FROM exp_due_faturas edf
6967  		 , exp_fatura_nf   efn
6968  	     WHERE edf.fatura_id = efn.fatura_id
6969  	       AND edf.due_id	 = pn_due_id
6970  	       AND NOT EXISTS ( SELECT NULL
6971  						    FROM exp_due_ship	 edfn
6972  						       , exp_due	 ed
6973  						   WHERE edfn.due_id	   = ed.due_id
6974  						     AND edfn.fatura_id    = efn.fatura_id
6975  						     AND ed.dt_cancel IS NULL
6976  						     AND edfn.fatura_nf_id = efn.fatura_nf_id
6977  					  );
6978  
6979  	  vr_fat_ant cur_dados%ROWTYPE;
6980  	  vb_erro	       BOOLEAN;
6981  	  vn_due_id	       NUMBER;
6982  	  vn_criacao	       NUMBER;
6983  	  vc_ucr	       VARCHAR2(35);
6984  	  vn_retorno	       NUMBER;
6985  	  vn_qtde	       NUMBER := 0;
6986  	BEGIN
6987  	  -- verifica se alguma fatura tem informação divergente das demais.
6988  	  --vn_retorno := fnc_valida_due(pn_due_id, pn_evento_id );
6989  	  --IF vn_retorno IS NOT NULL THEN
6990  	  --  RETURN null;
6991  	  --END IF;
6992  
6993  	  --Inseri as notas fiscais na tabela temporária exp_due_fatura_nf_tmp
6994  	  DELETE FROM exp_due_fatura_nf_tmp;
6995  
6996  	  FOR nf IN cur_due_nf LOOP
6997  
6998  	    INSERT INTO exp_due_fatura_nf_tmp ( fatura_id
6999  					      , fatura_nf_id
7000  					      )
7001  				       VALUES ( nf.fatura_id
7002  					      , nf.fatura_nf_id
7003  					      );
7004  
7005  	    vn_qtde := vn_qtde + 1;
7006  	  END LOOP;
7007  
7008  	  IF(Nvl(vn_qtde,0) = 0) THEN
7009  
7010  	    FOR nf IN cur_due_fat_nf LOOP
7011  	      INSERT INTO exp_due_fatura_nf_tmp ( fatura_id
7012  						, fatura_nf_id
7013  						)
7014  					 VALUES ( nf.fatura_id
7015  						, nf.fatura_nf_id
7016  						);
7017  	    END LOOP;
7018  
7019  	  END IF;
7020  
7021  	  vn_qtde    := 0;
7022  	  vr_fat_ant := NULL;
7023  	  --OPEN cur_dados;
7024  	  --FETCH cur_dados INTO vr_fat_ant;
7025  	  --CLOSE cur_dados;
7026  
7027  	  FOR x IN cur_dados LOOP
7028  
7029  	    IF(vn_qtde = 0) THEN
7030  	      UPDATE exp_due
7031  		SET doffice_identification	     = vr_fat_ant.doffice_identification
7032  		  , whs_identification		     = vr_fat_ant.whs_identification
7033  		  , whs_type			     = vr_fat_ant.whs_type
7034  		  , whs_latitude		     = vr_fat_ant.whs_latitude
7035  		  , whs_longitude		     = vr_fat_ant.whs_longitude
7036  		  , whs_addr_line		     = vr_fat_ant.whs_addr_line
7037  		  , currencytype		     = vr_fat_ant.currencytype
7038  		  --, declarant_identification	       = vr_fat_ant.declarant_identification
7039  		  , exitoffice_identification	     = vr_fat_ant.exitoffice_identification
7040  		  , exitoffice_whs_identification    = vr_fat_ant.exitoffice_whs_identification
7041  		  , exitoffice_whs_type 	     = vr_fat_ant.exitoffice_whs_type
7042  	  --	     , importer_name			= vr_fat_ant.importer_name
7043  		  , importer_addr_country	     = vr_fat_ant.importer_addr_country
7044  	  --	     , importer_addr_line		= vr_fat_ant.importer_addr_line
7045  		  , last_update_date		     = sysdate
7046  		  , last_updated_by		     = pn_usuario_id
7047  	      WHERE due_id = pn_due_id;
7048  	    END IF;
7049  
7050  	    UPDATE exp_due_faturas SET importer_name	      = x.importer_name
7051  				     , importer_addr_country  = x.importer_addr_country
7052  				     , importer_addr_line     = x.importer_addr_line
7053  				 WHERE due_fatura_id = x.due_fatura_id;
7054  
7055  	    vn_qtde := vn_qtde + 1;
7056  	  END LOOP;
7057  
7058  	  vn_due_id := fnc_criar_due(pn_due_id, pn_evento_id, pn_usuario_id);
7059  
7060  	  COMMIT;
7061  
7062  	  RETURN vn_due_id;
7063  	END fnc_atualiza_due;
7064  
7065  	FUNCTION fnc_ret_fatura_due (pn_due_id NUMBER) RETURN VARCHAR2
7066  	IS
7067  	  CURSOR cur_fatura  IS
7068  	    SELECT DISTINCT SubStr(cmx_fnc_string_agg(ef1.fatura_numero|| '/' || ef1.fatura_ano),1,4000) fatura
7069  	      FROM exp_faturas ef1
7070  		 , exp_due_faturas edf
7071  	     WHERE ef1.fatura_id = edf.fatura_id
7072  	       AND edf.due_id = pn_due_id;
7073  
7074  	  vc_retorno VARCHAR2(4000) := NULL;
7075  	BEGIN
7076  
7077  	  IF(pn_due_id IS NOT NULL) THEN
7078  	    OPEN  cur_fatura;
7079  	    FETCH cur_fatura INTO vc_retorno;
7080  	    CLOSE cur_fatura;
7081  	  END IF;
7082  
7083  	  vc_retorno := 'Fatura(s): '||vc_retorno;
7084  
7085  	  RETURN vc_retorno;
7086  	END fnc_ret_fatura_due;
7087  
7088  	PROCEDURE prc_busca_atributo_ncm( pn_due_id		NUMBER
7089  					, pn_due_ship_item_id	NUMBER
7090  					, pc_ncm		VARCHAR2
7091  					, pn_atributo_id	NUMBER
7092  					, pc_formula		VARCHAR2
7093  					, pc_destaque		OUT VARCHAR2
7094  					) AS
7095  	BEGIN
7096  
7097  	  IF(pc_formula IS NOT NULL) THEN
7098  	    EXECUTE IMMEDIATE pc_formula USING pn_due_id
7099  					     , pn_due_ship_item_id
7100  					     , pc_ncm
7101  					     , pn_atributo_id
7102  					     , OUT pc_destaque;
7103  	  END IF;
7104  
7105  	EXCEPTION
7106  	  WHEN OTHERS THEN
7107  	    pc_destaque     := NULL;
7108  	END prc_busca_atributo_ncm;
7109  
7110  	FUNCTION fnc_ret_descricao_item (pn_fatura_item_id NUMBER, pn_fat_item_det_id NUMBER) RETURN VARCHAR2 IS
7111  
7112  	  CURSOR cur_itens_dsc_pais(pn_item_id NUMBER)
7113  	      IS
7114  	  SELECT item.descricao
7115  	    FROM cmx_itens_dsc item
7116  	       , cmx_tabelas idioma
7117  	   WHERE idioma.tipo	  = '905'
7118  	     AND idioma.codigo	  = nvl(cmx_fnc_profile ( 'EXP_IDIOMA_BR'), 'PT')
7119  	     AND idioma.tabela_id = item.idioma_id
7120  	     AND item.tipo	  = nvl(cmx_fnc_profile ('EXP_IDIOMA_TIPO_BR'), 'S')
7121  	     AND item.aplicacao   = 'E'
7122  	     AND item.item_id	  = pn_item_id;
7123  
7124  	  CURSOR cur_fat_lin_item
7125  	      IS
7126  	  SELECT item_id, descricao, codigo
7127  	    FROM exp_fatura_itens
7128  	   WHERE fatura_item_id = pn_fatura_item_id;
7129  
7130  	  CURSOR cur_serie
7131  	      IS
7132  	  SELECT serie
7133  	    FROM exp_fatura_item_detalhes
7134  	   WHERE fatura_item_detalhe_id = pn_fat_item_det_id;
7135  
7136  	  vc_prof_cd_item     VARCHAR2(01) DEFAULT 'N';
7137  	  vc_descricao	      VARCHAR2(4000);
7138  	  vc_descricao_item   VARCHAR2(4000);
7139  	  vc_codigo	      VARCHAR2(256);
7140  	  vc_serie	      VARCHAR2(250);
7141  	  vn_item_id	      NUMBER := NULL;
7142  	  vc_geracao_re       cmx_profiles.conteudo%TYPE;
7143  	  vb_achou	      BOOLEAN := FALSE;
7144  	BEGIN
7145  
7146  	  vc_geracao_re := substr(cmx_fnc_profile('GERACAO_RE'),1,7);
7147  	  IF(vc_geracao_re IS NOT NULL ) THEN
7148  	    vc_prof_cd_item    := SUBSTR(vc_geracao_re,2,1);
7149  	  END IF;
7150  
7151  	  OPEN	cur_fat_lin_item;
7152  	  FETCH cur_fat_lin_item INTO vn_item_id, vc_descricao_item, vc_codigo;
7153  	  CLOSE cur_fat_lin_item;
7154  
7155  	  IF(vn_item_id IS NOT NULL) THEN
7156  	    OPEN  cur_itens_dsc_pais(vn_item_id);
7157  	    FETCH cur_itens_dsc_pais INTO vc_descricao;
7158  	    vb_achou := cur_itens_dsc_pais%FOUND;
7159  	    CLOSE cur_itens_dsc_pais;
7160  	  END IF;
7161  
7162  	  IF(vc_descricao IS NULL AND vn_item_id IS NULL) THEN
7163  	    vc_descricao := vc_descricao_item;
7164  	  ELSIF(vc_descricao IS NULL AND vn_item_id IS NOT NULL) THEN
7165  	    vc_descricao := cmx_pkg_itens.descricao(vn_item_id);
7166  	  END IF;
7167  
7168  	  IF vc_prof_cd_item = 'S' THEN
7169  	    vc_descricao := rtrim(ltrim(vc_codigo))||' - '||rtrim(ltrim(vc_descricao));
7170  	  END IF;
7171  
7172  	  OPEN	cur_serie;
7173  	  FETCH cur_serie INTO vc_serie;
7174  	  CLOSE cur_serie;
7175  
7176  	  IF(vc_serie IS NOT NULL) THEN
7177  	    vc_descricao := vc_descricao || ' Serie: '||vc_serie;
7178  	  END IF;
7179  
7180  	  RETURN vc_descricao;
7181  	END;
7182  
7183  	FUNCTION fnc_proc_retorno_cancel( pn_due_id	 NUMBER
7184  					, pn_usuario_id  NUMBER
7185  					, pn_evento_id	 NUMBER
7186  					, pc_motivo	 VARCHAR2
7187  					) RETURN VARCHAR2 IS
7188  
7189  	  CURSOR cur_retorno(pc_conteudo VARCHAR2)
7190  	      IS
7191  	  SELECT extract(Value(tbl), '//message/text()').getstringval() retorno
7192  	    FROM TABLE ( XMLSequence( extract ( XMLType(pc_conteudo)
7193  					      , '/'
7194  					      )
7195  				    )
7196  		       ) tbl;
7197  
7198  	  vc_clob     CLOB;
7199  	  vb_erro     BOOLEAN := FALSE;
7200  	  vc_retorno  VARCHAR2(4000);
7201  	BEGIN
7202  
7203  	  vc_clob :=  fnc_base64_clob(gc_ret_b64);
7204  
7205  	  IF(Dbms_Lob.getlength(vc_clob) > 0) THEN
7206  
7207  	    vc_clob := '<msg>'||vc_clob||'</msg>';
7208  
7209  	    OPEN  cur_retorno(vc_clob);
7210  	    FETCH cur_retorno INTO vc_retorno;
7211  	    CLOSE cur_retorno;
7212  
7213  	    IF(InStr(Lower(vc_retorno), 'cancelada com sucesso') > 0) THEN
7214  
7215  	      UPDATE exp_due SET dt_cancel	     = SYSDATE
7216  			       , motivo_cancelamento = pc_motivo
7217  			   WHERE due_id = pn_due_id;
7218  
7219  	      cmx_prc_gera_log_erros( pn_evento_id
7220  				    , vc_retorno
7221  				    , 'A'
7222  				    );
7223  	    ELSE
7224  	      vb_erro := TRUE;
7225  	      cmx_prc_gera_log_erros( pn_evento_id
7226  				    , 'Erro ['||SubStr(vc_clob,1,4000)||']'
7227  				    , 'E'
7228  				    );
7229  	    END IF;
7230  
7231  	  ELSE
7232  	    vb_erro := TRUE;
7233  	    cmx_prc_gera_log_erros( pn_evento_id
7234  				  , 'Não foi possível solicitar o cancelamento da DUE.'
7235  				  , 'E'
7236  				  );
7237  	  END IF;
7238  
7239  	  IF(vb_erro) THEN
7240  	    RETURN 'ERRO';
7241  	  ELSE
7242  	    RETURN NULL;
7243  	  END IF;
7244  
7245  	EXCEPTION
7246  	  WHEN OTHERS THEN
7247  	    cmx_prc_gera_log_erros( pn_evento_id
7248  				  , 'Erro ['||SubStr(vc_clob,1,4000)||']'
7249  				  , 'E'
7250  				  );
7251  	    RETURN 'ERRO';
7252  	END fnc_proc_retorno_cancel;
7253  
7254  	FUNCTION fnc_vlr_comissao ( pn_fatura_item_id  NUMBER DEFAULT NULL
7255  				  , pn_ncm_id	       NUMBER DEFAULT NULL
7256  				  ) RETURN NUMBER AS
7257  
7258  	  CURSOR cur_comissao IS
7259  	    SELECT SUM(percentual)    percentual
7260  		 , SUM(valor)	      valor
7261  	      FROM exp_fatura_item_representantes
7262  	     WHERE fatura_item_id = pn_fatura_item_id;
7263  
7264  	  CURSOR cur_base_calculo IS
7265  	    SELECT SUM(valor.valor)		   valor_base
7266  	      FROM exp_fatura_item_valores	   valor
7267  		 , exp_fatura_item_representantes  repre
7268  	     WHERE valor.tipo_id		   = repre.base_calculo_id
7269  	       AND repre.fatura_item_id 	   = valor.fatura_item_id
7270  	       AND valor.fatura_item_id 	   = pn_fatura_item_id;
7271  
7272  	  CURSOR cur_ncm IS
7273  	    SELECT percentual_maximo_comissao
7274  	      FROM cmx_tab_ncm
7275  	     WHERE ncm_id = pn_ncm_id;
7276  
7277  	  CURSOR cur_profiles IS
7278  	    SELECT conteudo
7279  	      FROM cmx_profiles
7280  	     WHERE campo = 'ORIGEM_COMISSAO';
7281  
7282  	  vbAchou	 BOOLEAN;
7283  	  vnValor	 NUMBER;
7284  	  vnBaseCalculo  NUMBER;
7285  	  vnPercentual	 NUMBER;
7286  	  vcPegarFatura  VARCHAR2(01);
7287  	BEGIN --FUNCTION comissao
7288  
7289  	  vnValor := 0;
7290  	  OPEN cur_profiles;
7291  	  FETCH cur_profiles INTO vcPegarFatura;
7292  	  CLOSE cur_profiles;
7293  
7294  	  vcPegarFatura := NVL(vcPegarFatura,'S');
7295  
7296  	  IF vcPegarFatura = 'S' THEN
7297  	    OPEN  cur_comissao;
7298  	    FETCH cur_comissao INTO vnPercentual, vnValor;
7299  	    vbAchou := cur_comissao%FOUND;
7300  	    CLOSE cur_comissao;
7301  	  ELSE
7302  	    IF vcPegarFatura = 'R' THEN
7303  
7304  	      OPEN  cur_comissao;
7305  	      FETCH cur_comissao INTO vnPercentual, vnValor;
7306  	      vbAchou := cur_comissao%FOUND;
7307  	      CLOSE cur_comissao;
7308  
7309  	      OPEN  cur_base_calculo;
7310  	      FETCH cur_base_calculo INTO vnBaseCalculo;
7311  	      vbAchou := cur_base_calculo%FOUND;
7312  	      CLOSE cur_base_calculo;
7313  
7314  	      IF nvl(vnBaseCalculo,0) = 0 or nvl(vnValor,0) = 0 THEN
7315  		  vnPercentual := 0;
7316  	      ELSE
7317  		  vnPercentual := ( vnValor / vnBaseCalculo ) * 100;
7318  	      END IF;
7319  	    ELSE
7320  	      OPEN  cur_ncm;
7321  	      FETCH cur_ncm INTO vnPercentual;
7322  	      vbAchou := cur_ncm%FOUND;
7323  	      CLOSE cur_ncm;
7324  	      IF (vnValor IS null) THEN
7325  		vnValor := 20;
7326  	      END IF;
7327  	    END IF;
7328  	  END IF;
7329  
7330  	  RETURN (nvl (vnPercentual, 0));
7331  	END fnc_vlr_comissao;
7332  
7333  	PROCEDURE prc_atualiza_datas( pn_due_id    NUMBER
7334  				    , pc_situacao  VARCHAR2
7335  				    , pd_data	   DATE
7336  				    )
7337  	IS
7338  	  CURSOR cur_fat
7339  	      IS
7340  	  SELECT ef.fatura_id
7341  	       , ef.embarque_id
7342  	    FROM exp_faturas ef
7343  	       , exp_due_faturas edf
7344  	   WHERE ef.fatura_id = edf.fatura_id
7345  	     AND edf.due_id   = pn_due_id;
7346  
7347  	  CURSOR cur_data
7348  	      IS
7349  	  SELECT ct_data.tabela_id
7350  	       , ct_data.auxiliar3
7351  	    FROM cmx_tabelas de_para
7352  	       , cmx_tabelas ct_data
7353  	   WHERE de_para.auxiliar2 = ct_data.codigo
7354  	     AND ct_data.tipo = '203'
7355  	     AND de_para.tipo = '288'
7356  	     AND pc_situacao  LIKE de_para.auxiliar1;
7357  
7358  	BEGIN
7359  	  FOR vr_data IN cur_data
7360  	  LOOP
7361  	    FOR vr_fat IN cur_fat
7362  	    LOOP
7363  	      exp_prc_atualiza_data( vr_data.tabela_id
7364  				   , vr_data.auxiliar3
7365  				   , pd_data
7366  				   , vr_fat.fatura_id
7367  				   , vr_fat.embarque_id
7368  				   );
7369  	    END LOOP;
7370  	  END LOOP;
7371  
7372  	END prc_atualiza_datas;
7373  
7374  	FUNCTION fnc_proc_retorno_situacao( pn_due_id	   NUMBER
7375  					  , pn_usuario_id  NUMBER
7376  					  , pn_evento_id   NUMBER DEFAULT NULL
7377  					  , pn_nr_linha    NUMBER DEFAULT NULL
7378  					  ) RETURN VARCHAR2 IS
7379  
7380  	  CURSOR cur_listas(px_xml CLOB)
7381  	      IS
7382  	  SELECT extract(Value(tbl), '//eventosDoHistorico').getclobval()  listas
7383  	       , extract(Value(tbl), '//canal/text()').getstringval()	   canal
7384  	       , extract(Value(tbl), '//solicitacoes').getclobval()	   solicitacoes
7385  	    FROM TABLE ( xmlsequence( extract ( xmltype(px_xml)
7386  					      , '/lista'
7387  					      )
7388  				    )
7389  		       ) tbl;
7390  
7391  	  CURSOR cur_listas_hist(pc_xml CLOB)
7392  	      IS
7393  	  SELECT extract(Value(tbl), '/').getclobval()	lista
7394  	    FROM TABLE ( xmlsequence( extract ( xmltype(pc_xml)
7395  					      , '//eventosDoHistorico'
7396  					      )
7397  				    )
7398  		       ) tbl;
7399  
7400  	  CURSOR cur_listas_solic_hist(pc_xml CLOB)
7401  	      IS
7402  	  SELECT extract(Value(tbl), '/').getclobval()	lista
7403  	    FROM TABLE ( xmlsequence( extract ( xmltype(pc_xml)
7404  					      , '//solicitacoes'
7405  					      )
7406  				    )
7407  		       ) tbl;
7408  
7409  	  CURSOR cur_situacao(pc_xml CLOB)
7410  	      IS
7411  	  SELECT extract(Value(tbl), '//dataEHoraDoEvento/text()').getstringval()	dataevento
7412  	       , extract(Value(tbl), '//evento/text()').getstringval()			situacao
7413  	       , extract(Value(tbl), '//responsavel/text()').getstringval()		responsavel
7414  	       , extract(Value(tbl), '//id/text()').getstringval()			id
7415  	       , extract(Value(tbl), '//informacoesAdicionais/text()').getstringval()	informacoesAdicionais
7416  	       , extract(Value(tbl), '//motivo/text()').getstringval()			motivo
7417  	    FROM TABLE ( xmlsequence( extract ( xmltype(pc_xml)
7418  					      , '/'
7419  					      )
7420  				    )
7421  		       ) tbl;
7422  
7423  	  CURSOR cur_solicitacao(pc_xml CLOB)
7424  	      IS
7425  	  SELECT extract(Value(tbl), '//tipoSolicitacao/text()').getstringval() 	    tipoSolicitacao
7426  	       , extract(Value(tbl), '//dataDaSolicitacao/text()').getstringval()	    dataDaSolicitacao
7427  	       , extract(Value(tbl), '//usuarioResponsavel/text()').getstringval()	    usuarioResponsavel
7428  	       , extract(Value(tbl), '//codigoDoStatusDaSolicitacao/text()').getstringval() codigoDoStatusDaSolicitacao
7429  	       , extract(Value(tbl), '//statusDaSolicitacao/text()').getstringval()	    statusDaSolicitacao
7430  	       , extract(Value(tbl), '//dataDeApreciacao/text()').getstringval()	    dataDeApreciacao
7431  	       , extract(Value(tbl), '//usuarioQueAnalisou/text()').getstringval()	    usuarioQueAnalisou
7432  	       , extract(Value(tbl), '//motivo/text()').getstringval()			    motivo
7433  	       , extract(Value(tbl), '//numeroDoComprot/text()').getstringval() 	    numeroDoComprot
7434  	       , extract(Value(tbl), '//motivoDoIndeferimento/text()').getstringval()	    motivoDoIndeferimento
7435  	    FROM TABLE ( xmlsequence( extract ( xmltype(pc_xml)
7436  					      , '/'
7437  					      )
7438  				    )
7439  		       ) tbl;
7440  
7441  	  CURSOR cur_due IS
7442  	    SELECT numero
7443  	      FROM exp_due
7444  	     WHERE due_id = pn_due_id;
7445  
7446  	  CURSOR cur_due_sit(pc_situacao VARCHAR2, pd_data DATE)
7447  	      IS
7448  	  SELECT due_situacao_id
7449  	    FROM exp_vw_due_hist_situacao
7450  	   WHERE due_id 		 = pn_due_id
7451  	     AND Upper(situacaodue_desc) = pc_situacao
7452  	     AND (datasituacaodue =  pd_data OR pd_data IS NULL);
7453  
7454  	  CURSOR cur_due_solic(pc_tiposolicitacao VARCHAR2, pd_data DATE)
7455  	      IS
7456  	  SELECT due_solicitacao_id
7457  	    FROM exp_due_hist_solicitacao
7458  	   WHERE due_id 		 = pn_due_id
7459  	     AND Upper(tiposolicitacao) = pc_tiposolicitacao
7460  	     AND (datadasolicitacao =  pd_data OR pd_data IS NULL);
7461  
7462  	  CURSOR cur_ult_status
7463  	      IS
7464  	  SELECT situacaodue
7465  	       , datasituacaodue
7466  	       , indicadorbloqueio
7467  	       , situacao_desc
7468  	       , controleadministrativo
7469  	       , situacaocarga
7470  	    FROM exp_due_hist_situacao
7471  	   WHERE due_id = pn_due_id
7472  	   ORDER BY datasituacaodue DESC, due_situacao_id desc;
7473  
7474  	  vr_situacao	      cur_situacao%ROWTYPE;
7475  	  vr_solicitacao      cur_solicitacao%ROWTYPE;
7476  	  vr_cur_ult_status   cur_ult_status%ROWTYPE;
7477  	  vc_nr_due	      VARCHAR2(14);
7478  	  vb_erro	      BOOLEAN := FALSE;
7479  	  vc_clob	      CLOB;
7480  	  vc_lista	      CLOB;
7481  	  vc_lista_solic      CLOB;
7482  	  vb_achou	      BOOLEAN := FALSE;
7483  	  vn_temp_id	      NUMBER;
7484  	  vc_situacao	      VARCHAR2(4000);
7485  	  vc_data	      VARCHAR2(4000);
7486  	  vd_data	      DATE;
7487  	  vd_data_solicitacao DATE;
7488  	  vd_data_apreciacao  DATE;
7489  	  vc_situacao_cod     VARCHAR2(20);
7490  	  vn_timestamp	      NUMBER;
7491  
7492  	  vc_etapa	      VARCHAR2(4000);
7493  	  vc_canal	      VARCHAR2(4000);
7494  
7495  	  vc_motivo_cancelamento VARCHAR2(4000);
7496  	BEGIN
7497  	  vc_clob :=  fnc_base64_clob(gc_ret_b64);
7498  
7499  	  vc_etapa := 'Recup. Nr. DUE';
7500  	  OPEN	cur_due;
7501  	  FETCH cur_due INTO vc_nr_due;
7502  	  CLOSE cur_due;
7503  
7504  	  IF(dbms_lob.getlength(vc_clob) > 0) THEN
7505  
7506  	    UPDATE exp_due SET xml_retorno = vc_clob
7507  			   WHERE due_id = pn_due_id;
7508  
7509  	    --vc_clob := '<dueinfo>'||vc_clob||'</dueinfo>';
7510  	    --vc_lista := '<lista>'||vc_clob||'</lista>';
7511  	    vc_clob := '<lista>'||vc_clob||'</lista>';
7512  
7513  	    vc_etapa := 'Recup. Lista';
7514  	    OPEN  cur_listas(vc_clob);
7515  	    FETCH cur_listas INTO vc_lista, vc_canal, vc_lista_solic;
7516  	    CLOSE cur_listas;
7517  
7518  	    --IF(Dbms_Lob.getlength(vc_lista) > 0) THEN
7519  	    IF(InStr(vc_lista, 'eventosDoHistorico') > 0) THEN
7520  
7521  	      vc_lista := '<lista>'||vc_lista||'</lista>';
7522  
7523  	      vc_etapa := 'Recup. Lista situação';
7524  	      FOR x IN cur_listas_hist(vc_lista) LOOP
7525  
7526  		vc_etapa := 'Recup. Situação';
7527  		OPEN  cur_situacao(x.lista);
7528  		FETCH cur_situacao INTO vr_situacao;
7529  		CLOSE cur_situacao;
7530  
7531  		--Verifica se o evento já foi cadastrado.
7532  		vc_situacao := Upper(vr_situacao.situacao);
7533  		vc_situacao_cod := NULL;
7534  		IF(vc_situacao = 'CANCELAMENTO PELO EXPORTADOR') THEN
7535  		  vc_situacao := 'CANCELADA PELO EXPORTADOR';
7536  		  vc_situacao_cod := '80';
7537  		ELSIF(vc_situacao = 'REGISTRO') THEN
7538  		  vc_situacao_cod := '10';
7539  		  vc_situacao := 'REGISTRADA';
7540  		ELSIF(vc_situacao = 'AVERBAÇÃO') THEN
7541  		  vc_situacao_cod := '70';
7542  		  vc_situacao := 'AVERBADA';
7543  		ELSIF(vc_situacao = 'DESEMBARAÇO') THEN
7544  		  vc_situacao_cod := '40';
7545  		  vc_situacao := 'DESEMBARAÇADA';
7546  		ELSIF(vc_situacao = 'LIBERAÇÃO SEM CONFERÊNCIA ADUANEIRA') THEN
7547  		  vc_situacao_cod := '20';
7548  		  vc_situacao := 'LIBERADA SEM CONFERÊNCIA ADUANEIRA CANAL VERDE';
7549  		ELSIF(vc_situacao = 'APRESENTAÇÃO PARA DESPACHO') THEN
7550  		  vc_situacao_cod := '11';
7551  		  vc_situacao := 'DECLARAÇÃO APRESENTADA PARA DESPACHO';
7552  		END IF;
7553  
7554  		vd_data := NULL;
7555  		vc_data := NULL;
7556  		IF(vr_situacao.dataevento IS NOT NULL) THEN
7557  
7558  		    BEGIN
7559  		      --EXECUTE IMMEDIATE 'ALTER SESSION SET TIME_ZONE=''-03:00''';
7560  		      --vc_data := To_Char(cast(to_timestamp_tz(vr_situacao.dataevento, 'yyyy-mm-dd"T"hh24:mi:ss.ff3tzh:tzm') AS TIMESTAMP WITH LOCAL TIME ZONE), 'RRRR-MM-DD HH24:MI:SS' );
7561  
7562  		      vc_data := To_Char(FROM_TZ(CAST(to_timestamp_tz(vr_situacao.dataevento,'yyyy-mm-dd"T"hh24:mi:ss.ff3tzh:tzm') as TIMESTAMP), 'UTC') AT TIME ZONE 'BRAZIL/EAST', 'YYYY-MM-DD HH24:MI:SS');
7563  		      vd_data :=  To_Date(vc_data, 'RRRR-MM-DD HH24:MI:SS');
7564  
7565  		    EXCEPTION
7566  		      WHEN OTHERS THEN
7567  			vc_data := SubStr(vr_situacao.dataevento, 1, InStr(vr_situacao.dataevento, '+')-1);
7568  			vc_data := SubStr(vc_data, 1, InStr(vc_data, '.')-1);
7569  			vc_data := REPLACE(vc_data, 'T', ' ');
7570  			vd_data :=  To_Date(vc_data, 'RRRR-MM-DD HH24:mi:ss');
7571  		    END;
7572  
7573  		ELSE
7574  		    vc_data := NULL;
7575  		END IF;
7576  
7577  		vb_achou := FALSE;
7578  		OPEN  cur_due_sit(vc_situacao, vd_data);
7579  		FETCH cur_due_sit INTO vn_temp_id;
7580  		vb_achou := cur_due_sit%FOUND;
7581  		CLOSE cur_due_sit;
7582  
7583  		IF NOT(vb_achou) THEN
7584  		  vc_etapa := 'Convertendo Data';
7585  		  INSERT INTO exp_due_hist_situacao ( due_situacao_id
7586  						    , due_id
7587  						    , situacaodue
7588  						    , situacao_desc
7589  						    , datasituacaodue
7590  						    , creation_date
7591  						    , created_by
7592  						    , last_update_date
7593  						    , last_updated_by
7594  						    , informacoesadicionais
7595  						    , motivo
7596  						    , responsaveluadespacho
7597  						    )
7598  					     VALUES ( cmx_fnc_proxima_sequencia('exp_due_hist_situacao_sq1')
7599  						    , pn_due_id
7600  						    , vc_situacao_cod
7601  						    , vc_situacao
7602  						    , vd_data
7603  						    , SYSDATE
7604  						    , pn_usuario_id
7605  						    , SYSDATE
7606  						    , pn_usuario_id
7607  						    , vr_situacao.informacoesAdicionais
7608  						    , vr_situacao.motivo
7609  						    , vr_situacao.responsavel
7610  						    );
7611  
7612  		  IF(vc_situacao = 'AVERBADA') THEN
7613  		    BEGIN
7614  		      UPDATE exp_due SET dt_averbacao = vd_data WHERE due_id = pn_due_id;
7615  		    EXCEPTION
7616  		      WHEN OTHERS THEN
7617  			cmx_prc_gera_log_erros( pn_evento_id
7618  					      , 'DUE['||vc_nr_due||'] - Não foi possível atualizar da Data de averbação. ['||sqlerrm||']'
7619  					      , 'A'
7620  					      );
7621  		    END;
7622  
7623  		  ELSIF(vc_situacao = 'CANCELADA PELO EXPORTADOR') THEN
7624  
7625  		    vc_motivo_cancelamento := vr_situacao.motivo;
7626  
7627  		    IF(vc_motivo_cancelamento IS NULL) THEN
7628  		      vc_motivo_cancelamento := vr_situacao.informacoesAdicionais;
7629  		    ELSE
7630  		      vc_motivo_cancelamento := vc_motivo_cancelamento ||' - '|| vr_situacao.informacoesAdicionais;
7631  		    END IF;
7632  
7633  		    UPDATE exp_due SET dt_cancel = vd_data
7634  				     , motivo_cancelamento = SubStr(vc_motivo_cancelamento, 1, 550)
7635  				 WHERE due_id = pn_due_id;
7636  		  END IF;
7637  
7638  		END IF;
7639  
7640  		prc_atualiza_datas( pn_due_id
7641  				  , Upper(vr_situacao.situacao)
7642  				  , vd_data
7643  				  );
7644  
7645  
7646  	      END LOOP;
7647  
7648  	      --Gravar o último status da DUE
7649  	      OPEN  cur_ult_status;
7650  	      FETCH cur_ult_status INTO vr_cur_ult_status;
7651  	      CLOSE cur_ult_status;
7652  
7653  	      UPDATE exp_due SET situacaodue		    = vr_cur_ult_status.situacaodue
7654  			       , datasituacaodue	    = vr_cur_ult_status.datasituacaodue
7655  			       , indicadorbloqueio	    = vr_cur_ult_status.indicadorbloqueio
7656  			       , controleadministrativo     = vr_cur_ult_status.controleadministrativo
7657  			       , situacao_desc		    = vr_cur_ult_status.situacao_desc
7658  			       , situacaocarga		    = vr_cur_ult_status.situacaocarga
7659  			       , canal			    = vc_canal
7660  			   WHERE due_id = pn_due_id;
7661  
7662  	    ELSE
7663  	      vb_erro := TRUE;
7664  	      cmx_prc_gera_log_erros( pn_evento_id
7665  				    , 'DUE['||vc_nr_due||'] Não foi possível recuperar a situação.'
7666  				    , 'E'
7667  				    );
7668  	    END IF;
7669  
7670  	    IF(InStr(vc_lista_solic, 'solicitacoes') > 0) THEN
7671  
7672  	      vc_lista := '<lista>'||vc_lista_solic||'</lista>';
7673  
7674  	      vc_etapa := 'Recup. Lista solicitacao';
7675  
7676  	      FOR x IN cur_listas_solic_hist(vc_lista) LOOP
7677  
7678  		vc_etapa := 'Recup. Solicitação';
7679  		OPEN  cur_solicitacao(x.lista);
7680  		FETCH cur_solicitacao INTO vr_solicitacao;
7681  		CLOSE cur_solicitacao;
7682  
7683  		vd_data_solicitacao := NULL;
7684  		vd_data_apreciacao  := NULL;
7685  		vc_data 	    := NULL;
7686  
7687  		IF(vr_solicitacao.dataDaSolicitacao IS NOT NULL) THEN
7688  		  BEGIN
7689  		    vc_data := To_Char(FROM_TZ(CAST(to_timestamp_tz(vr_solicitacao.dataDaSolicitacao,'yyyy-mm-dd"T"hh24:mi:ss.ff3tzh:tzm') as TIMESTAMP), 'UTC') AT TIME ZONE 'BRAZIL/EAST', 'YYYY-MM-DD HH24:MI:SS');
7690  		    vd_data_solicitacao :=  To_Date(vc_data, 'RRRR-MM-DD HH24:MI:SS');
7691  		  EXCEPTION
7692  		    WHEN OTHERS THEN
7693  		      vc_data := SubStr(vr_solicitacao.dataDaSolicitacao, 1, InStr(vr_solicitacao.dataDaSolicitacao, '+')-1);
7694  		      vc_data := SubStr(vc_data, 1, InStr(vc_data, '.')-1);
7695  		      vc_data := REPLACE(vc_data, 'T', ' ');
7696  		      vd_data_solicitacao :=  To_Date(vc_data, 'RRRR-MM-DD HH24:mi:ss');
7697  		  END;
7698  		ELSE
7699  		    vc_data := NULL;
7700  		END IF;
7701  
7702  		IF(vr_solicitacao.dataDeApreciacao IS NOT NULL) THEN
7703  		  BEGIN
7704  		    vc_data := To_Char(FROM_TZ(CAST(to_timestamp_tz(vr_solicitacao.dataDeApreciacao,'yyyy-mm-dd"T"hh24:mi:ss.ff3tzh:tzm') as TIMESTAMP), 'UTC') AT TIME ZONE 'BRAZIL/EAST', 'YYYY-MM-DD HH24:MI:SS');
7705  		    vd_data_apreciacao :=  To_Date(vc_data, 'RRRR-MM-DD HH24:MI:SS');
7706  		  EXCEPTION
7707  		    WHEN OTHERS THEN
7708  		      vc_data := SubStr(vr_solicitacao.dataDeApreciacao, 1, InStr(vr_solicitacao.dataDeApreciacao, '+')-1);
7709  		      vc_data := SubStr(vc_data, 1, InStr(vc_data, '.')-1);
7710  		      vc_data := REPLACE(vc_data, 'T', ' ');
7711  		      vd_data_apreciacao :=  To_Date(vc_data, 'RRRR-MM-DD HH24:mi:ss');
7712  		  END;
7713  		ELSE
7714  		    vc_data := NULL;
7715  		END IF;
7716  
7717  		vb_achou := FALSE;
7718  		OPEN  cur_due_solic(vc_situacao, vd_data_solicitacao);
7719  		FETCH cur_due_solic INTO vn_temp_id;
7720  		vb_achou := cur_due_solic%FOUND;
7721  		CLOSE cur_due_solic;
7722  
7723  		IF NOT(vb_achou) THEN
7724  		  vc_etapa := 'Insert exp_due_hist_solicitacao';
7725  		  INSERT INTO exp_due_hist_solicitacao ( due_solicitacao_id
7726  						       , due_id
7727  						       , tiposolicitacao
7728  						       , datadasolicitacao
7729  						       , usuarioresponsavel
7730  						       , codigodostatusdasolicitacao
7731  						       , statusdasolicitacao
7732  						       , datadeapreciacao
7733  						       , usuarioqueanalisou
7734  						       , motivo
7735  						       , numerodocomprot
7736  						       , motivodoindeferimento
7737  						       , creation_date
7738  						       , created_by
7739  						       , last_update_date
7740  						       , last_updated_by
7741  						    )
7742  					     VALUES ( cmx_fnc_proxima_sequencia('exp_due_hist_solicitacao_sq1')
7743  						    , pn_due_id
7744  						    , vr_solicitacao.tiposolicitacao
7745  						    , vd_data_solicitacao
7746  						    , vr_solicitacao.usuarioresponsavel
7747  						    , vr_solicitacao.codigodostatusdasolicitacao
7748  						    , vr_solicitacao.statusdasolicitacao
7749  						    , vd_data_apreciacao
7750  						    , vr_solicitacao.usuarioqueanalisou
7751  						    , vr_solicitacao.motivo
7752  						    , vr_solicitacao.numerodocomprot
7753  						    , vr_solicitacao.motivodoindeferimento
7754  						    , SYSDATE
7755  						    , pn_usuario_id
7756  						    , SYSDATE
7757  						    , pn_usuario_id
7758  						    );
7759  		END IF;
7760  	      END LOOP;
7761  	    END IF;
7762  
7763  	  ELSE
7764  	    vb_erro := TRUE;
7765  	    cmx_prc_gera_log_erros( pn_evento_id
7766  				  , 'DUE['||vc_nr_due||'] Não foi possível recuperar a situação.'
7767  				  , 'E'
7768  				  );
7769  	  END IF;
7770  
7771  	  IF(vb_erro) THEN
7772  	    RETURN 'ERRO';
7773  	  ELSE
7774  	    RETURN NULL;
7775  	  END IF;
7776  
7777  	EXCEPTION
7778  	  WHEN OTHERS THEN
7779  	    cmx_prc_gera_log_erros( pn_evento_id
7780  				  , 'Etapa['||vc_etapa||'], Erro ['||SubStr(vc_clob,1,4000)||']'
7781  				  , 'E'
7782  				  );
7783  	    RETURN 'ERRO';
7784  	END fnc_proc_retorno_situacao;
7785  
7786  	FUNCTION fnc_normalizar_texto_xml(pc_texto_in VARCHAR2)
7787  	RETURN VARCHAR2
7788  	AS
7789  	  vc_texto_out VARCHAR2(32760);
7790  	  vc_caracter  VARCHAR2(10);
7791  	  vn_cont      NUMBER;
7792  	BEGIN
7793  
7794  	  IF (length (pc_texto_in) > 0) THEN
7795  
7796  	    FOR vn_cont IN 1..length (pc_texto_in) LOOP
7797  
7798  	      vc_caracter  := substr (pc_texto_in, vn_cont, 1);
7799  
7800  	      IF ( ascii(vc_caracter) < 32)  AND  (ascii(vc_caracter) NOT IN ( 10, 13 ) ) THEN
7801  		vc_caracter := '&#'||ascii(vc_caracter)||';';
7802  	      END IF;
7803  	      vc_texto_out := vc_texto_out || vc_caracter;
7804  
7805  	    END LOOP;
7806  
7807  	  END IF;
7808  
7809  	  vc_texto_out := REPLACE(vc_texto_out, '&#0;', '');
7810  	  vc_texto_out := REPLACE(vc_texto_out, '   ', ' ');
7811  
7812  	  RETURN vc_texto_out;
7813  	END;
7814  
7815  	PROCEDURE p_prc_inserir_ato( pn_fat_item_det_ato_id	NUMBER
7816  				   , pn_fat_item_ato_id 	NUMBER
7817  				   , pn_due_ship_item_id	NUMBER
7818  				   , pn_usuario_id		NUMBER
7819  				   , pn_fatura_id		NUMBER
7820  				   , pn_fatura_item_id		NUMBER
7821  				   , pn_fatura_item_detalhe_id	NUMBER
7822  				   , pn_due_si_adoc_id		NUMBER
7823  				   , pn_quantidade_est		NUMBER
7824  				   , pc_tipo			VARCHAR2
7825  				   ) IS
7826  
7827  	  CURSOR cur_atos(pn_fat_item_det_ato_id NUMBER)
7828  	      IS
7829  	  SELECT efia.numero
7830  	       , efia.nr_item_drawback
7831  	       --, Sum(Nvl(nullif(efidna.qtde_estatistica,0), efida.quantidade_drw))  quantidade
7832  	       , Sum(Nvl(nullif(efida.quantidade_re,0), efida.quantidade_drw))	     quantidade
7833  	       , Sum(efida.valor18b)	    valor
7834  	       , efia.ncm
7835  	       , efia.cnpj
7836  	    FROM exp_vw_fatura_item_atos	efia
7837  	       , exp_fatura_item_detalhe_atos	efida
7838  	       --, exp_vw_fatura_item_det_nf_ato  efidna
7839  	   WHERE efia.fatura_item_ato_id	  = efida.fatura_item_ato_id
7840  	     --AND efida.fatura_item_detalhe_ato_id = efidna.fatura_item_detalhe_ato_id
7841  	     AND efida.fatura_item_detalhe_ato_id = pn_fat_item_det_ato_id
7842  	     AND efia.numero IS NOT NULL
7843  	GROUP BY efia.numero
7844  	       , efia.nr_item_drawback
7845  	       , efia.ncm
7846  	       , efia.cnpj
7847  	       , efida.fatura_item_ato_id;
7848  
7849  	  CURSOR cur_ato_rd
7850  	      IS
7851  	  SELECT efia.fatura_item_ato_id
7852  	       , efia.rd_id
7853  	       , drd.caracteristica_id
7854  	       , drd.modalidade
7855  	    FROM exp_fatura_item_atos  efia
7856  	       , drw_registro_drawback drd
7857  	   WHERE efia.numero = drd.numero(+)
7858  	     AND fatura_item_ato_id = pn_fat_item_ato_id;
7859  
7860  	  CURSOR cur_ato_nf_nac(pn_fatura_item_det_id NUMBER)
7861  	      IS
7862  	  SELECT numero_nf
7863  	       , serie
7864  	       , data_nf
7865  	       , Nvl(qtde_re, qtde) qtde
7866  	       , valor
7867  	    FROM exp_fatura_item_detalhes_nfnac
7868  	   WHERE fatura_item_detalhe_id = pn_fatura_item_det_id;
7869  
7870  	  CURSOR cur_adoc_inv(pc_identification VARCHAR2, pc_data DATE)
7871  	      IS
7872  	  SELECT due_si_adoc_inv_id
7873  	    FROM exp_due_si_adoc_inv
7874  	   WHERE due_si_adoc_id = pn_due_si_adoc_id
7875  	     AND identification = pc_identification
7876  	     AND issuedatetime	= pc_data;
7877  
7878  	  vr_ato_rd	    cur_ato_rd%ROWTYPE;
7879  	  vn_due_si_adoc_id NUMBER;
7880  	  vb_achou	    BOOLEAN := FALSE;
7881  	  vn_adoc_inv_id    NUMBER;
7882  	  vn_quantidade     NUMBER := 0;
7883  
7884  	BEGIN
7885  
7886  	  /*
7887  	  EX0075 ItemID
7888  	  EX0076 QuantityQuantity
7889  	  EX0077 ValueWithExchangeCoverAmount
7890  	  EX0078 ValueWithoutExchangeCoverAmount
7891  	  EX0083 DrawbackHsClassification
7892  	  EX0084 DrawbackRecipientId
7893  	  */
7894  	  OPEN	cur_ato_rd;
7895  	  FETCH cur_ato_rd INTO vr_ato_rd;
7896  	  CLOSE cur_ato_rd;
7897  
7898  	  IF(Nvl(pc_tipo,'I') = 'I') THEN
7899  	    FOR ato IN cur_atos(pn_fat_item_det_ato_id)
7900  	    LOOP
7901  
7902  	      vn_due_si_adoc_id := cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1');
7903  
7904  	      IF(Nvl(pn_quantidade_est,0) > 0) THEN
7905  		vn_quantidade := pn_quantidade_est;
7906  	      ELSE
7907  		vn_quantidade := ato.quantidade;
7908  	      END IF;
7909  
7910  	      INSERT INTO exp_due_si_adoc
7911  	      (
7912  		due_si_adoc_id
7913  	      , due_ship_item_id
7914  	      , identification
7915  	      , category
7916  	      , creation_date
7917  	      , created_by
7918  	      , last_update_date
7919  	      , last_updated_by
7920  	      , itemid
7921  	      , quantity
7922  	      , vlrwithexcoveramount
7923  	      , vlrwithoutexcoveramount
7924  	      , drawbackhsclassification
7925  	      , drawbackrecipientid
7926  	      ) VALUES (
7927  			  vn_due_si_adoc_id
7928  			, pn_due_ship_item_id
7929  			, ato.numero
7930  			, exp_pkg_due.fnc_ind_due('EX0024' ,'L', pn_fatura_id, NULL , pn_fatura_item_id)
7931  			, SYSDATE
7932  			, pn_usuario_id
7933  			, SYSDATE
7934  			, pn_usuario_id
7935  			, ato.nr_item_drawback
7936  			, vn_quantidade
7937  			, ato.valor
7938  			, 0
7939  			, ato.ncm
7940  			, ato.cnpj
7941  			);
7942  
7943  	      /* Verifica se o está preenchido o rd_id.
7944  		  Se não estiver preenchido, verifica se possui nota fiscal nacional para o ATO */
7945  	      IF(vr_ato_rd.rd_id IS NULL) THEN
7946  		--Ato NF entrada nacional
7947  		FOR ato_nac IN cur_ato_nf_nac(pn_fatura_item_detalhe_id) LOOP
7948  		  INSERT INTO exp_due_si_adoc_inv ( due_si_adoc_inv_id
7949  						  , due_si_adoc_id
7950  						  , identification
7951  						  , issuedatetime
7952  						  , typecode
7953  						  , customsvalueamount
7954  						  , quantityquantity
7955  						  , creation_date
7956  						  , created_by
7957  						  , last_update_date
7958  						  , last_updated_by
7959  						  )
7960  					  VALUES ( cmx_fnc_proxima_sequencia('exp_due_si_adoc_inv_sq1')
7961  						  , vn_due_si_adoc_id
7962  						  , ato_nac.numero_nf
7963  						  , ato_nac.data_nf
7964  						  , '388'
7965  						  , ato_nac.valor
7966  						  , ato_nac.qtde
7967  						  , SYSDATE
7968  						  , 0
7969  						  , SYSDATE
7970  						  , 0
7971  						  );
7972  		END LOOP;
7973  	      END IF;
7974  
7975  	    END LOOP;
7976  
7977  	  ELSE
7978  
7979  	    FOR ato IN cur_atos(pn_fat_item_det_ato_id)
7980  	    LOOP
7981  
7982  	      IF(Nvl(pn_quantidade_est,0) > 0) THEN
7983  		vn_quantidade := pn_quantidade_est;
7984  	      ELSE
7985  		vn_quantidade := ato.quantidade;
7986  	      END IF;
7987  
7988  	      UPDATE exp_due_si_adoc SET quantity = Nvl(quantity,0) + Nvl(vn_quantidade,0)
7989  					, vlrwithexcoveramount = Nvl(vlrwithexcoveramount,0) + Nvl(ato.valor,0)
7990  				    WHERE due_si_adoc_id = pn_due_si_adoc_id;
7991  
7992  	      /* Verifica se o está preenchido o rd_id.
7993  		  Se não estiver preenchido, verifica se possui nota fiscal nacional para o ATO */
7994  	      IF(vr_ato_rd.rd_id IS NULL) THEN
7995  		--Ato NF entrada nacional
7996  		FOR ato_nac IN cur_ato_nf_nac(pn_fatura_item_detalhe_id) LOOP
7997  
7998  		  vb_achou := FALSE;
7999  		  OPEN	cur_adoc_inv(ato_nac.numero_nf, ato_nac.data_nf);
8000  		  FETCH cur_adoc_inv INTO vn_adoc_inv_id;
8001  		  vb_achou := cur_adoc_inv%FOUND;
8002  		  CLOSE cur_adoc_inv;
8003  
8004  		  IF(vb_achou) THEN
8005  		    UPDATE exp_due_si_adoc_inv SET customsvalueamount = Nvl(customsvalueamount,0) + Nvl(ato_nac.valor,0)
8006  						 , quantityquantity   = Nvl(quantityquantity,0) + Nvl(ato_nac.qtde,0)
8007  					     WHERE due_si_adoc_inv_id = vn_adoc_inv_id;
8008  		  ELSE
8009  		    INSERT INTO exp_due_si_adoc_inv ( due_si_adoc_inv_id
8010  						    , due_si_adoc_id
8011  						    , identification
8012  						    , issuedatetime
8013  						    , typecode
8014  						    , customsvalueamount
8015  						    , quantityquantity
8016  						    , creation_date
8017  						    , created_by
8018  						    , last_update_date
8019  						    , last_updated_by
8020  						    )
8021  					    VALUES ( cmx_fnc_proxima_sequencia('exp_due_si_adoc_inv_sq1')
8022  						    , pn_due_si_adoc_id
8023  						    , ato_nac.numero_nf
8024  						    , ato_nac.data_nf
8025  						    , '388'
8026  						    , ato_nac.valor
8027  						    , ato_nac.qtde
8028  						    , SYSDATE
8029  						    , 0
8030  						    , SYSDATE
8031  						    , 0
8032  						    );
8033  		  END IF;
8034  		END LOOP;
8035  	      END IF;
8036  	    END LOOP;
8037  
8038  	  END IF;
8039  
8040  	END p_prc_inserir_ato;
8041  
8042  	PROCEDURE p_prc_inserir_ato_isencao( pn_due_ship_item_id	NUMBER
8043  					   , pn_fatura_det_nf_id	NUMBER
8044  					   , pn_usuario_id		NUMBER
8045  					   ) IS
8046  
8047  	  CURSOR cur_atos
8048  	      IS
8049  	  SELECT dxield.quantidade
8050  	       , dxield.categorycode
8051  	       , dxield.identification
8052  	       , dxield.drawbackrecipientid
8053  	       , dxield.drawbackhsclassification
8054  	       , dxield.valuewithexchangecoveramount
8055  	       , dxield.quantityquantity
8056  	       , dxield.itemid
8057  	    FROM drw_xml_isencao_export_lin_due dxield
8058  	       , drw_xml_isencao_exportacao_due dxied
8059  	       , exp_fatura_item_det_nf 	efidn
8060  	   WHERE dxield.xml_exp_id	     = dxied.xml_exp_id
8061  	     AND dxield.due_fatura_det_nf_id = efidn.fatura_det_nf_id
8062  	     AND efidn.fatura_det_nf_id      = pn_fatura_det_nf_id
8063  	     AND dxied.status		     = 'A';
8064  
8065  	  CURSOR cur_verifica(pc_identification VARCHAR2)
8066  	      IS
8067  	  SELECT due_si_adoc_id
8068  	    FROM exp_due_si_adoc
8069  	   WHERE due_ship_item_id = pn_due_ship_item_id
8070  	     AND identification   = pc_identification;
8071  
8072  	  vb_achou	    BOOLEAN := FALSE;
8073  	  vn_due_si_adoc_id NUMBER;
8074  	BEGIN
8075  
8076  	  FOR ato IN cur_atos LOOP
8077  
8078  	    vb_achou := FALSE;
8079  	    OPEN  cur_verifica(ato.identification);
8080  	    FETCH cur_verifica INTO vn_due_si_adoc_id;
8081  	    vb_achou := cur_verifica%FOUND;
8082  	    CLOSE cur_verifica;
8083  
8084  	    IF(vb_achou) THEN
8085  	      UPDATE exp_due_si_adoc SET itemid 		    = ato.itemid
8086  				       , quantity		    = Nvl(quantity,0) + Nvl(ato.quantityquantity,0)
8087  				       , vlrwithexcoveramount	    = Nvl(vlrwithexcoveramount,0) + Nvl(ato.valuewithexchangecoveramount,0)
8088  				       , vlrwithoutexcoveramount    = 0
8089  				       , last_update_date	    = SYSDATE
8090  				       , last_updated_by	    = pn_usuario_id
8091  				   WHERE due_si_adoc_id = vn_due_si_adoc_id;
8092  	    ELSE
8093  	      INSERT INTO exp_due_si_adoc
8094  		  (
8095  		    due_si_adoc_id
8096  		  , due_ship_item_id
8097  		  , identification
8098  		  , category
8099  		  , creation_date
8100  		  , created_by
8101  		  , last_update_date
8102  		  , last_updated_by
8103  		  , itemid
8104  		  , quantity
8105  		  , vlrwithexcoveramount
8106  		  , vlrwithoutexcoveramount
8107  		  , drawbackhsclassification
8108  		  , drawbackrecipientid
8109  		  ) VALUES (
8110  			      cmx_fnc_proxima_sequencia('exp_due_si_adoc_sq1')
8111  			    , pn_due_ship_item_id
8112  			    , ato.identification
8113  			    , 'DBI'
8114  			    , SYSDATE
8115  			    , pn_usuario_id
8116  			    , SYSDATE
8117  			    , pn_usuario_id
8118  			    , ato.itemid
8119  			    , ato.quantityquantity
8120  			    , ato.valuewithexchangecoveramount
8121  			    , 0
8122  			    , ato.drawbackhsclassification
8123  			    , ato.drawbackrecipientid
8124  			    );
8125  	    END IF;
8126  	  END LOOP;
8127  
8128  	END p_prc_inserir_ato_isencao;
8129  
8130  	FUNCTION exp_fnc_ret_estado(pn_fatura_id NUMBER) RETURN VARCHAR2 IS
8131  
8132  	  CURSOR cur_faturas
8133  	      IS
8134  	  SELECT cmx_pkg_tabelas.codigo(b.uf_id)
8135  	    FROM exp_faturas  a
8136  	       , cmx_empresas b
8137  	   WHERE b.empresa_id = a.empresa_id
8138  	     AND a.fatura_id = pn_fatura_id;
8139  
8140  	 vc_estado  VARCHAR2(02) := NULL;
8141  	BEGIN
8142  
8143  	  OPEN	cur_faturas;
8144  	  FETCH cur_faturas INTO vc_estado;
8145  	  CLOSE cur_faturas;
8146  
8147  	  RETURN vc_estado;
8148  
8149  	END exp_fnc_ret_estado;
8150  
8151  	FUNCTION exp_fnc_ret_nome_cliente(pn_fatura_id NUMBER) RETURN VARCHAR2 IS
8152  
8153  	  CURSOR cur_faturas
8154  	      IS
8155  	  SELECT b.nome
8156  	    FROM exp_faturas a
8157  	       , exp_fatura_entidades b
8158  	   WHERE b.fatura_id	     = a.fatura_id
8159  	     AND b.entidade_tipo_id  = cmx_pkg_tabelas.tabela_id('918', 'C')
8160  	     AND a.fatura_id	     = pn_fatura_id;
8161  
8162  	  vc_nome VARCHAR2(200) := NULL;
8163  	BEGIN
8164  
8165  	  OPEN	cur_faturas;
8166  	  FETCH cur_faturas INTO vc_nome;
8167  	  CLOSE cur_faturas;
8168  
8169  	  RETURN vc_nome;
8170  	END exp_fnc_ret_nome_cliente;
8171  
8172  	FUNCTION exp_fnc_ret_pais_cliente(pn_fatura_id NUMBER) RETURN VARCHAR2 IS
8173  
8174  
8175  	   CURSOR cur_faturas
8176  	      IS
8177  	  SELECT b.fatura_entidade_id
8178  	       , b.entidade_id
8179  	       , b.site_id
8180  	       , b.origem
8181  	    FROM exp_faturas a
8182  	       , exp_fatura_entidades b
8183  	   WHERE a.fatura_id	     = b.fatura_id
8184  	     AND b.entidade_tipo_id  = cmx_pkg_tabelas.tabela_id('918', 'C')
8185  	     AND a.fatura_id	     = pn_fatura_id;
8186  
8187  	  CURSOR cur_cliente(pn_site_id NUMBER)
8188  	      IS
8189  	  SELECT cmx_pkg_tabelas.auxiliar(c.pais_id,1)
8190  	    FROM exp_cliente_sites    c
8191  	   WHERE c.cliente_site_id   = pn_site_id;
8192  
8193  	  CURSOR cur_entidade(pn_site_id NUMBER)
8194  	      IS
8195  	  SELECT cmx_pkg_tabelas.auxiliar(e.pais_id,1)
8196  	    FROM exp_entidade_sites  e
8197  	   WHERE e.entidade_site_id   = pn_site_id;
8198  
8199  	  vr_faturas  cur_faturas%ROWTYPE;
8200  	  vc_pais     VARCHAR2(02) := NULL;
8201  	  vb_found    BOOLEAN := FALSE;
8202  	BEGIN
8203  
8204  	  OPEN	cur_faturas;
8205  	  FETCH cur_faturas INTO vr_faturas;
8206  	  vb_found := cur_faturas%FOUND;
8207  	  CLOSE cur_faturas;
8208  
8209  	  -- Origem = 1 - Cliente; 2 - Entidade
8210  
8211  	  IF(Nvl(vr_faturas.origem, '2') = '2') THEN
8212  
8213  	    OPEN  cur_entidade(vr_faturas.site_id);
8214  	    FETCH cur_entidade INTO vc_pais;
8215  	    CLOSE cur_entidade;
8216  
8217  	  ELSE
8218  
8219  	    OPEN  cur_cliente(vr_faturas.site_id);
8220  	    FETCH cur_cliente INTO vc_pais;
8221  	    CLOSE cur_cliente;
8222  
8223  	  END IF;
8224  
8225  	  RETURN vc_pais;
8226  	END exp_fnc_ret_pais_cliente;
8227  
8228  	FUNCTION exp_fnc_ret_endereco_cliente(pn_fatura_id NUMBER) RETURN VARCHAR2 IS
8229  
8230  	  CURSOR cur_faturas
8231  	      IS
8232  	  SELECT b.endereco1
8233  	    FROM exp_faturas a
8234  	       , exp_fatura_entidades b
8235  	   WHERE b.fatura_id	     = a.fatura_id
8236  	     AND b.entidade_tipo_id  = cmx_pkg_tabelas.tabela_id('918', 'C')
8237  	     AND a.fatura_id	     = pn_fatura_id;
8238  
8239  	  vc_endereco VARCHAR2(200) := NULL;
8240  	BEGIN
8241  
8242  	  OPEN	cur_faturas;
8243  	  FETCH cur_faturas INTO vc_endereco;
8244  	  CLOSE cur_faturas;
8245  
8246  	  RETURN vc_endereco;
8247  	END exp_fnc_ret_endereco_cliente;
8248  
8249  	FUNCTION exp_fnc_ret_pais_destino(pn_fatura_id NUMBER) RETURN VARCHAR2 IS
8250  	  vn_pais_id  NUMBER	   := NULL ;
8251  	  vc_pais     VARCHAR2(02) := NULL ;
8252  	BEGIN
8253  
8254  	  vn_pais_id := exp_pkg_informacoes.fnc_complemento_id( cmx_pkg_tabelas.tabela_id ('201','PAIS_DESTINO_FINAL')
8255  							      , NULL
8256  							      , pn_fatura_id
8257  							      , NULL
8258  							      , NULL
8259  							      );
8260  
8261  	  vc_pais := cmx_pkg_tabelas.auxiliar(vn_pais_id ,1);
8262  
8263  	  RETURN vc_pais;
8264  	END exp_fnc_ret_pais_destino;
8265  
8266  	FUNCTION fnc_incluir_faturas( pn_due_tmp_id NUMBER
8267  				    , pn_due_id     NUMBER
8268  				    , pn_evento_id  NUMBER
8269  				    , pn_usuario_id NUMBER
8270  				    ) RETURN NUMBER
8271  	IS
8272  
8273  	  CURSOR cur_dados
8274  	      IS
8275  	  SELECT fatura_id
8276  	       , embarque_id
8277  	       , fatura_numero
8278  	       , fatura_ano
8279  	       , empresa_id
8280  	       , doffice_identification
8281  	       , whs_identification
8282  	       , whs_type
8283  	       , whs_latitude
8284  	       , whs_longitude
8285  	       , whs_addr_line
8286  	       , currencytype
8287  	       --, declarant_identification
8288  	       , exitoffice_identification
8289  	       , exitoffice_whs_identification
8290  	       , exitoffice_whs_type
8291  	       --, importer_name
8292  	       , importer_addr_country
8293  	       --, importer_addr_line
8294  	       , forma_exportacao
8295  	       , forma_exportacao_type
8296  	       , situacao_especial
8297  	       , situacao_especial_type
8298  	       , caso_esp_transporte
8299  	       , caso_esp_transporte_type
8300  	       , observacoes_gerais
8301  	       , observacoes_gerais_type
8302  	       --, ucr
8303  	       , motivo_dispensa_nf
8304  	    FROM (SELECT ef.fatura_id
8305  		       , ef.embarque_id
8306  		       , ef.fatura_numero
8307  		       , ef.fatura_ano
8308  		       , edft.empresa_id
8309  		       , exp_pkg_due.fnc_ind_due('EX0010' ,'F', ef.fatura_id )	       doffice_identification
8310  		       , NVL( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
8311  			    , exp_pkg_due.fnc_ind_due('EX0037_CNPJ' ,'F', ef.fatura_id ))	  whs_identification
8312  		       , Decode( exp_pkg_due.fnc_ind_due('EX0037' ,'F', ef.fatura_id )
8313  			       , NULL
8314  			       , '22'
8315  			       , '281'
8316  			       )						       whs_type
8317  		       , exp_pkg_due.fnc_ind_due('EX0063' ,'F', ef.fatura_id )	       whs_latitude
8318  		       , exp_pkg_due.fnc_ind_due('EX0064' ,'F', ef.fatura_id )	       whs_longitude
8319  		       , exp_pkg_due.fnc_ind_due('EX0062' ,'F', ef.fatura_id )	       whs_addr_line
8320  		       , exp_pkg_due.fnc_ind_due('EX0039' ,'F', ef.fatura_id )	       currencytype
8321  		       --, exp_pkg_due.fnc_ind_due('EX0003' ,'F', ef.fatura_id )	 declarant_identification
8322  		       , exp_pkg_due.fnc_ind_due('EX0011' ,'F', ef.fatura_id )	       exitoffice_identification
8323  		       , exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )	       exitoffice_whs_identification
8324  		       , Decode( exp_pkg_due.fnc_ind_due('EX0012' ,'F', ef.fatura_id )
8325  			       , NULL
8326  			       , '22'
8327  			       , '281'
8328  			       )						       exitoffice_whs_type
8329  		       --, exp_pkg_due.fnc_ind_due('EX0008' ,'F', ef.fatura_id )	 importer_name
8330  		       , exp_pkg_due.fnc_ind_due('EX0009' ,'F', ef.fatura_id )	       importer_addr_country
8331  		       --, exp_pkg_due.fnc_ind_due('EX0036' ,'F', ef.fatura_id )	 importer_addr_line
8332  		       , exp_pkg_due.fnc_ind_due('EX0040_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao
8333  		       , exp_pkg_due.fnc_ind_due('EX0041_FRM_EXP' ,'F', ef.fatura_id ) forma_exportacao_type
8334  		       , exp_pkg_due.fnc_ind_due('EX0040_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial
8335  		       , exp_pkg_due.fnc_ind_due('EX0041_SIT_ESP' ,'F', ef.fatura_id ) situacao_especial_type
8336  		       , exp_pkg_due.fnc_ind_due('EX0040_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte
8337  		       , exp_pkg_due.fnc_ind_due('EX0041_ESP_TRS' ,'F', ef.fatura_id ) caso_esp_transporte_type
8338  		       , exp_pkg_due.fnc_ind_due('EX0042_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais
8339  		       , exp_pkg_due.fnc_ind_due('EX0041_OBS_GER' ,'F', ef.fatura_id ) observacoes_gerais_type
8340  		       --, exp_pkg_due.fnc_ind_due('EX0002' ,'F', ef.fatura_id )	 ucr
8341  		       , exp_pkg_due.fnc_ind_due('EX0067' ,'F', ef.fatura_id )	       motivo_dispensa_nf
8342  		    FROM exp_faturas ef
8343  		       , exp_due_fatura_tmp edft
8344  		   WHERE ef.fatura_id = edft.fatura_id
8345  		     AND edft.due_tmp_id = pn_due_tmp_id
8346  		 )
8347  	ORDER BY fatura_ano
8348  	       , fatura_numero
8349  	       , doffice_identification
8350  	       , whs_identification
8351  	       , whs_type
8352  	       , whs_latitude
8353  	       , whs_longitude
8354  	       , whs_addr_line
8355  	       , currencytype
8356  	       --, declarant_identification
8357  	       , exitoffice_identification
8358  	       , exitoffice_whs_identification
8359  	       , exitoffice_whs_type
8360  	       --, importer_name
8361  	       , importer_addr_country
8362  	       --, importer_addr_line
8363  	       , forma_exportacao
8364  	       , forma_exportacao_type
8365  	       , situacao_especial
8366  	       , situacao_especial_type
8367  	       , caso_esp_transporte
8368  	       , caso_esp_transporte_type
8369  	       , observacoes_gerais
8370  	       , observacoes_gerais_type
8371  	       , motivo_dispensa_nf
8372  	       ;
8373  
8374  	  CURSOR cur_ruc
8375  	      IS
8376  	  SELECT ucr
8377  	    FROM exp_due
8378  	   WHERE due_id = pn_due_id;
8379  
8380  	  CURSOR cur_vinc_fat
8381  	     IS
8382  	 SELECT cmx_fnc_string_agg(fat.fatura_numero||'/'||fat.fatura_ano)
8383  	   FROM exp_due_faturas      dfat
8384  	      , exp_due 	     due
8385  	      , exp_due_fatura_tmp   tmp
8386  	      , exp_due_ship	     ship
8387  	      , exp_faturas	     fat
8388  	  WHERE dfat.due_id = due.due_id
8389  	    AND dfat.fatura_id = tmp.fatura_id
8390  	    AND dfat.fatura_id = ship.fatura_id
8391  	    AND ship.due_id   = due.due_id
8392  	    AND dfat.fatura_id = fat.fatura_id
8393  	    AND due.dt_cancel IS NULL
8394  	    AND ship.fatura_nf_id IS NULL
8395  	    AND tmp.due_tmp_id = pn_due_tmp_id
8396  	    AND due.due_id <> pn_due_id
8397  	    GROUP BY fat.fatura_numero, fat.fatura_ano;
8398  
8399  	  vr_fat_ant cur_dados%ROWTYPE;
8400  	  vb_erro	       BOOLEAN;
8401  	  vn_criacao	       NUMBER;
8402  	  vc_ucr	       VARCHAR2(35) := NULL;
8403  	  vc_decl_identif      VARCHAR2(17);
8404  	  vc_faturas	       VARCHAR2(4000) := NULL;
8405  	BEGIN
8406  
8407  	  -- verifica se alguma fatura tem informação divergente das demais.
8408  	  vr_fat_ant := NULL;
8409  	  vb_erro    := FALSE;
8410  
8411  	  -- verifica se alguma fatura já possui DUE gerada do tipo embarque antecipado.
8412  	  OPEN	cur_vinc_fat;
8413  	  FETCH cur_vinc_fat INTO vc_faturas;
8414  	  CLOSE cur_vinc_fat;
8415  
8416  	  IF(vc_faturas IS NOT NULL) THEN
8417  	    cmx_prc_gera_log_erros(pn_evento_id, 'Não é possível gerar a DUE, pois a(s) fatura(s) ['||vc_faturas||'] já está(ão) vinculada(s) a uma DUE.','E');
8418  	    vb_erro := TRUE;
8419  	  END IF;
8420  
8421  	  FOR x IN cur_dados
8422  	  LOOP
8423  	    --IF x.doffice_identification IS NULL THEN
8424  	    --	cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ sem local de despacho preenchido.', 'EXP_PKG_DUE','FNC_GERAR_DUE_025',null,x.fatura_numero || '/' || x.fatura_ano),'E');
8425  	    --	vb_erro := TRUE;
8426  	    --END IF;
8427  
8428  	    IF vr_fat_ant.fatura_id IS NOT NULL THEN
8429  	      IF Nvl(x.doffice_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.doffice_identification       ,'-!-!-!') THEN
8430  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_026',null,x.fatura_numero || '/' || x.fatura_ano, 'doffice_identification'       , x.doffice_identification       ),'E');
8431  		vb_erro := TRUE;
8432  	      END IF;
8433  
8434  	      IF Nvl(x.whs_identification	    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_identification	       ,'-!-!-!') THEN
8435  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_027',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_identification'	      , x.whs_identification	       ),'E');
8436  		vb_erro := TRUE;
8437  	      END IF;
8438  
8439  	      IF Nvl(x.whs_type 		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_type		       ,'-!-!-!') THEN
8440  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_028',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_type'		      , x.whs_type		       ),'E');
8441  		vb_erro := TRUE;
8442  	      END IF;
8443  
8444  	      IF Nvl(x.whs_latitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_latitude		       ,'-!-!-!') THEN
8445  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_029',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_latitude'		      , x.whs_latitude		       ),'E');
8446  		vb_erro := TRUE;
8447  	      END IF;
8448  
8449  	      IF Nvl(x.whs_longitude		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_longitude 	       ,'-!-!-!') THEN
8450  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_030',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_longitude'		      , x.whs_longitude 	       ),'E');
8451  		vb_erro := TRUE;
8452  	      END IF;
8453  
8454  	      IF Nvl(x.whs_addr_line		    ,'-!-!-!')	<> Nvl(vr_fat_ant.whs_addr_line 	       ,'-!-!-!') THEN
8455  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_031',null,x.fatura_numero || '/' || x.fatura_ano, 'whs_addr_line'		      , x.whs_addr_line 	       ),'E');
8456  		vb_erro := TRUE;
8457  	      END IF;
8458  
8459  	      IF Nvl(x.currencytype		    ,'-!-!-!')	<> Nvl(vr_fat_ant.currencytype		       ,'-!-!-!') THEN
8460  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_032',null,x.fatura_numero || '/' || x.fatura_ano, 'currencytype'		      , x.currencytype		       ),'E');
8461  		vb_erro := TRUE;
8462  	      END IF;
8463  
8464  	      --IF Nvl(x.declarant_identification     ,'-!-!-!')  <> Nvl(vr_fat_ant.declarant_identification	 ,'-!-!-!') THEN
8465  	      -- cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_033',null,x.fatura_numero || '/' || x.fatura_ano, 'declarant_identification'     , x.declarant_identification	),'E');
8466  	      --  vb_erro := TRUE;
8467  	      --END IF;
8468  
8469  	      IF Nvl(x.exitoffice_identification    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_identification    ,'-!-!-!') THEN
8470  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_034',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_identification'    , x.exitoffice_identification    ),'E');
8471  		vb_erro := TRUE;
8472  	      END IF;
8473  
8474  	      IF Nvl(x.exitoffice_whs_identification,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_identification,'-!-!-!') THEN
8475  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_035',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_identification', x.exitoffice_whs_identification),'E');
8476  		vb_erro := TRUE;
8477  	      END IF;
8478  
8479  	      IF Nvl(x.exitoffice_whs_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.exitoffice_whs_type	       ,'-!-!-!') THEN
8480  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_036',null,x.fatura_numero || '/' || x.fatura_ano, 'exitoffice_whs_type'	      , x.exitoffice_whs_type	       ),'E');
8481  		vb_erro := TRUE;
8482  	      END IF;
8483  
8484  --	IF Nvl(x.importer_name		      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_name		 ,'-!-!-!') THEN
8485  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_037',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_name'		, x.importer_name		 ),'E');
8486  --	  vb_erro := TRUE;
8487  --	END IF;
8488  
8489  	      IF Nvl(x.importer_addr_country	    ,'-!-!-!')	<> Nvl(vr_fat_ant.importer_addr_country        ,'-!-!-!') THEN
8490  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_038',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_country'	      , x.importer_addr_country        ),'E');
8491  		vb_erro := TRUE;
8492  	      END IF;
8493  
8494  --	IF Nvl(x.importer_addr_line	      ,'-!-!-!')  <> Nvl(vr_fat_ant.importer_addr_line		 ,'-!-!-!') THEN
8495  --	  cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_039',null,x.fatura_numero || '/' || x.fatura_ano, 'importer_addr_line'		, x.importer_addr_line		 ),'E');
8496  --	  vb_erro := TRUE;
8497  --	END IF;
8498  
8499  	      IF Nvl(x.forma_exportacao 	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao	       ,'-!-!-!') THEN
8500  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_040',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao'	      , x.forma_exportacao	       ),'E');
8501  		vb_erro := TRUE;
8502  	      END IF;
8503  
8504  	      IF Nvl(x.forma_exportacao_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.forma_exportacao_type        ,'-!-!-!') THEN
8505  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_041',null,x.fatura_numero || '/' || x.fatura_ano, 'forma_exportacao_type'	      , x.forma_exportacao_type        ),'E');
8506  		vb_erro := TRUE;
8507  	      END IF;
8508  
8509  	      IF Nvl(x.situacao_especial	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial	       ,'-!-!-!') THEN
8510  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_042',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial'	      , x.situacao_especial	       ),'E');
8511  		vb_erro := TRUE;
8512  	      END IF;
8513  
8514  	      IF Nvl(x.situacao_especial_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.situacao_especial_type       ,'-!-!-!') THEN
8515  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_043',null,x.fatura_numero || '/' || x.fatura_ano, 'situacao_especial_type'       , x.situacao_especial_type       ),'E');
8516  		vb_erro := TRUE;
8517  	      END IF;
8518  
8519  	      IF Nvl(x.caso_esp_transporte	    ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte	       ,'-!-!-!') THEN
8520  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_044',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte'	      , x.caso_esp_transporte	       ),'E');
8521  		vb_erro := TRUE;
8522  	      END IF;
8523  
8524  	      IF Nvl(x.caso_esp_transporte_type     ,'-!-!-!')	<> Nvl(vr_fat_ant.caso_esp_transporte_type     ,'-!-!-!') THEN
8525  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_045',null,x.fatura_numero || '/' || x.fatura_ano, 'caso_esp_transporte_type'     , x.caso_esp_transporte_type     ),'E');
8526  		vb_erro := TRUE;
8527  	      END IF;
8528  
8529  	      IF Nvl(x.observacoes_gerais	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais	       ,'-!-!-!') THEN
8530  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_046',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais'	      , x.observacoes_gerais	       ),'E');
8531  		vb_erro := TRUE;
8532  	      END IF;
8533  
8534  	      IF Nvl(x.observacoes_gerais_type	    ,'-!-!-!')	<> Nvl(vr_fat_ant.observacoes_gerais_type      ,'-!-!-!') THEN
8535  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_047',null,x.fatura_numero || '/' || x.fatura_ano, 'observacoes_gerais_type'      , x.observacoes_gerais_type      ),'E');
8536  		vb_erro := TRUE;
8537  	      END IF;
8538  
8539  	      IF Nvl(x.motivo_dispensa_nf      ,'-!-!-!')  <> Nvl(vr_fat_ant.motivo_dispensa_nf      ,'-!-!-!') THEN
8540  		cmx_prc_gera_log_erros(pn_evento_id, cmx_fnc_texto_traduzido('Fatura @@01@@ gera quebra no campo @@02@@. Valor atual: @@03@@.', 'EXP_PKG_DUE','FNC_GERAR_DUE_047',null,x.fatura_numero || '/' || x.fatura_ano, 'motivo_dispensa_nf'	 , Nvl(x.motivo_dispensa_nf, ' ')      ),'E');
8541  		vb_erro := TRUE;
8542  	      END IF;
8543  
8544  	    END IF;
8545  
8546  	    vr_fat_ant := x;
8547  
8548  	  END LOOP;
8549  
8550  	  IF vb_erro THEN
8551  	    RETURN NULL;
8552  	  ELSE
8553  
8554  	    UPDATE exp_due
8555  	     SET doffice_identification 	  = vr_fat_ant.doffice_identification
8556  	       , whs_identification		  = vr_fat_ant.whs_identification
8557  	       , whs_type			  = vr_fat_ant.whs_type
8558  	       , whs_latitude			  = vr_fat_ant.whs_latitude
8559  	       , whs_longitude			  = vr_fat_ant.whs_longitude
8560  	       , whs_addr_line			  = vr_fat_ant.whs_addr_line
8561  	       , currencytype			  = vr_fat_ant.currencytype
8562  	       --, declarant_identification	    = vr_fat_ant.declarant_identification
8563  	       , exitoffice_identification	  = vr_fat_ant.exitoffice_identification
8564  	       , exitoffice_whs_identification	  = vr_fat_ant.exitoffice_whs_identification
8565  	       , exitoffice_whs_type		  = vr_fat_ant.exitoffice_whs_type
8566  --	 , importer_name		    = vr_fat_ant.importer_name
8567  	       , importer_addr_country		  = vr_fat_ant.importer_addr_country
8568  --	 , importer_addr_line		    = vr_fat_ant.importer_addr_line
8569  	       , last_update_date		  = sysdate
8570  	       , last_updated_by		  = pn_usuario_id
8571  	   WHERE due_id = pn_due_id;
8572  
8573  	    OPEN  cur_ruc;
8574  	    FETCH cur_ruc INTO vc_ucr;
8575  	    CLOSE cur_ruc;
8576  
8577  	    DELETE FROM exp_due_faturas WHERE due_id = pn_due_id;
8578  
8579  	    INSERT INTO exp_due_faturas
8580  	    (
8581  	      due_fatura_id
8582  	    , due_id
8583  	    , fatura_id
8584  	    , creation_date
8585  	    , created_by
8586  	    , last_update_date
8587  	    , last_updated_by
8588  	    , importer_name
8589  	    , importer_addr_country
8590  	    , importer_addr_line
8591  	    ) SELECT cmx_fnc_proxima_sequencia('exp_due_faturas_sq1')
8592  		  , pn_due_id
8593  		  , edft.fatura_id
8594  		  , SYSDATE
8595  		  , pn_usuario_id
8596  		  , SYSDATE
8597  		  , pn_usuario_id
8598  		  , exp_pkg_due.fnc_ind_due('EX0008' ,'F', edft.fatura_id )
8599  		  , exp_pkg_due.fnc_ind_due('EX0009' ,'F', edft.fatura_id )
8600  		  , exp_pkg_due.fnc_ind_due('EX0036' ,'F', edft.fatura_id )
8601  		FROM exp_due_fatura_tmp edft
8602  	      WHERE edft.due_tmp_id    = pn_due_tmp_id;
8603  
8604  	    prc_atual_compl( pn_due_id
8605  			   , 'DUE_RUC'
8606  			   , vc_ucr
8607  			   , pn_usuario_id
8608  			   );
8609  
8610  	    vn_criacao	:= fnc_criar_due(pn_due_id, pn_evento_id, pn_usuario_id);
8611  
8612  	    IF vn_criacao IS NULL THEN
8613  	      DELETE FROM exp_due_faturas WHERE due_id = pn_due_id;
8614  	    END IF;
8615  
8616  	    COMMIT;
8617  	  END IF;
8618  
8619  	  RETURN pn_due_id;
8620  
8621  	END fnc_incluir_faturas;
8622  
8623  END;
8624  /

Package body created.

SQL> SET SCAN ON
SQL> -- Indexes
SQL> 
SQL> -- Fim
SQL> 
SQL> 
SQL> 
SQL> 
SQL> SET ECHO OFF

Starting compilation of 0 invalid objects...

Total of 0 objects remain invalid...

no rows selected


Objects modified in the last 24 hours
=====================================

OBJECT_TYPE             OBJECT_NAME                                                                                                                      LAST_DDL_TIME       TIMESTAMP           STATUS
----------------------- -------------------------------------------------------------------------------------------------------------------------------- ------------------- ------------------- -------
PACKAGE BODY            EXP_PKG_DUE                                                                                                                      2020/10/08 09:39:11 2020-10-08:09:39:11 VALID

1 row selected.

NLS_LANG value
==============
AMERICAN_AMERICA.WE8ISO8859P1
